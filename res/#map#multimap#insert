<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;map&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/map/multimap/">multimap</a>::insert</h1>
<div class="C_prototype"><div class="C_SwitchCases">
<div title="C++98">
<table><tr class="odd"><th>single element (1)</th><td><pre>iterator insert (const value_type&amp; val);</pre></td></tr><tr class="even"><th>with hint (2)</th><td><pre>iterator insert (iterator position, const value_type&amp; val);</pre></td></tr><tr class="odd"><th>range (3)</th><td><pre>template &lt;class InputIterator&gt;  void insert (InputIterator first, InputIterator last);</pre></td></tr></table></div>
<div title="C++11" class="on">
<table><tr class="even"><th>single element (1)</th><td><pre>iterator insert (const value_type&amp; val);template &lt;class P&gt; iterator insert (P&amp;&amp; val);</pre></td></tr><tr class="odd"><th>with hint (2)</th><td><pre>iterator insert (const_iterator position, const value_type&amp; val);template &lt;class P&gt; iterator insert (const_iterator position, P&amp;&amp; val);</pre></td></tr><tr class="even"><th>range (3)</th><td><pre>template &lt;class InputIterator&gt;  void insert (InputIterator first, InputIterator last);</pre></td></tr><tr class="odd"><th>initializer list (4)</th><td><pre>void insert (initializer_list&lt;value_type&gt; il);</pre></td></tr></table></div>
</div>
</div><div id="I_description">Insert element</div>
<section id="description">
Extends the container by inserting new elements, effectively increasing the container <a href="/multimap::size">size</a> by the number of elements inserted.<br>
<br>
Internally, <a href="/multimap">multimap</a> containers keep all their elements sorted by key following the criterion specified by its <a href="/multimap::key_comp">comparison object</a>. The elements are always inserted in its respective position following this ordering.<br>
<br>
<div class="C_SwitchCases">
<div title="C++98">
There are no guarantees on the relative order of equivalent elements.<br>
</div>
<div title="C++11">
The relative ordering of elements with equivalent keys is preserved, and newly inserted elements follow those with equivalent keys already in the container.<br>
</div>
</div>
<br>
The parameters determine how many elements are inserted and to which values they are initialized:<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>val</dt>
<dd>Value to be copied to (or moved as) the inserted element.<br>
Member type <tt>value_type</tt> is the type of the elements in the container, defined in <a href="/multimap">multimap</a> as <tt><a href="/pair">pair</a>&lt;const key_type,mapped_type&gt;</tt> (see <a href="/multimap#types">multimap member types</a>).<br>
<div class="C_SwitchCases">
<div title="C++98">
The template parameter <tt>P</tt> shall be a type convertible to <tt>value_type</tt>.<br>
</div>
<div title="C++14">
The signatures taking an argument of type <code>P&&</code> are only called if <code><a href="/is_constructible">std::is_constructible</a>&lt;value_type,P&&&gt;</code> is <code>true</code>.<br>
</div>
</div>
If <tt>P</tt> is instantiated as a reference type, the argument is copied.<br>
</dd>
<dt>position</dt>
<dd>
Hint for the position where the element can be inserted.<br>
<div class="C_SwitchCases">
<div title="C++98">
The function optimizes its insertion time if <i>position</i> points to the element that will <b>precede</b> the inserted element.<br>
</div>
<div title="C++11">
The function optimizes its insertion time if <i>position</i> points to the element that will <b>follow</b> the inserted element (or to the <a href="/multimap::end">end</a>, if it would be the last).<br>
</div>
</div>
Notice that this is just a hint and does not force the new element to be inserted at that position within the <a href="/multimap">multimap</a> container (the elements in a <a href="/multimap">multimap</a> always follow a specific order depending on their key).<br>
Member types <tt>iterator</tt> and <tt>const_iterator</tt> are defined in <a href="/multimap">multimap</a> as <a href="/BidirectionalIterator">bidirectional iterator</a> types that point to elements.</dd>
<dt>first, last</dt>
<dd>Iterators specifying a range of elements. Copies of the elements in the range <tt>[first,last)</tt> are inserted in the container.<br>
Notice that the range includes all the elements between <i>first</i> and <i>last</i>, including the element pointed by <i>first</i> but not the one pointed by <i>last</i>.<br>
The function template argument <tt>InputIterator</tt> shall be an <a href="/InputIterator">input iterator</a> type that points to elements of a type from which <tt>value_type</tt> objects can be constructed.</dd>
<dt>il</dt>
<dd>An <a href="/initializer_list">initializer_list</a> object. Copies of these elements are inserted.<br>
These objects are automatically constructed from <i>initializer list</i> declarators.<br>
Member type <tt>value_type</tt> is the type of the elements contained in the container, defined in <a href="/multimap">multimap</a> as <tt><a href="/pair">pair</a>&lt;const key_type,mapped_type&gt;</tt> (see <a href="/multimap#types">multimap member types</a>).<br>
</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
In the versions returning a value, this is an iterator pointing to the newly inserted element in the <a href="/multiset">multiset</a>.<br>
<br>
Member type <tt>iterator</tt> is a <a href="/BidirectionalIterator">bidirectional iterator</a> type that points to elements.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br></code></pre></td>
<td class="source"><pre><code><cite>// multimap::insert (C++98)</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;map&gt;</dfn>

<var>int</var> main ()
{
  std::multimap&lt;<var>char</var>,<var>int</var>&gt; mymultimap;
  std::multimap&lt;<var>char</var>,<var>int</var>&gt;::iterator it;

  <cite>// first insert function version (single parameter):</cite>
  mymultimap.insert ( std::pair&lt;<var>char</var>,<var>int</var>&gt;(<kbd>'a'</kbd>,100) );
  mymultimap.insert ( std::pair&lt;<var>char</var>,<var>int</var>&gt;(<kbd>'z'</kbd>,150) );
  it=mymultimap.insert ( std::pair&lt;<var>char</var>,<var>int</var>&gt;(<kbd>'b'</kbd>,75) );

  <cite>// second insert function version (with hint position):</cite>
  mymultimap.insert (it, std::pair&lt;<var>char</var>,<var>int</var>&gt;(<kbd>'c'</kbd>,300));  <cite>// max efficiency inserting</cite>
  mymultimap.insert (it, std::pair&lt;<var>char</var>,<var>int</var>&gt;(<kbd>'z'</kbd>,400));  <cite>// no max efficiency inserting</cite>

  <cite>// third insert function version (range insertion):</cite>
  std::multimap&lt;<var>char</var>,<var>int</var>&gt; anothermultimap;
  anothermultimap.insert(mymultimap.begin(),mymultimap.find(<kbd>'c'</kbd>));

  <cite>// showing contents:</cite>
  std::cout &lt;&lt; <kbd>"mymultimap contains:\n"</kbd>;
  <var>for</var> (it=mymultimap.begin(); it!=mymultimap.end(); ++it)
    std::cout &lt;&lt; (*it).first &lt;&lt; <kbd>" =&gt; "</kbd> &lt;&lt; (*it).second &lt;&lt; <kbd>'\n'</kbd>;

  std::cout &lt;&lt; <kbd>"anothermultimap contains:\n"</kbd>;
  <var>for</var> (it=anothermultimap.begin(); it!=anothermultimap.end(); ++it)
    std::cout &lt;&lt; (*it).first &lt;&lt; <kbd>" =&gt; "</kbd> &lt;&lt; (*it).second &lt;&lt; <kbd>'\n'</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>mymultimap contains:
a =&gt; 100
b =&gt; 75
c =&gt; 300
z =&gt; 400
z =&gt; 150
anothermultimap contains:
a =&gt; 100
b =&gt; 75
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
If a single element is inserted, logarithmic in <a href="/map::size">size</a> in general, but amortized constant if a hint is given and the <i>position</i> given is the optimal.<br>
<br>
<div class="C_SwitchCases">
<div title="C++98">
If N elements are inserted, <tt>Nlog(<a href="/multimap::size">size</a>+N)</tt> in general, but linear in <tt><a href="/multimap::size">size</a>+N</tt> if the elements are already sorted according to the same ordering criterion used by the container.<br>
</div>
<div title="C++11">
If N elements are inserted, <tt>Nlog(<a href="/multimap::size">size</a>+N)</tt>.<br>
Implementations may optimize if the range is already sorted.<br>
</div>
</div>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
No changes.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The container is modified.<br>
Concurrently accessing existing elements is safe, although iterating ranges in the container is not.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
If a single element is to be inserted, there are no changes in the container in case of exception (strong guarantee).<br>
Otherwise, the container is guaranteed to end in a valid state (basic guarantee).<br>
If <a href="/allocator_traits::construct">allocator_traits::construct</a> is not supported with the appropriate arguments for the element constructions, or if an invalid <i>position</i> is specified, it causes <i>undefined behavior</i>.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/map/multimap/find/"><b>multimap::find</b></a></dt><dd>Get iterator to element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/map/multimap/erase/"><b>multimap::erase</b></a></dt><dd>Erase elements <span class="typ">(public member function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
