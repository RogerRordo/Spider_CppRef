<div id="I_content">
<div class="C_doc">
<div id="I_type">function</div>
<div id="I_file">&lt;cstdlib&gt;</div>
<h1>calloc</h1>
<div class="C_prototype"><pre>void* calloc (size_t num, size_t size);</pre></div><div id="I_description">Allocate and zero-initialize array</div>
<section id="description">
Allocates a block of memory for an array of <var>num</var> elements, each of them <var>size</var> bytes long, and initializes all its bits to zero.<br>
<br>
The effective result is the allocation of a zero-initialized memory block of <code>(num*size)</code> bytes.<br>
<br>
If <var>size</var> is zero, the return value depends on the particular library implementation (it may or may not be a <i>null pointer</i>), but the returned pointer shall not be dereferenced.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>num</dt>
<dd>Number of elements to allocate.</dd>
<dt>size</dt>
<dd>Size of each element.</dd>
</dl>
<br>
<samp><a href="/cstdlib:size_t">size_t</a></samp> is an unsigned integral type.<br>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
On success, a pointer to the memory block allocated by the function.<br>
The type of this pointer is always <code>void*</code>, which can be cast to the desired type of data pointer in order to be dereferenceable.<br>
If the function failed to allocate the requested block of memory, a <i>null pointer</i> is returned.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br></code></pre></td>
<td class="source"><pre><code><cite>/* calloc example */</cite>
<dfn>#include &lt;stdio.h&gt;      </dfn><cite>/* printf, scanf, NULL */</cite><dfn></dfn>
<dfn>#include &lt;stdlib.h&gt;     </dfn><cite>/* calloc, exit, free */</cite><dfn></dfn>

<var>int</var> main ()
{
  <var>int</var> i,n;
  <var>int</var> * pData;
  printf (<kbd>"Amount of numbers to be entered: "</kbd>);
  scanf (<kbd>"%d"</kbd>,&amp;i);
  pData = (<var>int</var>*) calloc (i,<var>sizeof</var>(<var>int</var>));
  <var>if</var> (pData==NULL) exit (1);
  <var>for</var> (n=0;n&lt;i;n++)
  {
    printf (<kbd>"Enter number #%d: "</kbd>,n+1);
    scanf (<kbd>"%d"</kbd>,&amp;pData[n]);
  }
  printf (<kbd>"You have entered: "</kbd>);
  <var>for</var> (n=0;n&lt;i;n++) printf (<kbd>"%d "</kbd>,pData[n]);
  free (pData);
  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
This program simply stores numbers and then prints them out. But the number of items it stores can be adapted each time the program is executed because it allocates the needed memory during runtime.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
Only the storage referenced by the returned pointer is modified. No other storage locations are accessed by the call.<br>
If the function reuses the same unit of storage released by a <i>deallocation function</i> (such as <samp><a href="/free">free</a></samp> or <samp><a href="/realloc">realloc</a></samp>), the functions are synchronized in such a way that the deallocation happens entirely before the next allocation.<br>
</section>
<br>
<section id="exceptions">
<h3>Exceptions (C++)</h3>
<b>No-throw guarantee:</b> this function never throws exceptions.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/cstdlib/free/"><b>free</b></a></dt><dd>Deallocate memory block <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cstdlib/malloc/"><b>malloc</b></a></dt><dd>Allocate memory block <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cstdlib/realloc/"><b>realloc</b></a></dt><dd>Reallocate memory block <span class="typ">(function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
