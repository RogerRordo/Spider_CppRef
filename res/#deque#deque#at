<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;deque&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/deque/deque/">deque</a>::at</h1>
<div class="C_prototype"><pre>      reference at (size_type n);const_reference at (size_type n) const;</pre></div><div id="I_description">Access element</div>
<section id="description">
Returns a reference to the element at position <i>n</i> in the <a href="/deque">deque</a> container object.<br>
<br>
The function automatically checks whether <i>n</i> is within the bounds of valid elements in the container, throwing an <a href="/out_of_range">out_of_range</a> exception if it is not (i.e., if <i>n</i> is greater or equal than its <tt><a href="/deque::size">size</a></tt>).  This is in contrast with member <a href="/deque::operator[]">operator[]</a>, that does not check against bounds.<br>
</section>
<br>
<section id="description">
Returns a reference to the element at position <i>n</i> in the <a href="/deque">deque</a> container object.<br>
<br>
The difference between this member function and member operator function <a href="/deque::operator[]">operator[]</a> is that <tt>deque::at</tt> signals if the requested position is out of range by throwing an <a href="/out_of_range">out_of_range</a> exception.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>n</dt>
<dd>Position of an element in the container.<br>
If this is greater than the deque <a href="/deque::size">size</a>, an exception of type <a href="/out_of_range">out_of_range</a> is thrown.<br>
Notice that the first element has a position of <tt>0</tt> (not <tt>1</tt>).<br>
Member type <tt>size_type</tt> is an unsigned integral type.</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
The element at the specified position in the container.<br>
<br>
If the <a href="/deque">deque</a> object is const-qualified, the function returns a <tt>const_reference</tt>. Otherwise, it returns a <tt>reference</tt>.<br>
<br>
Member types <tt>reference</tt> and <tt>const_reference</tt> are the reference types to the elements of the container (see <a href="/deque#types">deque member types</a>).<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br></code></pre></td>
<td class="source"><pre><code><cite>// deque::at</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;deque&gt;</dfn>

<var>int</var> main ()
{
  std::deque&lt;<var>unsigned</var>&gt; mydeque (10);   <cite>// 10 zero-initialized unsigneds</cite>

  <cite>// assign some values:</cite>
  <var>for</var> (<var>unsigned</var> i=0; i&lt;mydeque.size(); i++)
    mydeque.at(i)=i;

  std::cout &lt;&lt; <kbd>"mydeque contains:"</kbd>;
  <var>for</var> (<var>unsigned</var> i=0; i&lt;mydeque.size(); i++)
    std::cout &lt;&lt; <kbd>' '</kbd> &lt;&lt; mydeque.at(i);

  std::cout &lt;&lt; <kbd>'\n'</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>mydeque contains: 0 1 2 3 4 5 6 7 8 9
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Constant.<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
No changes.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The container is accessed (neither the const nor the non-const versions modify the container).<br>
Element <i>n</i> is potentially accessed or modified by the caller. Concurrently accessing or modifying other elements is safe.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
<b>Strong guarantee:</b> if an exception is thrown, there are no changes in the container.<br>
It throws <a href="/out_of_range">out_of_range</a> if <i>n</i> is out of bounds.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/deque/deque/operator[]/"><b>deque::operator[]</b></a></dt><dd>Access element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/deque/deque/front/"><b>deque::front</b></a></dt><dd>Access first element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/deque/deque/back/"><b>deque::back</b></a></dt><dd>Access last element <span class="typ">(public member function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
