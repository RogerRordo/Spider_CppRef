<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;istream&gt; &lt;iostream&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/istream/istream/">istream</a>::peek</h1>
<div class="C_prototype"><pre>int peek();</pre></div><div id="I_description">Peek next character</div>
<section id="description">
Returns the next character in the input sequence, without extracting it: The character is left as the next character to be extracted from the stream.<br>
<br>
If any <i><a href="/ios::rdstate">internal state flags</a></i> is already set before the call or is set during the call, the function returns the <i><a href="/char_traits::eof">end-of-file</a></i> value (<code><a href="/EOF">EOF</a></code>).<br>
<br>
Internally, the function accesses the input sequence by first constructing a <samp><a href="/istream::sentry">sentry</a></samp> object (with <var>noskipws</var> set to <code>true</code>). Then (if <samp><a href="/ios::good">good</a></samp>), it reads one character from its associated <i><a href="/streambuf">stream buffer</a></i> object by calling its member function <samp><a href="/streambuf::sgetc">sgetc</a></samp>, and finally destroys the <samp><a href="/istream::sentry">sentry</a></samp> object before returning.<br>
<br>
Calling this function sets the value returned by <samp><a href="/istream::gcount">gcount</a></samp> to zero.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
none<br>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
The next character in the input sequence, as a value of type <code>int</code>.<br>
<br>
If there are no more characters to read in the input sequence, or if any <i><a href="/ios::rdstate">internal state flags</a></i> is set, the function returns the <i><a href="/char_traits::eof">end-of-file</a></i> value (<code><a href="/EOF">EOF</a></code>), and leaves the proper <i><a href="/ios::rdstate">internal state flags</a></i> set:<br>
<br>
<table class="boxed">
<tr><th>flag</th><th>error</th></tr>
<tr><td><samp><a href="/ios_base::eofbit">eofbit</a></samp></td><td>No character could be peeked because the input sequence has no characters available (end-of-file reached).</td></tr>
<tr><td><samp><a href="/ios_base::failbit">failbit</a></samp></td><td>The construction of <samp><a href="/istream::sentry">sentry</a></samp> failed (such as when the <i><a href="/ios::rdstate">stream state</a></i> was not <samp><a href="/ios::good">good</a></samp> before the call).</td></tr>
<tr><td><samp><a href="/ios_base::badbit">badbit</a></samp></td><td>Error on stream (such as when this function catches an exception thrown by an internal operation).<br>
When set, the integrity of the stream may have been affected.</td></tr>
</table>
Multiple flags may be set by a single operation.<br>
<br>
If the operation sets an <i><a href="/ios::rdstate">internal state flag</a></i> that was registered with member <samp><a href="/ios::exceptions">exceptions</a></samp>, the function throws an exception of member type <samp><a href="/ios_base::failure">failure</a></samp>.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br></code></pre></td>
<td class="source"><pre><code><cite>// istream::peek example</cite>
<dfn>#include &lt;iostream&gt;     </dfn><cite>// std::cin, std::cout</cite>
<dfn>#include &lt;string&gt;       </dfn><cite>// std::string</cite>
<dfn>#include &lt;cctype&gt;       </dfn><cite>// std::isdigit</cite>

<var>int</var> main () {

  std::cout &lt;&lt; <kbd>"Please, enter a number or a word: "</kbd>;
  std::cout.flush();    <cite>// ensure output is written</cite>

  std::cin &gt;&gt; std::ws;  <cite>// eat up any leading white spaces</cite>
  <var>int</var> c = std::cin.peek();  <cite>// peek character</cite>

  <var>if</var> ( c == EOF ) <var>return</var> 1;
  <var>if</var> ( std::isdigit(c) )
  {
    <var>int</var> n;
    std::cin &gt;&gt; n;
    std::cout &lt;&lt; <kbd>"You entered the number: "</kbd> &lt;&lt; n &lt;&lt; <kbd>'\n'</kbd>;
  }
  <var>else</var>
  {
    std::string str;
    std::cin &gt;&gt; str;
    std::cout &lt;&lt; <kbd>"You entered the word: "</kbd> &lt;&lt; str &lt;&lt; <kbd>'\n'</kbd>;
  }

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Possible output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>Please, enter a number or a word: foobar
You entered the word: foobar
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="access">
<h3>Data races</h3>
Modifies the stream object.<br>
Concurrent access to the same stream object may cause data races, except for the standard stream object <samp><a href="/cin">cin</a></samp> when this is <i><a href="/ios_base::sync_with_stdio">synchronized with stdio</a></i> (in this case, no data races are initiated, although no guarantees are given on the order in which read characters are attributed to threads).<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
<b>Basic guarantee:</b> if an exception is thrown, the object is in a valid state.<br>
It throws an exception of member type <samp><a href="/ios_base::failure">failure</a></samp> if the resulting <i>error state flag</i> is not <samp><a href="/ios_base::goodbit">goodbit</a></samp> and member <samp><a href="/ios::exceptions">exceptions</a></samp> was set to throw for that state.<br>
Any exception thrown by an internal operation is caught and handled by the function, setting <samp><a href="/ios_base::badbit">badbit</a></samp>. If <samp><a href="/ios_base::badbit">badbit</a></samp> was set on the last call to <samp><a href="/ios::exceptions">exceptions</a></samp>, the function rethrows the caught exception.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/istream/istream/get/"><b>istream::get</b></a></dt><dd>Get characters <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/istream/istream/operator>>/"><b>istream::operator&gt;&gt;</b></a></dt><dd>Extract formatted input <span class="typ">(public member function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
