<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;unordered_map&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/unordered_map/unordered_map/">unordered_map</a>::operator[]<span class="C_ico cpp11warning" title="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it." alt="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it."></span></h1>
<div class="C_prototype"><pre>mapped_type&amp; operator[] ( const key_type&amp; k );mapped_type&amp; operator[] ( key_type&amp;&amp; k );</pre></div><div id="I_description">Access element</div>
<section id="description">
If <i>k</i> matches the key of an element in the container, the function returns a reference to its mapped value.<br>
<br>
If <i>k</i> does not match the key of any element in the container, the function inserts a new element with that key and returns a reference to its mapped value. Notice that this always increases the <a href="/unordered_map::size">container size</a> by one, even if no mapped value is assigned to the element (the element is constructed using its default constructor).<br>
<br>
A similar member function, <a href="/unordered_map::at">unordered_map::at</a>, has the same behavior when an element with the key exists, but throws an exception when it does not.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>k</dt>
<dd>Key value of the element whose mapped value is accessed.<br>
Member type <tt>key_type</tt> is the type of the keys for the elements stored in the container, defined in <a href="/unordered_map">unordered_map</a> as an alias of its first template parameter (<tt>Key</tt>).<br>
If an rvalue (second version), the key is moved instead of copied when a new element is inserted.<br>
</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
A reference to the mapped value of the element with a key value equivalent to <i>k</i>.<br>
Member type <tt>mapped_type</tt> is the type of the mapped values in the container, defined in <a href="/unordered_map">unordered_map</a> as an alias of its second template parameter (<tt>T</tt>).<br>
<br>
If a new element is inserted, its storage is allocated using <tt>allocator_traits&lt;allocator_type&gt;::construct()</tt>, which may throw exceptions on failure (for the default <a href="/allocator">allocator</a>, <tt>bad_alloc</tt> is thrown if the allocation request does not succeed).<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br></code></pre></td>
<td class="source"><pre><code><cite>// unordered_map::operator[]</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>
<dfn>#include &lt;unordered_map&gt;</dfn>

<var>int</var> main ()
{
  std::unordered_map&lt;std::string,std::string&gt; mymap;

  mymap[<kbd>"Bakery"</kbd>]=<kbd>"Barbara"</kbd>;  <cite>// new element inserted</cite>
  mymap[<kbd>"Seafood"</kbd>]=<kbd>"Lisa"</kbd>;    <cite>// new element inserted</cite>
  mymap[<kbd>"Produce"</kbd>]=<kbd>"John"</kbd>;    <cite>// new element inserted</cite>

  std::string name = mymap[<kbd>"Bakery"</kbd>];   <cite>// existing element accessed (read)</cite>
  mymap[<kbd>"Seafood"</kbd>] = name;              <cite>// existing element accessed (written)</cite>

  mymap[<kbd>"Bakery"</kbd>] = mymap[<kbd>"Produce"</kbd>];   <cite>// existing elements accessed (read/written)</cite>

  name = mymap[<kbd>"Deli"</kbd>];      <cite>// non-existing element: new element "Deli" inserted!</cite>

  mymap[<kbd>"Produce"</kbd>] = mymap[<kbd>"Gifts"</kbd>];    <cite>// new element "Gifts" inserted, "Produce" written</cite>

  <var>for</var> (<var>auto</var>&amp; x: mymap) {
    std::cout &lt;&lt; x.first &lt;&lt; <kbd>": "</kbd> &lt;&lt; x.second &lt;&lt; std::endl;
  }

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Possible output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>Seafood: Barbara
Deli:
Bakery: John
Gifts:
Produce:
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Average case: constant.<br>
Worst case: linear in <a href="/unordered_map::size">container size</a>.<br>
<br>
May trigger a <a href="/unordered_map::rehash">rehash</a> if an element is inserted (not included in the complexity above).<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
On most cases, all iterators in the container remain valid after the insertion. The only exception being when this function inserts a new element and this forces a rehash. In this case, all iterators in the container are invalidated.<br>
<br>
A rehash is forced if the new container <a href="/unordered_map::size">size</a> after the insertion operation would increase above its capacity threshold (calculated as the container's <a href="/unordered_map::bucket_count">bucket_count</a> multiplied by its <a href="/unordered_map::max_load_factor">max_load_factor</a>).<br>
<br>
References to elements in the <a href="/unordered_map">unordered_map</a> container remain valid in all cases, even after a rehash.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/unordered_map/unordered_map/at/"><b>unordered_map::at</b></a></dt><dd>Access element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_map/unordered_map/find/"><b>unordered_map::find</b></a></dt><dd>Get iterator to element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_map/unordered_map/emplace/"><b>unordered_map::emplace</b></a></dt><dd>Construct and insert element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_map/unordered_map/insert/"><b>unordered_map::insert</b></a></dt><dd>Insert elements <span class="typ">(public member function)</span></dd></dl>
</section>
<div id="CH_bb"></div></div></div>
