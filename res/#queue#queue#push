<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;queue&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/queue/queue/">queue</a>::push</h1>
<div class="C_prototype"><div class="C_SwitchCases">
<div title="C++98">
<pre>void push (const value_type&amp; val);</pre></div>
<div title="C++11" class="on">
<pre>void push (const value_type&amp; val);void push (value_type&amp;&amp; val);</pre></div>
</div>
</div><div id="I_description">Insert element</div>
<section id="description">
Inserts a new element at the end of the <samp><a href="/queue">queue</a></samp>, after its current last element. The content of this new element is initialized to <var>val</var>.<br>
<br>
This member function effectively calls the member function <samp><a href="/deque::push_back">push_back</a></samp> of the <i>underlying container</i> object.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>val</dt>
<dd>Value to which the inserted element is initialized.<br>
Member type <samp>value_type</samp> is the type of the elements in the container (defined as an alias of the first class template parameter, <samp>T</samp>).<br>
</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
none<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br></code></pre></td>
<td class="source"><pre><code><cite>// queue::push/pop</cite>
<dfn>#include &lt;iostream&gt;       </dfn><cite>// std::cin, std::cout</cite>
<dfn>#include &lt;queue&gt;          </dfn><cite>// std::queue</cite>

<var>int</var> main ()
{
  std::queue&lt;<var>int</var>&gt; myqueue;
  <var>int</var> myint;

  std::cout &lt;&lt; <kbd>"Please enter some integers (enter 0 to end):\n"</kbd>;

  <var>do</var> {
    std::cin &gt;&gt; myint;
    myqueue.push (myint);
  } <var>while</var> (myint);

  std::cout &lt;&lt; <kbd>"myqueue contains: "</kbd>;
  <var>while</var> (!myqueue.empty())
  {
    std::cout &lt;&lt; <kbd>' '</kbd> &lt;&lt; myqueue.front();
    myqueue.pop();
  }
  std::cout &lt;&lt; <kbd>'\n'</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
The example uses <samp>push</samp> to add a new elements to the queue, which are then popped out in the same order.<br>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
One call to <samp><a href="/deque::push_back">push_back</a></samp> on the <i>underlying container</i>.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The container and up to all its contained elements are modified.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
Provides the same level of guarantees as the operation performed on the <i>underlying container</i> object.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/queue/queue/pop/"><b>queue::pop</b></a></dt><dd>Remove next element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/queue/queue/size/"><b>queue::size</b></a></dt><dd>Return size <span class="typ">(public member function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
