<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;istream&gt; &lt;iostream&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/istream/istream/">istream</a>::tellg</h1>
<div class="C_prototype"><pre>streampos tellg();</pre></div><div id="I_description">Get position in input sequence</div>
<section id="description">
Returns the position of the current character in the input stream.<br>
<br>
Internally, the function accesses the input sequence by first constructing a <samp><a href="/istream::sentry">sentry</a></samp> object (with <var>noskipws</var> set to <code>true</code>) without evaluating it. Then, if member <samp><a href="/ios::fail">fail</a></samp> returns <code>true</code>, the function returns <code>-1</code>.<br>
Otherwise, returns <code><a href="/ios::rdbuf">rdbuf</a>()-&gt;<a href="/streambuf::pubseekoff">pubseekoff</a>(0,cur,in)</code>. Finally, it destroys the <samp><a href="/istream::sentry">sentry</a></samp> object before returning.<br>
<br>
Notice that the function will work even if the <samp><a href="/ios_base::eofbit">eofbit</a></samp> flag is set before the call.<br>
<br>
Calling this function does not alter the value returned by <samp><a href="/istream::gcount">gcount</a></samp>.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
none<br>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
The current position in the stream.<br>
If either the <i><a href="/streambuf">stream buffer</a></i> associated to the stream does not support the operation, or if it fails, the function returns <code>-1</code>.<br>
<samp><a href="/streampos">streampos</a></samp> is an <samp><a href="/fpos">fpos</a></samp> type (it can be converted to/from integral types).<br>
<br>
Errors are signaled by modifying the <i><a href="/ios::rdstate">internal state flags</a></i>:<br>
<table class="boxed">
<tr><th>flag</th><th>error</th></tr>
<tr><td><samp><a href="/ios_base::eofbit">eofbit</a></samp></td><td>-</td></tr>
<tr><td><samp><a href="/ios_base::failbit">failbit</a></samp></td><td>The construction of <samp><a href="/istream::sentry">sentry</a></samp> failed (such as when the <i><a href="/ios::rdstate">stream state</a></i> was not <samp><a href="/ios::good">good</a></samp> before the call).</td></tr>
<tr><td><samp><a href="/ios_base::badbit">badbit</a></samp></td><td>Error on stream (such as when this function catches an exception thrown by an internal operation).<br>
When set, the integrity of the stream may have been affected.</td></tr>
</table>
Multiple flags may be set by a single operation.<br>
<br>
If the operation sets an <i><a href="/ios::rdstate">internal state flag</a></i> that was registered with member <samp><a href="/ios::exceptions">exceptions</a></samp>, the function throws an exception of member type <samp><a href="/ios_base::failure">failure</a></samp>.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br></code></pre></td>
<td class="source"><pre><code><cite>// read a file into memory</cite>
<dfn>#include &lt;iostream&gt;     </dfn><cite>// std::cout</cite>
<dfn>#include &lt;fstream&gt;      </dfn><cite>// std::ifstream</cite>

<var>int</var> main () {
  std::ifstream is (<kbd>"test.txt"</kbd>, std::ifstream::binary);
  <var>if</var> (is) {
    <cite>// get length of file:</cite>
    is.seekg (0, is.end);
    <var>int</var> length = is.tellg();
    is.seekg (0, is.beg);

    <cite>// allocate memory:</cite>
    <var>char</var> * buffer = <var>new</var> <var>char</var> [length];

    <cite>// read data as a block:</cite>
    is.read (buffer,length);

    is.close();

    <cite>// print content:</cite>
    std::cout.write (buffer,length);

    <var>delete</var>[] buffer;
  }

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
In this example, <samp>tellg</samp> is used to get the position in the stream after it has been moved with <samp>seekg</samp> to the end of the stream, therefore determining the size of the file.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
Modifies the stream object.<br>
Concurrent access to the same stream object may cause data races.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
<b>Basic guarantee:</b> if an exception is thrown, the object is in a valid state.<br>
It throws an exception of member type <samp><a href="/ios_base::failure">failure</a></samp> if the resulting <i>error state flag</i> is not <samp><a href="/ios_base::goodbit">goodbit</a></samp> and member <samp><a href="/ios::exceptions">exceptions</a></samp> was set to throw for that state.<br>
Any exception thrown by an internal operation is caught and handled by the function, setting <samp><a href="/ios_base::badbit">badbit</a></samp>. If <samp><a href="/ios_base::badbit">badbit</a></samp> was set on the last call to <samp><a href="/ios::exceptions">exceptions</a></samp>, the function rethrows the caught exception.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/istream/istream/seekg/"><b>istream::seekg</b></a></dt><dd>Set position in input sequence <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/ostream/ostream/tellp/"><b>ostream::tellp</b></a></dt><dd>Get position in output sequence <span class="typ">(public member function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
