<div id="I_content">
<div class="C_doc">
<div id="I_type">class template</div>
<div id="I_file">&lt;map&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span>map</h1>
<div class="C_prototype"><pre>template &lt; class Key,                                     // map::key_type           class T,                                       // map::mapped_type           class Compare = less&lt;Key&gt;,                     // map::key_compare           class Alloc = allocator&lt;pair&lt;const Key,T&gt; &gt;    // map::allocator_type           &gt; class map;</pre></div><div id="I_description">Map</div>
<section id="description">
Maps are associative containers that store elements formed by a combination of a <i>key value</i> and a <i>mapped value</i>, following a specific order.<br>
<br>
In a <tt>map</tt>, the <i>key values</i> are generally used to sort and uniquely identify the elements, while the <i>mapped values</i> store the content associated to this <i>key</i>. The types of <i>key</i> and <i>mapped value</i> may differ, and are grouped together in member type <tt>value_type</tt>, which is a <a href="/pair">pair</a> type combining both:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>&nbsp;</code></pre></td>
<td class="source"><pre><code><var>typedef</var> pair&lt;<var>const</var> Key, T&gt; value_type;</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Internally, the elements in a <tt>map</tt> are always sorted by its <i>key</i> following a specific <i>strict weak ordering</i> criterion indicated by its internal <a href="/map::key_comp">comparison object</a> (of type <tt>Compare</tt>).<br>
<br>
<tt>map</tt> containers are generally slower than <a href="/unordered_map">unordered_map</a> containers to access individual elements by their <i>key</i>, but they allow the direct iteration on subsets based on their order.<br>
<br>
The mapped values in a <a href="/map">map</a> can be accessed directly by their corresponding key using the <i>bracket operator</i> ((<a href="/map::operator[]">operator[]</a>).<br>
<br>
Maps are typically implemented as <i>binary search trees</i>.<br>
</section>
<br>
<section id="properties">
<h3>Container properties</h3>
<dl>
<dt>Associative</dt>
<dd>Elements in associative containers are referenced by their <i>key</i> and not by their absolute position in the container.</dd>
<dt>Ordered</dt>
<dd>The elements in the container follow a strict order at all times. All inserted elements are given a position in this order.</dd>
<dt>Map</dt>
<dd>Each element associates a <i>key</i> to a <i>mapped value</i>: Keys are meant to identify the elements whose main content is the <i>mapped value</i>.</dd>
<dt>Unique keys</dt>
<dd>No two elements in the container can have equivalent <i>keys</i>.</dd>
<dt>Allocator-aware</dt>
<dd>The container uses an allocator object to dynamically handle its storage needs.</dd>
</dl>
</section>
<br>
<section id="parameters">
<h3>Template parameters</h3>
<dl>
<dt>Key</dt>
<dd>Type of the <i>keys</i>. Each element in a <tt>map</tt> is uniquely identified by its key value.<br>
Aliased as member type <tt>map::key_type</tt>.</dd>
<dt>T</dt>
<dd>Type of the mapped value. Each element in a <tt>map</tt> stores some data as its mapped value.<br>
Aliased as member type <tt>map::mapped_type</tt>.</dd>
<dt>Compare</dt>
<dd>A binary predicate that takes two element keys as arguments and returns a <tt>bool</tt>. The expression <tt>comp(a,b)</tt>, where <i>comp</i> is an object of this type and <i>a</i> and <i>b</i> are key values, shall return <tt>true</tt> if <i>a</i> is considered to go before <i>b</i> in the <i>strict weak ordering</i> the function defines.<br>
The <tt>map</tt> object uses this expression to determine both the order the elements follow in the container and whether two element keys are equivalent (by comparing them reflexively: they are equivalent if <tt>!comp(a,b) && !comp(b,a)</tt>). No two elements in a <tt>map</tt> container can have equivalent keys.<br>
This can be a function pointer or a function object (see <a href="/map::map">constructor</a> for an example). This defaults to <tt><a href="/less">less</a>&lt;T&gt;</tt>, which returns the same as applying the <i>less-than operator</i> (<tt>a&lt;b</tt>).<br>
Aliased as member type <tt>map::key_compare</tt>.</dd>
<dt>Alloc</dt>
<dd>Type of the allocator object used to define the storage allocation model. By default, the <a href="/allocator">allocator</a> class template is used, which defines the simplest memory allocation model and is value-independent.<br>
Aliased as member type <tt>map::allocator_type</tt>.</dd>
</dl>
</section>
<br>
<section id="types">
<h3>Member types</h3>
<div class="C_SwitchCases">
<div title="C++98">
<table class="boxed">
<tr><th>member type</th><th>definition</th><th>notes</th></tr>
<tr><td><tt>key_type</tt></td><td>The first template parameter (<tt>Key</tt>)</td><td></td></tr>
<tr><td><tt>mapped_type</tt></td><td>The second template parameter (<tt>T</tt>)</td><td></td></tr>
<tr><td><tt>value_type</tt></td><td><tt><a href="/pair">pair</a>&lt;const key_type,mapped_type&gt;</tt></td><td></td></tr>
<tr><td><tt>key_compare</tt></td><td>The third template parameter (<tt>Compare</tt>)</td><td>defaults to: <tt><a href="/less">less</a>&lt;key_type&gt;</tt></td></tr>
<tr><td><tt>value_compare</tt></td><td><i>Nested function class to compare elements</i></td><td>see <a href="/map::value_comp">value_comp</a></td></tr>
<tr><td><tt>allocator_type</tt></td><td>The fourth template parameter (<tt>Alloc</tt>)</td><td>defaults to: <tt><a href="/allocator">allocator</a>&lt;value_type&gt;</tt></td></tr>
<tr><td><tt>reference</tt></td><td><tt>allocator_type::reference</tt></td><td>for the default <a href="/allocator">allocator</a>: <tt>value_type&</tt></td></tr>
<tr><td><tt>const_reference</tt></td><td><tt>allocator_type::const_reference</tt></td><td>for the default <a href="/allocator">allocator</a>: <tt>const value_type&</tt></td></tr>
<tr><td><tt>pointer</tt></td><td><tt>allocator_type::pointer</tt></td><td>for the default <a href="/allocator">allocator</a>: <tt>value_type*</tt></td></tr>
<tr><td><tt>const_pointer</tt></td><td><tt>allocator_type::const_pointer</tt></td><td>for the default <a href="/allocator">allocator</a>: <tt>const value_type*</tt></td></tr>
<tr><td><tt>iterator</tt></td><td>a <a href="/BidirectionalIterator">bidirectional iterator</a> to <tt>value_type</tt></td><td>convertible to <tt>const_iterator</tt></td></tr>
<tr><td><tt>const_iterator</tt></td><td>a <a href="/BidirectionalIterator">bidirectional iterator</a> to <tt>const value_type</tt></td><td></td></tr>
<tr><td><tt>reverse_iterator</tt></td><td><tt><a href="/reverse_iterator">reverse_iterator</a>&lt;iterator&gt;</tt></td><td></td></tr>
<tr><td><tt>const_reverse_iterator</tt></td><td><tt><a href="/reverse_iterator">reverse_iterator</a>&lt;const_iterator&gt;</tt></td><td></td></tr>
<tr><td><tt>difference_type</tt></td><td>a signed integral type, identical to: <tt>iterator_traits&lt;iterator&gt;::difference_type</tt></td><td>usually the same as <a href="/ptrdiff_t">ptrdiff_t</a></td></tr>
<tr><td><tt>size_type</tt></td><td>an unsigned integral type that can represent any non-negative value of <tt>difference_type</tt></td><td>usually the same as <a href="/size_t">size_t</a></td></tr>
</table>
</div>
<div title="C++11">
<table class="boxed">
<tr><th>member type</th><th>definition</th><th>notes</th></tr>
<tr><td><tt>key_type</tt></td><td>The first template parameter (<tt>Key</tt>)</td><td></td></tr>
<tr><td><tt>mapped_type</tt></td><td>The second template parameter (<tt>T</tt>)</td><td></td></tr>
<tr><td><tt>value_type</tt></td><td><tt><a href="/pair">pair</a>&lt;const key_type,mapped_type&gt;</tt></td><td></td></tr>
<tr><td><tt>key_compare</tt></td><td>The third template parameter (<tt>Compare</tt>)</td><td>defaults to: <tt><a href="/less">less</a>&lt;key_type&gt;</tt></td></tr>
<tr><td><tt>value_compare</tt></td><td><i>Nested function class to compare elements</i></td><td>see <a href="/map::value_comp">value_comp</a></td></tr>
<tr><td><tt>allocator_type</tt></td><td>The fourth template parameter (<tt>Alloc</tt>)</td><td>defaults to: <tt><a href="/allocator">allocator</a>&lt;value_type&gt;</tt></td></tr>
<tr><td><tt>reference</tt></td><td><tt>value_type&</tt></td><td></td></tr>
<tr><td><tt>const_reference</tt></td><td><tt>const value_type&</tt></td><td></td></tr>
<tr><td><tt>pointer</tt></td><td><tt><a href="/allocator_traits">allocator_traits</a>&lt;allocator_type&gt;::pointer</tt></td><td>for the default <a href="/allocator">allocator</a>: <tt>value_type*</tt></td></tr>
<tr><td><tt>const_pointer</tt></td><td><tt><a href="/allocator_traits">allocator_traits</a>&lt;allocator_type&gt;::const_pointer</tt></td><td>for the default <a href="/allocator">allocator</a>: <tt>const value_type*</tt></td></tr>
<tr><td><tt>iterator</tt></td><td>a <a href="/BidirectionalIterator">bidirectional iterator</a> to <tt>value_type</tt></td><td>convertible to <tt>const_iterator</tt></td></tr>
<tr><td><tt>const_iterator</tt></td><td>a <a href="/BidirectionalIterator">bidirectional iterator</a> to <tt>const value_type</tt></td><td></td></tr>
<tr><td><tt>reverse_iterator</tt></td><td><tt><a href="/reverse_iterator">reverse_iterator</a>&lt;iterator&gt;</tt></td><td></td></tr>
<tr><td><tt>const_reverse_iterator</tt></td><td><tt><a href="/reverse_iterator">reverse_iterator</a>&lt;const_iterator&gt;</tt></td><td></td></tr>
<tr><td><tt>difference_type</tt></td><td>a signed integral type, identical to:<br>
<tt>iterator_traits&lt;iterator&gt;::difference_type</tt></td><td>usually the same as <a href="/ptrdiff_t">ptrdiff_t</a></td></tr>
<tr><td><tt>size_type</tt></td><td>an unsigned integral type that can represent any non-negative value of <tt>difference_type</tt></td><td>usually the same as <a href="/size_t">size_t</a></td></tr>
</table>
</div>
</div>
</section>
<br>
<section id="functions">
<h3>Member functions</h3>
<dl class="links"><dt><a href= "/reference/map/map/map/"><b>(constructor)</b></a></dt><dd>Construct map <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/map/map/~map/"><b>(destructor)</b></a></dt><dd>Map destructor <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/map/map/operator=/"><b>operator=</b></a></dt><dd>Copy container content <span class="typ">(public member function)</span></dd></dl>
<br>
<b>Iterators</b>:<br>
<dl class="links"><dt><a href= "/reference/map/map/begin/"><b>begin</b></a></dt><dd>Return iterator to beginning <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/map/map/end/"><b>end</b></a></dt><dd>Return iterator to end <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/map/map/rbegin/"><b>rbegin</b></a></dt><dd>Return reverse iterator to reverse beginning <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/map/map/rend/"><b>rend</b></a></dt><dd>Return reverse iterator to reverse end <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/map/map/cbegin/"><b>cbegin <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Return const_iterator to beginning <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/map/map/cend/"><b>cend <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Return const_iterator to end <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/map/map/crbegin/"><b>crbegin <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Return const_reverse_iterator to reverse beginning <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/map/map/crend/"><b>crend <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Return const_reverse_iterator to reverse end <span class="typ">(public member function)</span></dd></dl>
<br>
<b>Capacity</b>:<br>
<dl class="links"><dt><a href= "/reference/map/map/empty/"><b>empty</b></a></dt><dd>Test whether container is empty <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/map/map/size/"><b>size</b></a></dt><dd>Return container size <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/map/map/max_size/"><b>max_size</b></a></dt><dd>Return maximum size <span class="typ">(public member function)</span></dd></dl>
<br>
<b>Element access</b>:<br>
<dl class="links"><dt><a href= "/reference/map/map/operator[]/"><b>operator[]</b></a></dt><dd>Access element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/map/map/at/"><b>at <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Access element <span class="typ">(public member function)</span></dd></dl>
<br>
<b>Modifiers</b>:<br>
<dl class="links"><dt><a href= "/reference/map/map/insert/"><b>insert</b></a></dt><dd>Insert elements <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/map/map/erase/"><b>erase</b></a></dt><dd>Erase elements <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/map/map/swap/"><b>swap</b></a></dt><dd>Swap content <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/map/map/clear/"><b>clear</b></a></dt><dd>Clear content <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/map/map/emplace/"><b>emplace <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Construct and insert element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/map/map/emplace_hint/"><b>emplace_hint <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Construct and insert element with hint <span class="typ">(public member function)</span></dd></dl>
<br>
<b>Observers</b>:<br>
<dl class="links"><dt><a href= "/reference/map/map/key_comp/"><b>key_comp</b></a></dt><dd>Return key comparison object <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/map/map/value_comp/"><b>value_comp</b></a></dt><dd>Return value comparison object <span class="typ">(public member function)</span></dd></dl>
<br>
<b>Operations</b>:<br>
<dl class="links"><dt><a href= "/reference/map/map/find/"><b>find</b></a></dt><dd>Get iterator to element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/map/map/count/"><b>count</b></a></dt><dd>Count elements with a specific key <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/map/map/lower_bound/"><b>lower_bound</b></a></dt><dd>Return iterator to lower bound <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/map/map/upper_bound/"><b>upper_bound</b></a></dt><dd>Return iterator to upper bound <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/map/map/equal_range/"><b>equal_range</b></a></dt><dd>Get range of equal elements <span class="typ">(public member function)</span></dd></dl>
<br>
<b>Allocator</b>:<br>
<dl class="links"><dt><a href= "/reference/map/map/get_allocator/"><b>get_allocator</b></a></dt><dd>Get allocator <span class="typ">(public member function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
