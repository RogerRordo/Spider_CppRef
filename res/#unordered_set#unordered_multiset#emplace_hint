<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;unordered_set&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/unordered_set/unordered_multiset/">unordered_multiset</a>::emplace_hint<span class="C_ico cpp11warning" title="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it." alt="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it."></span></h1>
<div class="C_prototype"><pre>template &lt;class... Args&gt;iterator emplace_hint ( const_iterator position, Args&amp;&amp;... args );</pre></div><div id="I_description">Construct and insert element with hint</div>
<section id="description">
Inserts a new element in the <a href="/unordered_multiset">unordered_multiset</a>. This new element is constructed in place using <i>args</i> as the arguments for the element's constructor. <tt>position</tt> points to a location in the container suggested as a hint on where to start the search for its insertion point (the container may or may not use this suggestion to optimize the insertion operation).<br>
<br>
This effectively increases the container <a href="/unordered_multiset::size">size</a> by one.<br>
<br>
A similar member function exists, <a href="/unordered_multiset::insert">insert</a>, which either copies or moves existing objects into the container, and may also take a position hint.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>position</dt>
<dd>Position suggested as a hint for the insertion operation. This value may be used by the container to optimize the operation.<br>
Member type <tt>const_iterator</tt> is a <a href="/ForwardIterator">forward iterator</a> type.</dd>
<dt>args</dt>
<dd>Arguments passed to the constructor of the a new element to be inserted.</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
An iterator to the newly inserted element.<br>
<br>
Member type <tt>iterator</tt> is a <a href="/ForwardIterator">forward iterator</a> type.<br>
<br>
All iterators in an <a href="/unordered_multiset">unordered_multiset</a> have const access to the elements: Elements can be inserted or removed, but not modified while in the container.<br>
<br>
The storage for the new element is allocated using <tt>allocator_traits&lt;allocator_type&gt;::construct()</tt>, which may throw exceptions on failure (for the default <a href="/allocator">allocator</a>, <tt>bad_alloc</tt> is thrown if the allocation request does not succeed).<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
No example yet. See <a href="/unordered_multiset::emplace">unordered_multiset::emplace</a>'s example.<br>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Average case: constant.<br>
Worst case: linear in container size.<br>
May trigger a <a href="/unordered_multiset::rehash">rehash</a> (not included).<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
On most cases, all iterators in the container remain valid after the insertion. The only exception being when the growth of the container forces a rehash. In this case, all iterators in the container are invalidated.<br>
<br>
A rehash is forced if the new container <a href="/unordered_multiset::size">size</a> after the insertion operation would increase above its capacity threshold (calculated as the container's <a href="/unordered_multiset::bucket_count">bucket_count</a> multiplied by its <a href="/unordered_multiset::max_load_factor">max_load_factor</a>).<br>
<br>
References remain valid in all cases, even after a rehash.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/unordered_set/unordered_multiset/emplace/"><b>unordered_multiset::emplace</b></a></dt><dd>Construct and insert element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_set/unordered_multiset/insert/"><b>unordered_multiset::insert</b></a></dt><dd>Insert elements <span class="typ">(public member function)</span></dd></dl>
</section>
<div id="CH_bb"></div></div></div>
