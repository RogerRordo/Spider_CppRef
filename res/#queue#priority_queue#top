<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;queue&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/queue/priority_queue/">priority_queue</a>::top</h1>
<div class="C_prototype"><div class="C_SwitchCases">
<div title="C++98">
<pre>const value_type&amp; top() const;</pre></div>
<div title="C++11" class="on">
<pre>const_reference top() const;</pre></div>
</div>
</div><div id="I_description">Access top element</div>
<section id="description">
Returns a constant reference to the <i>top element</i> in the <samp><a href="/priority_queue">priority_queue</a></samp>.<br>
<br>
The <dfn>top element</dfn> is the element that compares higher in the <samp><a href="/priority_queue">priority_queue</a></samp>, and the next that is removed from the container when <samp><a href="/priority_queue::pop">priority_queue::pop</a></samp> is called.<br>
<br>
This member function effectively calls member <samp><a href="/vector::front">front</a></samp> of the underlying container object.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
none<br>
</section>
<br>
<section id="return">
<h3>Return value</h3>
A reference to the top element in the <samp><a href="/priority_queue">priority_queue</a></samp>.<br>
<br>
<div class="C_SwitchCases">
<div title="C++98">
Member type <samp>value_type</samp> is the type of the elements in the container (defined as an alias of the first class template parameter, <samp>T</samp>).<br>
</div>
<div title="C++11">
Member type <samp>const_reference</samp> is an alias of the <i>underlying container</i>'s type with the same name.<br>
</div>
</div>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br></code></pre></td>
<td class="source"><pre><code><cite>// priority_queue::top</cite>
<dfn>#include &lt;iostream&gt;       </dfn><cite>// std::cout</cite>
<dfn>#include &lt;queue&gt;          </dfn><cite>// std::priority_queue</cite>

<var>int</var> main ()
{
  std::priority_queue&lt;<var>int</var>&gt; mypq;

  mypq.push(10);
  mypq.push(20);
  mypq.push(15);

  std::cout &lt;&lt; <kbd>"mypq.top() is now "</kbd> &lt;&lt; mypq.top() &lt;&lt; <kbd>'\n'</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>mypq.top() is now 20
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Constant (calling <samp><a href="/vector::front">front</a></samp> on the <i>underlying container</i>).<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The container is accessed.<br>
The constant reference returned can be used to directly access the next element.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
Provides the same level of guarantees as the operation performed on the container (no-throw guarantee for standard non-empty containers).<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/queue/priority_queue/pop/"><b>priority_queue::pop</b></a></dt><dd>Remove top element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/queue/priority_queue/push/"><b>priority_queue::push</b></a></dt><dd>Insert element <span class="typ">(public member function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
