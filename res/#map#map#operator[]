<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;map&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/map/map/">map</a>::operator[]</h1>
<div class="C_prototype"><div class="C_SwitchCases">
<div title="C++98">
<pre>mapped_type&amp; operator[] (const key_type&amp; k);</pre></div>
<div title="C++11" class="on">
<pre>mapped_type&amp; operator[] (const key_type&amp; k);mapped_type&amp; operator[] (key_type&amp;&amp; k);</pre></div>
</div>
</div><div id="I_description">Access element</div>
<section id="description">
If <i>k</i> matches the key of an element in the container, the function returns a reference to its mapped value.<br>
<br>
If <i>k</i> does not match the key of any element in the container, the function inserts a new element with that key and returns a reference to its mapped value. Notice that this always increases the <a href="/map::size">container size</a> by one, even if no mapped value is assigned to the element (the element is constructed using its default constructor).<br>
<br>
A similar member function, <a href="/map::at">map::at</a>, has the same behavior when an element with the key exists, but throws an exception when it does not.<br>
<br>
A call to this function is equivalent to:<br>
<span class="auto"><code class="source">(*((<var>this</var>-&gt;insert(make_pair(k,mapped_type()))).first)).second</code></span>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>k</dt>
<dd>Key value of the element whose mapped value is accessed.<br>
Member type <tt>key_type</tt> is the type of the keys for the elements stored in the container, defined in <a href="/map">map</a> as an alias of its first template parameter (<tt>Key</tt>).<br>
If an rvalue (second version), the key is moved instead of copied when a new element is inserted.<br>
</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
A reference to the mapped value of the element with a key value equivalent to <i>k</i>.<br>
<br>
Member type <tt>mapped_type</tt> is the type of the mapped values in the container, defined in <a href="/map">map</a> as an alias of its second template parameter (<tt>T</tt>).<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br></code></pre></td>
<td class="source"><pre><code><cite>// accessing mapped values</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;map&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>

<var>int</var> main ()
{
  std::map&lt;<var>char</var>,std::string&gt; mymap;

  mymap[<kbd>'a'</kbd>]=<kbd>"an element"</kbd>;
  mymap[<kbd>'b'</kbd>]=<kbd>"another element"</kbd>;
  mymap[<kbd>'c'</kbd>]=mymap[<kbd>'b'</kbd>];

  std::cout &lt;&lt; <kbd>"mymap['a'] is "</kbd> &lt;&lt; mymap[<kbd>'a'</kbd>] &lt;&lt; <kbd>'\n'</kbd>;
  std::cout &lt;&lt; <kbd>"mymap['b'] is "</kbd> &lt;&lt; mymap[<kbd>'b'</kbd>] &lt;&lt; <kbd>'\n'</kbd>;
  std::cout &lt;&lt; <kbd>"mymap['c'] is "</kbd> &lt;&lt; mymap[<kbd>'c'</kbd>] &lt;&lt; <kbd>'\n'</kbd>;
  std::cout &lt;&lt; <kbd>"mymap['d'] is "</kbd> &lt;&lt; mymap[<kbd>'d'</kbd>] &lt;&lt; <kbd>'\n'</kbd>;

  std::cout &lt;&lt; <kbd>"mymap now contains "</kbd> &lt;&lt; mymap.size() &lt;&lt; <kbd>" elements.\n"</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Notice how the last access (to element <tt>'d'</tt>) inserts a new element in the <a href="/map">map</a> with that key and initialized to its default value (an empty string) even though it is accessed only to retrieve its value. Member function <a href="/map::find">map::find</a> does not produce this effect.<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is
mymap now contains 4 elements.
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Logarithmic in <a href="/map::size">size</a>.<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
No changes.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The container is accessed, and potentially modified.<br>
The function accesses an element and returns a reference that can be used to modify its mapped value. Concurrently accessing other elements is safe.<br>
If the function inserts a new element, concurrently iterating ranges in the container is not safe.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
<b>Strong guarantee:</b> if an exception is thrown, there are no changes in the container.<br>
If a new element is inserted and <a href="/allocator_traits::construct">allocator_traits::construct</a> cannot construct an element with <i>k</i> and a default-constructed <tt>mapped_type</tt> (or if <tt>mapped_type</tt> is not <a href="/is_default_constructible">default constructible</a>), it causes <i>undefined behavior</i>.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/map/map/find/"><b>map::find</b></a></dt><dd>Get iterator to element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/map/map/insert/"><b>map::insert</b></a></dt><dd>Insert elements <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/map/map/operator=/"><b>map::operator=</b></a></dt><dd>Copy container content <span class="typ">(public member function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
