<div id="I_content">
<div class="C_doc">
<div id="I_type">function</div>
<div id="I_file">&lt;ios&gt; &lt;iostream&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span>defaultfloat<span class="C_ico cpp11warning" title="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it." alt="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it."></span></h1>
<div class="C_prototype"><pre>ios_base&amp; defaultfloat (ios_base&amp; str);</pre></div><div id="I_description">Use default floating-point notation</div>
<section id="description">
Sets the <samp>floatfield</samp> format flag for the <var>str</var> stream to <samp>defaultfloat</samp>.<br>
<br>
When <samp>floatfield</samp> is set to <samp>defaultfloat</samp>, floating-point values are written using the default notation: the representation uses as many meaningful digits as needed up to the stream's <i>decimal precision</i> (<samp><a href="/ios_base::precision">precision</a></samp>), counting both the digits before and after the decimal point (if any).<br>
<br>
The <samp>floatfield</samp> format flag is both a selective and a toggle flag: it can take any of the following values, or none:<br>
<table class="boxed">
<tr><th>flag value</th><th>effect when set</th></tr> <br>
<tr><td><samp>fixed</samp></td><td>write floating-point values in fixed-point notation.</td></tr>
<tr><td><samp><a href="/scientific">scientific</a></samp></td><td>write floating-point values in scientific notation.</td></tr>
<tr class="cpp11"><td><samp><a href="/hexfloat">hexfloat</a></samp></td><td>write floating-point values in hexadecimal format.<br>
The value of this is the same as <code>(fixed|scientific)</code></td></tr>
<tr class="cpp11"><td><samp><a href="/defaultfloat">defaultfloat</a></samp></td><td>write floating-point values in default floating-point notation. This is the value by default (same as none, before any other <samp>floatfield</samp> bit is set).</td></tr>
</table>
<br>
For standard streams, the <samp>floatfield</samp> format flag is set to this value (<samp>defaultfloat</samp>) on initialization.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>str</dt>
<dd>Stream object whose <samp>floatfield</samp> <i>format flag</i> is affected.<br>
Because this function is a manipulator, it is designed to be used alone with no arguments in conjunction with the <i>insertion</i> (<code>&lt;&lt;</code>) and <i>extraction</i> (<code>&gt;&gt;</code>) operations on streams (see example below).<br>
</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
Argument <var>str</var>.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br></code></pre></td>
<td class="source"><pre><code><cite>// hexfloat floatfield</cite>
<dfn>#include &lt;iostream&gt;     </dfn><cite>// std::cout, std::hexfloat, std::defaultfloat</cite>

<var>int</var> main () {
  <var>double</var> a = 3.1415926534;
  <var>double</var> b = 2006.0;
  <var>double</var> c = 1.0e-10;

  std::cout.precision(5);

  std::cout &lt;&lt; <kbd>"hexfloat:\n"</kbd> &lt;&lt; std::hexfloat;
  std::cout &lt;&lt; a &lt;&lt; <kbd>'\n'</kbd> &lt;&lt; b &lt;&lt; <kbd>'\n'</kbd> &lt;&lt; c &lt;&lt; <kbd>'\n'</kbd>;

  std::cout &lt;&lt; <kbd>'\n'</kbd>;

  std::cout &lt;&lt; <kbd>"defaultfloat:\n"</kbd> &lt;&lt; std::defaultfloat;
  std::cout &lt;&lt; a &lt;&lt; <kbd>'\n'</kbd> &lt;&lt; b &lt;&lt; <kbd>'\n'</kbd> &lt;&lt; c &lt;&lt; <kbd>'\n'</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Possible output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>hexfloat:
0x1.921fb5p+1
0x1.f58000p+10
0x1.b7cdfep-34

defaultfloat:
3.14159
2006
1e-010
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="access">
<h3>Data races</h3>
Modifies <var>str</var>. Concurrent access to the same stream object may cause data races.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
<b>Basic guarantee:</b> if an exception is thrown, <var>str</var> is in a valid state.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/ios/fixed/"><b>fixed</b></a></dt><dd>Use fixed floating-point notation <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/ios/scientific/"><b>scientific</b></a></dt><dd>Use scientific floating-point notation <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/ios/hexfloat/"><b>hexfloat</b></a></dt><dd>Use hexadecimal floating-point format <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/ios/ios_base/flags/"><b>ios_base::flags</b></a></dt><dd>Get/set format flags <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/ios/ios_base/setf/"><b>ios_base::setf</b></a></dt><dd>Set specific format flags <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/ios/ios_base/unsetf/"><b>ios_base::unsetf</b></a></dt><dd>Clear specific format flags <span class="typ">(public member function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
