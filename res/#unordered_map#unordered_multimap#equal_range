<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;unordered_map&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/unordered_map/unordered_multimap/">unordered_multimap</a>::equal_range<span class="C_ico cpp11warning" title="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it." alt="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it."></span></h1>
<div class="C_prototype"><pre>pair&lt;iterator,iterator&gt;   equal_range ( const key_type&amp; k );pair&lt;const_iterator,const_iterator&gt;   equal_range ( const key_type&amp; k ) const;</pre></div><div id="I_description">Get range of elements with specific key</div>
<section id="description">
Returns the bounds of a range that includes all the elements in the container with a key that compares equal to <i>k</i>.<br>
<br>
If <i>k</i> does not match any key in the container, the range returned has <a href="/unordered_multimap::end">end</a> as both its lower and upper range bounds.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>k</dt>
<dd>Key value to be compared.<br>
Member type <tt>key_type</tt> is the type of the keys for the elements in the container, defined in <a href="/unordered_multimap">unordered_multimap</a> as an alias of its first template parameter (<tt>Key</tt>).</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
The function returns a <a href="/pair">pair</a>, where its member <tt>pair::first</tt> is an iterator to the lower bound of the range, and <tt>pair::second</tt> is an iterator to its upper bound. The elements in the range are those between these two iterators, including <tt>pair::first</tt>, but not <tt>pair::second</tt>.<br>
<br>
Member types <tt>iterator</tt> and <tt>const_iterator</tt> are <a href="/ForwardIterator">forward iterator</a> types.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br></code></pre></td>
<td class="source"><pre><code><cite>// unordered_multimap::equal_range</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>
<dfn>#include &lt;unordered_map&gt;</dfn>
<dfn>#include &lt;algorithm&gt;</dfn>

<var>typedef</var> std::unordered_multimap&lt;std::string,std::string&gt; stringmap;

<var>int</var> main ()
{
  stringmap myumm = {
     {<kbd>"orange"</kbd>,<kbd>"FL"</kbd>},
     {<kbd>"strawberry"</kbd>,<kbd>"LA"</kbd>},
     {<kbd>"strawberry"</kbd>,<kbd>"OK"</kbd>},
     {<kbd>"pumpkin"</kbd>,<kbd>"NH"</kbd>}
  };

  std::cout &lt;&lt; <kbd>"Entries with strawberry:"</kbd>;
  <var>auto</var> range = myumm.equal_range(<kbd>"strawberry"</kbd>);
  for_each (
    range.first,
    range.second,
    [](stringmap::value_type&amp; x){std::cout &lt;&lt; <kbd>" "</kbd> &lt;&lt; x.second;}
  );

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>Entries with strawberry: LA OK
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Average case: constant.<br>
Worst case: linear in <a href="/unordered_multimap::size">container size</a>.<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
No changes.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/unordered_map/unordered_multimap/count/"><b>unordered_multimap::count</b></a></dt><dd>Count elements with a specific key <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_map/unordered_multimap/find/"><b>unordered_multimap::find</b></a></dt><dd>Get iterator to element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_map/unordered_multimap/begin/"><b>unordered_multimap::begin</b></a></dt><dd>Return iterator to beginning <span class="typ">(public member type)</span></dd></dl>
</section>
<div id="CH_bb"></div></div></div>
