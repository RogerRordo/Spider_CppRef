<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;string&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/string/string/">string</a>::replace</h1>
<div class="C_prototype"><div class="C_SwitchCases">
<div title="C++98">
<table><tr class="odd"><th>string (1)</th><td><pre>string&amp; replace (size_t pos,  size_t len,  const string&amp; str);string&amp; replace (iterator i1, iterator i2, const string&amp; str);</pre></td></tr><tr class="even"><th>substring (2)</th><td><pre>string&amp; replace (size_t pos,  size_t len,  const string&amp; str,                 size_t subpos, size_t sublen);</pre></td></tr><tr class="odd"><th>c-string (3)</th><td><pre>string&amp; replace (size_t pos,  size_t len,  const char* s);string&amp; replace (iterator i1, iterator i2, const char* s);</pre></td></tr><tr class="even"><th>buffer (4)</th><td><pre>string&amp; replace (size_t pos,  size_t len,  const char* s, size_t n);string&amp; replace (iterator i1, iterator i2, const char* s, size_t n);</pre></td></tr><tr class="odd"><th>fill (5)</th><td><pre>string&amp; replace (size_t pos,  size_t len,  size_t n, char c);string&amp; replace (iterator i1, iterator i2, size_t n, char c);</pre></td></tr><tr class="even"><th>range (6)</th><td><pre>template &lt;class InputIterator&gt;  string&amp; replace (iterator i1, iterator i2,                   InputIterator first, InputIterator last);</pre></td></tr></table></div>
<div title="C++11" class="on">
<table><tr class="odd"><th>string (1)</th><td><pre>string&amp; replace (size_t pos,        size_t len,        const string&amp; str);string&amp; replace (const_iterator i1, const_iterator i2, const string&amp; str);</pre></td></tr><tr class="even"><th>substring (2)</th><td><pre>string&amp; replace (size_t pos,        size_t len,        const string&amp; str,                 size_t subpos, size_t sublen);</pre></td></tr><tr class="odd"><th>c-string (3)</th><td><pre>string&amp; replace (size_t pos,        size_t len,        const char* s);string&amp; replace (const_iterator i1, const_iterator i2, const char* s);</pre></td></tr><tr class="even"><th>buffer (4)</th><td><pre>string&amp; replace (size_t pos,        size_t len,        const char* s, size_t n);string&amp; replace (const_iterator i1, const_iterator i2, const char* s, size_t n);</pre></td></tr><tr class="odd"><th>fill (5)</th><td><pre>string&amp; replace (size_t pos,        size_t len,        size_t n, char c);string&amp; replace (const_iterator i1, const_iterator i2, size_t n, char c);</pre></td></tr><tr class="even"><th>range (6)</th><td><pre>template &lt;class InputIterator&gt;  string&amp; replace (const_iterator i1, const_iterator i2,                   InputIterator first, InputIterator last);</pre></td></tr><tr class="odd"><th>initializer list (7)</th><td><pre>string&amp; replace (const_iterator i1, const_iterator i2, initializer_list&lt;char&gt; il);</pre></td></tr></table></div>
<div title="C++14" class="on">
<table><tr class="even"><th>string (1)</th><td><pre>string&amp; replace (size_t pos,        size_t len,        const string&amp; str);string&amp; replace (const_iterator i1, const_iterator i2, const string&amp; str);</pre></td></tr><tr class="odd"><th>substring (2)</th><td><pre>string&amp; replace (size_t pos,        size_t len,        const string&amp; str,                 size_t subpos, size_t sublen = npos);</pre></td></tr><tr class="even"><th>c-string (3)</th><td><pre>string&amp; replace (size_t pos,        size_t len,        const char* s);string&amp; replace (const_iterator i1, const_iterator i2, const char* s);</pre></td></tr><tr class="odd"><th>buffer (4)</th><td><pre>string&amp; replace (size_t pos,        size_t len,        const char* s, size_t n);string&amp; replace (const_iterator i1, const_iterator i2, const char* s, size_t n);</pre></td></tr><tr class="even"><th>fill (5)</th><td><pre>string&amp; replace (size_t pos,        size_t len,        size_t n, char c);string&amp; replace (const_iterator i1, const_iterator i2, size_t n, char c);</pre></td></tr><tr class="odd"><th>range (6)</th><td><pre>template &lt;class InputIterator&gt;  string&amp; replace (const_iterator i1, const_iterator i2,                   InputIterator first, InputIterator last);</pre></td></tr><tr class="even"><th>initializer list (7)</th><td><pre>string&amp; replace (const_iterator i1, const_iterator i2, initializer_list&lt;char&gt; il);</pre></td></tr></table></div>
</div>
</div><div id="I_description">Replace portion of string</div>
<section id="description">
Replaces the portion of the string that begins at character <i>pos</i> and spans <i>len</i> characters (or the part of the string in the range between <tt>[i1,i2)</tt>) by new contents:<br>
<br>
<dl>
<dt>(1) string</dt>
<dd>Copies <i>str</i>.</dd>
<dt>(2) substring</dt>
<dd>Copies the portion of <i>str</i> that begins at the character position <i>subpos</i> and spans <i>sublen</i> characters (or until the end of <i>str</i>, if either <i>str</i> is too short or if <i>sublen</i> is <a href="/string::npos">string::npos</a>).</dd>
<dt>(3) c-string</dt>
<dd>Copies the null-terminated character sequence (C-string) pointed by <i>s</i>.</dd>
<dt>(4) buffer</dt>
<dd>Copies the first <i>n</i> characters from the array of characters pointed by <i>s</i>.</dd>
<dt>(5) fill</dt>
<dd>Replaces the portion of the string by <i>n</i> consecutive copies of character <i>c</i>.</dd>
<dt>(6) range</dt>
<dd>Copies the sequence of characters in the range <tt>[first,last)</tt>, in the same order.</dd>
<dt>(7) initializer list</dt>
<dd>Copies each of the characters in <i>il</i>, in the same order.</dd>
</dl>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>str</dt>
<dd>Another <a href="/string">string</a> object, whose value is copied.<br>
</dd>
<dt>pos</dt>
<dd>Position of the first character to be replaced.<br>
If this is greater than the <a href="/string::length">string length</a>, it throws <a href="/out_of_range">out_of_range</a>.<br>
</dd>
<dt>len</dt>
<dd>Number of characters to replace (if the string is shorter, as many characters as possible are replaced).<br>
A value of <a href="/string::npos">string::npos</a> indicates all characters until the end of the string.</dd>
<dt>subpos</dt>
<dd>Position of the first character in <i>str</i> that is copied to the object as replacement.<br>
If this is greater than <i>str</i>'s <a href="/string::length">length</a>, it throws <a href="/out_of_range">out_of_range</a>.<br>
</dd>
<dt>sublen</dt>
<dd>Length of the substring to be copied (if the string is shorter, as many characters as possible are copied).<br>
A value of <a href="/string::npos">string::npos</a> indicates all characters until the end of <i>str</i>.</dd>
<dt>s</dt>
<dd>Pointer to an array of characters (such as a <i>c-string</i>).</dd>
<dt>n</dt>
<dd>Number of characters to copy.</dd>
<dt>c</dt>
<dd>Character value, repeated <i>n</i> times.</dd>
<dt>first, last</dt>
<dd><a href="/InputIterator">Input iterators</a> to the initial and final positions in a range. The range used is <tt>[first,last)</tt>, which includes all the characters between <i>first</i> and <i>last</i>, including the character pointed by <i>first</i> but not the character pointed by <i>last</i>.<br>
The function template argument <tt>InputIterator</tt> shall be an <a href="/InputIterator">input iterator</a> type that points to elements of a type convertible to <tt>char</tt>.</dd>
<dt>il</dt>
<dd>An <a href="/initializer_list">initializer_list</a> object.<br>
These objects are automatically constructed from <i>initializer list</i> declarators.</dd>
</dl>
<br>
<samp><a href="/size_t">size_t</a></samp> is an unsigned integral type (the same as member type <samp><a href="/string#types">string::size_type</a></samp>).<br>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
<tt>*this</tt>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br></code></pre></td>
<td class="source"><pre><code><cite>// replacing in a string</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>

<var>int</var> main ()
{
  std::string base=<kbd>"this is a test string."</kbd>;
  std::string str2=<kbd>"n example"</kbd>;
  std::string str3=<kbd>"sample phrase"</kbd>;
  std::string str4=<kbd>"useful."</kbd>;

  <cite>// replace signatures used in the same order as described above:</cite>

  <cite>// Using positions:                 0123456789*123456789*12345</cite>
  std::string str=base;           <cite>// "this is a test string."</cite>
  str.replace(9,5,str2);          <cite>// "this is an example string." (1)</cite>
  str.replace(19,6,str3,7,6);     <cite>// "this is an example phrase." (2)</cite>
  str.replace(8,10,<kbd>"just a"</kbd>);     <cite>// "this is just a phrase."     (3)</cite>
  str.replace(8,6,<kbd>"a shorty"</kbd>,7);  <cite>// "this is a short phrase."    (4)</cite>
  str.replace(22,1,3,<kbd>'!'</kbd>);        <cite>// "this is a short phrase!!!"  (5)</cite>

  <cite>// Using iterators:                                               0123456789*123456789*</cite>
  str.replace(str.begin(),str.end()-3,str3);                    <cite>// "sample phrase!!!"      (1)</cite>
  str.replace(str.begin(),str.begin()+6,<kbd>"replace"</kbd>);             <cite>// "replace phrase!!!"     (3)</cite>
  str.replace(str.begin()+8,str.begin()+14,<kbd>"is coolness"</kbd>,7);    <cite>// "replace is cool!!!"    (4)</cite>
  str.replace(str.begin()+12,str.end()-4,4,<kbd>'o'</kbd>);                <cite>// "replace is cooool!!!"  (5)</cite>
  str.replace(str.begin()+11,str.end(),str4.begin(),str4.end());<cite>// "replace is useful."    (6)</cite>
  std::cout &lt;&lt; str &lt;&lt; <kbd>'\n'</kbd>;
  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>replace is useful.
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Unspecified, but generally up to linear in the new <a href="/string::length">string length</a>.<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
Any iterators, pointers and references related to this object may be invalidated.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The object is modified.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
<b>Strong guarantee:</b> if an exception is thrown, there are no changes in the <a href="/string">string</a>.<br>
<br>
If <tt>s</tt> does not point to an array long enough, or if the range specified by <tt>[first,last)</tt> is not valid, it causes <i>undefined behavior</i>.<br>
<br>
If <i>pos</i> is greater than the <a href="/string::length">string length</a>, or if <i>subpos</i> is greater than <i>str</i>'s <a href="/string::length">length</a>, an <a href="/out_of_range">out_of_range</a> exception is thrown.<br>
If the resulting <a href="/string::length">string length</a> would exceed the <a href="/string::max_size">max_size</a>, a <a href="/length_error">length_error</a> exception is thrown.<br>
A <a href="/bad_alloc">bad_alloc</a> exception is thrown if the function needs to allocate storage and fails.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/string/string/insert/"><b>string::insert</b></a></dt><dd>Insert into string <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/string/string/append/"><b>string::append</b></a></dt><dd>Append to string <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/string/string/substr/"><b>string::substr</b></a></dt><dd>Generate substring <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/string/string/erase/"><b>string::erase</b></a></dt><dd>Erase characters from string <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/string/string/assign/"><b>string::assign</b></a></dt><dd>Assign content to string <span class="typ">(public member function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
