<div id="I_content">
<div class="C_doc">
<h1><a href="/reference/string/basic_string/">basic_string</a>::c_str</h1>
<div class="C_prototype"><div class="C_SwitchCases">
<div title="C++98">
<pre>const charT* c_str() const;</pre></div>
<div title="C++11" class="on">
<pre>const charT* c_str() const noexcept;</pre></div>
</div>
</div><div id="I_description">Get C-string equivalent</div>
<section id="description">
Returns a pointer to an array that contains a null-terminated sequence of characters (i.e., a C-string) representing the current value of the <a href="/basic_string">basic_string</a> object.<br>
<br>
This array includes the same sequence of characters that make up the value of the <a href="/basic_string">basic_string</a> object plus an additional terminating null-character (<tt>charT()</tt>) at the end.<br>
<br>
<div class="C_SwitchCases">
<div title="C++98">
A program shall not alter any of the characters in this sequence.<br>
</div>
<div title="C++11">
The pointer returned points to the internal array currently used by the <a href="/basic_string">basic_string</a> object to store the characters that conform its value.<br>
<br>
Both <a href="/basic_string::data">basic_string::data</a> and <tt>basic_string::c_str</tt> are synonyms and return the same value.<br>
</div>
</div>
<br>
The pointer returned may be invalidated by further calls to other member functions that modify the object.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
none<br>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
A pointer to the c-string representation of the <a href="/basic_string">basic_string</a> object's value.<br>
<br>
<tt>charT</tt> is <a href="/basic_string">basic_string</a>'s character type (i.e., its first template parameter).<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br></code></pre></td>
<td class="source"><pre><code><cite>// strings and c-strings</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;cstring&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>

<var>int</var> main ()
{
  std::string str (<kbd>"Please split this sentence into tokens"</kbd>);

  <var>char</var> * cstr = <var>new</var> <var>char</var> [str.length()+1];
  std::strcpy (cstr, str.c_str());

  <cite>// cstr now contains a c-string copy of str</cite>

  <var>char</var> * p = std::strtok (cstr,<kbd>" "</kbd>);
  <var>while</var> (p!=0)
  {
    std::cout &lt;&lt; p &lt;&lt; <kbd>'\n'</kbd>;
    p = strtok(NULL,<kbd>" "</kbd>);
  }

  <var>delete</var>[] cstr;
  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>Please
split
this
sentence
into
tokens
</samp></pre></td></tr></table></div>
</section>
<br>
<div class="C_SwitchCases">
<div title="C++98">
<section id="unspecified">
<h3>Complexity, iterator, access, exceptions</h3>
Unspecified or contradictory specifications.<br>
</div>
<div title="C++11">
<section id="complexity">
<h3>Complexity</h3>
Constant.<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
No changes.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The object is accessed.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
<b>No-throw guarantee:</b> this member function never throws exceptions.<br>
</section>
</div>
</div>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/string/basic_string/data/"><b>basic_string::data</b></a></dt><dd>Get string data <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/string/basic_string/copy/"><b>basic_string::copy</b></a></dt><dd>Copy sequence of characters from string <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/string/basic_string/operator[]/"><b>basic_string::operator[]</b></a></dt><dd>Get character of string <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/string/basic_string/front/"><b>basic_string::front</b></a></dt><dd>Access first character <span class="typ">(public member function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
