<div id="I_content">
<div class="C_doc">
<div id="I_type">function template</div>
<div id="I_file">&lt;algorithm&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span>stable_partition</h1>
<div class="C_prototype"><pre>template &lt;class BidirectionalIterator, class UnaryPredicate&gt;  BidirectionalIterator stable_partition (BidirectionalIterator first,                                          BidirectionalIterator last,                                          UnaryPredicate pred);</pre></div><div id="I_description">Partition range in two - stable ordering</div>
<section id="description">
Rearranges the elements in the range <code>[first,last)</code>, in such a way that all the elements for which <var>pred</var> returns <code>true</code> precede all those for which it returns <code>false</code>, and, unlike function <samp><a href="/partition">partition</a></samp>, the relative order of elements within each group is preserved.<br>
<br>
This is generally implemented using an internal temporary buffer.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>first, last</dt>
<dd><a href="/BidirectionalIterator">Bidirectional iterators</a> to the initial and final positions of the sequence to partition. The range used is <code>[first,last)</code>, which contains all the elements between <var>first</var> and <var>last</var>, including the element pointed by <var>first</var> but not the element pointed by <var>last</var>.<br>
<samp>BidirectionalIterator</samp> shall point to a type for which <samp><a href="/swap">swap</a></samp> is defined (and swaps the value of its arguments) and which is both <i><a href="/is_move_constructible">move-constructible</a></i> and <i><a href="/is_move_assignable">move-assignable</a></i>.<br>
</dd>
<dt>pred</dt>
<dd>Unary function that accepts an element in the range as argument, and returns a value convertible to <code>bool</code>. The value returned indicates whether the element is to be placed before (if <code>true</code>, it is placed before all the elements for which it returns <code>false</code>).<br>
The function shall not modify its argument.<br>
This can either be a function pointer or a function object.</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
An iterator that points to the first element of the second group of elements (those for which <var>pred</var> returns <code>false</code>), or <var>last</var> if this group is empty.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br></code></pre></td>
<td class="source"><pre><code><cite>// stable_partition example</cite>
<dfn>#include &lt;iostream&gt;     </dfn><cite>// std::cout</cite>
<dfn>#include &lt;algorithm&gt;    </dfn><cite>// std::stable_partition</cite>
<dfn>#include &lt;vector&gt;       </dfn><cite>// std::vector</cite>

<var>bool</var> IsOdd (<var>int</var> i) { <var>return</var> (i%2)==1; }

<var>int</var> main () {
  std::vector&lt;<var>int</var>&gt; myvector;

  <cite>// set some values:</cite>
  <var>for</var> (<var>int</var> i=1; i&lt;10; ++i) myvector.push_back(i); <cite>// 1 2 3 4 5 6 7 8 9</cite>

  std::vector&lt;<var>int</var>&gt;::iterator bound;
  bound = std::stable_partition (myvector.begin(), myvector.end(), IsOdd);

  <cite>// print out content:</cite>
  std::cout &lt;&lt; <kbd>"odd elements:"</kbd>;
  <var>for</var> (std::vector&lt;<var>int</var>&gt;::iterator it=myvector.begin(); it!=bound; ++it)
    std::cout &lt;&lt; <kbd>' '</kbd> &lt;&lt; *it;
  std::cout &lt;&lt; <kbd>'\n'</kbd>;

  std::cout &lt;&lt; <kbd>"even elements:"</kbd>;
  <var>for</var> (std::vector&lt;<var>int</var>&gt;::iterator it=bound; it!=myvector.end(); ++it)
    std::cout &lt;&lt; <kbd>' '</kbd> &lt;&lt; *it;
  std::cout &lt;&lt; <kbd>'\n'</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>odd elements: 1 3 5 7 9
even elements: 2 4 6 8
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
If enough extra memory is available, linear in the <a href="/distance">distance</a> between <var>first</var> and <var>last</var>: Applies <var>pred</var> exactly once to each element, and performs up to that many element moves.<br>
Otherwise, up to linearithmic: Performs up to <code>N*log(N)</code> element swaps (where <var>N</var> is the distance above). It also applies <var>pred</var> exactly once to each element.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The objects in the range <code>[first,last)</code> are modified.<br>
</section>
<br>
<section id="exceptions">
<h3>Exceptions</h3>
Throws if any of the element comparisons, the element swaps (or moves) or the operations on iterators throws.<br>
Note that invalid arguments cause <i>undefined behavior</i>.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/algorithm/partition/"><b>partition</b></a></dt><dd>Partition range in two <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/sort/"><b>sort</b></a></dt><dd>Sort elements in range <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/reverse/"><b>reverse</b></a></dt><dd>Reverse range <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/find_if/"><b>find_if</b></a></dt><dd>Find element in range <span class="typ">(function template)</span></dd></dl>
<div id="CH_bb"></div></div></div>
