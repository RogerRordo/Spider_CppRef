<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;ios&gt; &lt;iostream&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/ios/ios/">ios</a>::good</h1>
<div class="C_prototype"><pre>bool good() const;</pre></div><div id="I_description">Check whether state of stream is good</div>
<section id="description">
Returns <code>true</code> if none of the stream's <i>error state flags</i> (<samp>eofbit</samp>, <samp>failbit</samp> and <samp>badbit</samp>) is set.<br>
<br>
This function behaves as if defined as:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br></code></pre></td>
<td class="source"><pre><code><var>bool</var> ios::good() <var>const</var> {
  <var>return</var> rdstate() == goodbit;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Notice that this function is not the exact opposite of member <samp><a href="/ios::bad">bad</a></samp>, which only checks whether the <samp>badbit</samp> flag is set.<br>
<br>
Whether specific error flags are set, can be checked with member functions <samp><a href="/ios::eof">eof</a></samp>, <samp><a href="/ios::fail">fail</a></samp>, and <samp><a href="/ios::bad">bad</a></samp>:<br>
<br>
<table class="boxed">
<tr><th rowspan="2"><samp><a href="/ios_base::iostate">iostate</a></samp> value<br>
(member constant)</th><th rowspan="2">indicates</th><th colspan="5"><samp></samp>functions to check state flags</th></tr>
<tr><th><samp><a href="/ios::good">good()</a></samp></th><th><samp><a href="/ios::eof">eof()</a></samp></th><th><samp><a href="/ios::fail">fail()</a></samp></th><th><samp><a href="/ios::bad">bad()</a></samp></th><th><samp><a href="/ios::rdstate">rdstate()</a></samp></th></tr>
<tr><th><samp>goodbit</samp></th><td>No errors (zero value <samp><a href="/ios_base::iostate">iostate</a></samp>)</td><td class="yes"><code>true</code></td><td class="no"><code>false</code></td><td class="no"><code>false</code></td><td class="no"><code>false</code></td><td><samp>goodbit</samp></td></tr>
<tr><th><samp>eofbit</samp></th><td>End-of-File reached on input operation</td><td class="no"><code>false</code></td><td class="yes"><code>true</code></td><td class="no"><code>false</code></td><td class="no"><code>false</code></td><td><samp>eofbit</samp></td></tr>
<tr><th><samp>failbit</samp></th><td>Logical error on i/o operation</td><td class="no"><code>false</code></td><td class="no"><code>false</code></td><td class="yes"><code>true</code></td><td class="no"><code>false</code></td><td><samp>failbit</samp></td></tr>
<tr><th><samp>badbit</samp></th><td>Read/writing error on i/o operation</td><td class="no"><code>false</code></td><td class="no"><code>false</code></td><td class="yes"><code>true</code></td><td class="yes"><code>true</code></td><td><samp>badbit</samp></td></tr>
</table>
<samp>eofbit</samp>, <samp>failbit</samp> and <samp>badbit</samp> are member constants with implementation-defined values that can be combined (as if with the bitwise OR operator).<br>
<samp>goodbit</samp> is zero, indicating that none of the other bits is set.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
none<br>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
<code>true</code> if none of the stream's state flags are set.<br>
<code>false</code> if any of the stream's state flags are set (<samp>badbit</samp>, <samp>eofbit</samp> or <samp>failbit</samp>).<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br></code></pre></td>
<td class="source"><pre><code><cite>// error state flags</cite>
<dfn>#include &lt;iostream&gt;     </dfn><cite>// std::cout, std::ios</cite>
<dfn>#include &lt;sstream&gt;      </dfn><cite>// std::stringstream</cite>

<var>void</var> print_state (<var>const</var> std::ios&amp; stream) {
  std::cout &lt;&lt; <kbd>" good()="</kbd> &lt;&lt; stream.good();
  std::cout &lt;&lt; <kbd>" eof()="</kbd> &lt;&lt; stream.eof();
  std::cout &lt;&lt; <kbd>" fail()="</kbd> &lt;&lt; stream.fail();
  std::cout &lt;&lt; <kbd>" bad()="</kbd> &lt;&lt; stream.bad();
}

<var>int</var> main () {
  std::stringstream stream;

  stream.clear (stream.goodbit);
  std::cout &lt;&lt; <kbd>"goodbit:"</kbd>; print_state(stream); std::cout &lt;&lt; <kbd>'\n'</kbd>;

  stream.clear (stream.eofbit);
  std::cout &lt;&lt; <kbd>" eofbit:"</kbd>; print_state(stream); std::cout &lt;&lt; <kbd>'\n'</kbd>;

  stream.clear (stream.failbit);
  std::cout &lt;&lt; <kbd>"failbit:"</kbd>; print_state(stream); std::cout &lt;&lt; <kbd>'\n'</kbd>;

  stream.clear (stream.badbit);
  std::cout &lt;&lt; <kbd>" badbit:"</kbd>; print_state(stream); std::cout &lt;&lt; <kbd>'\n'</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>goodbit: good()=1 eof()=0 fail()=0 bad()=0
 eofbit: good()=0 eof()=1 fail()=0 bad()=0
failbit: good()=0 eof()=0 fail()=1 bad()=0
 badbit: good()=0 eof()=0 fail()=1 bad()=1
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="access">
<h3>Data races</h3>
Accesses the stream object.<br>
Concurrent access to the same stream object may cause data races.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
<b>Strong guarantee:</b> if an exception is thrown, there are no changes in the stream.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/ios/ios/fail/"><b>ios::fail</b></a></dt><dd>Check whether either failbit or badbit is set <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/ios/ios/bad/"><b>ios::bad</b></a></dt><dd>Check whether badbit is set <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/ios/ios/eof/"><b>ios::eof</b></a></dt><dd>Check whether eofbit is set <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/ios/ios/rdstate/"><b>ios::rdstate</b></a></dt><dd>Get error state flags <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/ios/ios/setstate/"><b>ios::setstate</b></a></dt><dd>Set error state flag <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/ios/ios/clear/"><b>ios::clear</b></a></dt><dd>Set error state flags <span class="typ">(public member function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
