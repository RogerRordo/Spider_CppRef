<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;string&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/string/basic_string/">basic_string</a>::get_allocator</h1>
<div class="C_prototype"><div class="C_SwitchCases">
<div title="C++98">
<pre>allocator_type get_allocator() const;</pre></div>
<div title="C++11" class="on">
<pre>allocator_type get_allocator() const noexcept;</pre></div>
</div>
</div><div id="I_description">Get allocator</div>
<section id="description">
Returns a copy of the allocator object associated with the <a href="/basic_string">basic_string</a>.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
none<br>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
The allocator.<br>
<br>
Member type <tt>allocator_type</tt> is the type of the allocator used by the container, defined in <a href="/basic_string">basic_string</a> as an alias of its third template parameter (<tt>Alloc</tt>).<br>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Unspecified, but generally constant.<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
No changes.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The object is accessed.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
<b>No-throw guarantee:</b> this member function never throws exceptions.<br>
Copying any instantiation of the <a href="/allocator">default allocator</a> is also guaranteed to never throw.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/memory/allocator/"><b>allocator</b></a></dt><dd>Default allocator <span class="typ">(class template)</span></dd></dl>
<div id="CH_bb"></div></div></div>
