<div id="I_content">
<div class="C_doc">
<div id="I_type">function template</div>
<div id="I_file">&lt;string&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span>operator+ (basic_string)</h1>
<div class="C_prototype"><div class="C_SwitchCases">
<div title="C++98">
<table><tr class="odd"><th>string (1)</th><td><pre>template &lt;class charT, class traits, class Alloc&gt;  basic_string operator+ (const basic_string&lt;charT,traits,Alloc&gt;&amp; lhs,                          const basic_string&lt;charT,traits,Alloc&gt;&amp; rhs);</pre></td></tr><tr class="even"><th>c-string (2)</th><td><pre>template &lt;class charT, class traits, class Alloc&gt;  basic_string operator+ (const basic_string&lt;charT,traits,Alloc&gt;&amp; lhs, const charT* rhs);template &lt;class charT, class traits, class Alloc&gt;  basic_string operator+ (const charT* lhs, const basic_string&lt;charT,traits,Alloc&gt;&amp; rhs);</pre></td></tr><tr class="odd"><th>character (3)</th><td><pre>template &lt;class charT, class traits, class Alloc&gt;  basic_string operator+ (const basic_string&lt;charT,traits,Alloc&gt;&amp; lhs, charT rhs);template &lt;class charT, class traits, class Alloc&gt;  basic_string operator+ (charT lhs, const basic_string&lt;charT,traits,Alloc&gt;&amp; rhs);</pre></td></tr></table></div>
<div title="C++11" class="on">
<table><tr class="even"><th>string (1)</th><td><pre>template &lt;class charT, class traits, class Alloc&gt;  basic_string operator+ (const basic_string&lt;charT,traits,Alloc&gt;&amp; lhs,                          const basic_string&lt;charT,traits,Alloc&gt;&amp; rhs);template &lt;class charT, class traits, class Alloc&gt;  basic_string operator+ (basic_string&lt;charT,traits,Alloc&gt;&amp;&amp; lhs,                          basic_string&lt;charT,traits,Alloc&gt;&amp;&amp; rhs);template &lt;class charT, class traits, class Alloc&gt;  basic_string operator+ (basic_string&lt;charT,traits,Alloc&gt;&amp;&amp; lhs,                          const basic_string&lt;charT,traits,Alloc&gt;&amp; rhs);template &lt;class charT, class traits, class Alloc&gt;  basic_string operator+ (const basic_string&lt;charT,traits,Alloc&gt;&amp; lhs,                          basic_string&lt;charT,traits,Alloc&gt;&amp;&amp; rhs);</pre></td></tr><tr class="odd"><th>c-string (2)</th><td><pre>template &lt;class charT, class traits, class Alloc&gt;  basic_string operator+ (const basic_string&lt;charT,traits,Alloc&gt;&amp; lhs, const charT* rhs);template &lt;class charT, class traits, class Alloc&gt;  basic_string operator+ (basic_string&lt;charT,traits,Alloc&gt;&amp;&amp; lhs, const charT* rhs);template &lt;class charT, class traits, class Alloc&gt;  basic_string operator+ (const charT* lhs, const basic_string&lt;charT,traits,Alloc&gt;&amp;  rhs);template &lt;class charT, class traits, class Alloc&gt;  basic_string operator+ (const charT* lhs, basic_string&lt;charT,traits,Alloc&gt;&amp;&amp; rhs);</pre></td></tr><tr class="even"><th>character (3)</th><td><pre>template &lt;class charT, class traits, class Alloc&gt;  basic_string operator+ (const basic_string&lt;charT,traits,Alloc&gt;&amp; lhs, charT rhs);template &lt;class charT, class traits, class Alloc&gt;  basic_string operator+ (basic_string&lt;charT,traits,Alloc&gt;&amp;&amp; lhs, charT rhs);template &lt;class charT, class traits, class Alloc&gt;  basic_string operator+ (charT lhs, const basic_string&lt;charT,traits,Alloc&gt;&amp; rhs);template &lt;class charT, class traits, class Alloc&gt;  basic_string operator+ (charT lhs, basic_string&lt;charT,traits,Alloc&gt;&amp;&amp; rhs);</pre></td></tr></table></div>
</div>
</div><div id="I_description">Concatenate strings</div>
<section id="description">
Returns a newly constructed <a href="/basic_string">basic_string</a> object with its value being the concatenation of the characters in <i>lhs</i> followed by those of <i>rhs</i>.<br>
<br>
<div class="C_SwitchCases">
<div title="C++11">
In the signatures taking at least one <i>rvalue reference</i> as argument, the returned object is <i>move-constructed</i> by passing this argument, which is left in an unspecified but valid state. If both arguments are <i>rvalue references</i>, only one of them is moved (it is unspecified which), with the other one preserving its value.<br>
</div>
</div>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>lhs, rhs</dt>
<dd>Arguments to the left- and right-hand side of the operator, respectively.<br>
If of type <tt>charT*</tt>, it shall point to a null-terminated character sequence.<br>
<tt>charT</tt> is <a href="/basic_string">basic_string</a>'s character type (i.e., its first template parameter).<br>
</dd>
</dl>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br></code></pre></td>
<td class="source"><pre><code><cite>// concatenating strings</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>

main ()
{
  std::string firstlevel (<kbd>"com"</kbd>);
  std::string secondlevel (<kbd>"cplusplus"</kbd>);
  std::string scheme (<kbd>"http://"</kbd>);
  std::string hostname;
  std::string url;

  hostname = <kbd>"www."</kbd> + secondlevel + <kbd>'.'</kbd> + firstlevel;
  url = scheme + hostname;

  std::cout &lt;&lt; url &lt;&lt; <kbd>'\n'</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>http://www.cplusplus.com
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
A <a href="/basic_string">basic_string</a> object whose value is the concatenation of <i>lhs</i> and <i>rhs</i>.<br>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Unspecified, but generally linear in the resulting <a href="/string::length">string length</a> (and linear in the length of the non-moved argument for signatures with <i>rvalue references</i>).<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
The signatures with <i>rvalue references</i> may invalidate iterators, pointers and references related to the moved <a href="/basic_string">basic_string</a> object.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The signatures with <i>rvalue references</i> modify the moved <a href="/basic_string">basic_string</a> object.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
<b>Strong guarantee:</b> if an exception is thrown, there are no changes in either <a href="/basic_string">basic_string</a> objects.<br>
<br>
If <tt>s</tt> is not a null-terminated character sequence, it causes <i>undefined behavior</i>.<br>
<br>
If the resulting <a href="/basic_string::length">string length</a> would exceed the <a href="/basic_string::max_size">max_size</a>, a <a href="/length_error">length_error</a> exception is thrown.<br>
If the type uses the <a href="/allocator">default allocator</a>, a <a href="/bad_alloc">bad_alloc</a> exception is thrown if the function needs to allocate storage and fails.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/string/basic_string/append/"><b>basic_string::append</b></a></dt><dd>Append to string <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/string/basic_string/insert/"><b>basic_string::insert</b></a></dt><dd>Insert into string <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/string/basic_string/operator+=/"><b>basic_string::operator+=</b></a></dt><dd>Append to string <span class="typ">(public member function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
