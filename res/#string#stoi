<div id="I_content">
<div class="C_doc">
<div id="I_type">function template</div>
<div id="I_file">&lt;string&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span>stoi<span class="C_ico cpp11warning" title="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it." alt="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it."></span></h1>
<div class="C_prototype"><pre>int stoi (const string&amp;  str, size_t* idx = 0, int base = 10);int stoi (const wstring&amp; str, size_t* idx = 0, int base = 10);</pre></div><div id="I_description">Convert string to integer</div>
<section id="description">
Parses <i>str</i> interpreting its content as an integral number of the specified <i>base</i>, which is returned as an <tt>int</tt> value.<br>
<br>
If <i>idx</i> is not a null pointer, the function also sets the value of <i>idx</i> to the position of the first character in <i>str</i> after the number.<br>
<br>
The function uses <a href="/strtol">strtol</a> (or <a href="/wcstol">wcstol</a>) to perform the conversion (see <a href="/strtol">strtol</a> for more details on the process).<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>str</dt>
<dd>String object with the representation of an integral number.</dd>
<dt>idx</dt>
<dd>Pointer to an object of type <a href="/size_t">size_t</a>, whose value is set by the function to position of the next character in <i>str</i> after the numerical value.<br>
This parameter can also be a null pointer, in which case it is not used.</dd>
<dt>base</dt>
<dd>Numerical base (radix) that determines the valid characters and their interpretation.<br>
If this is <tt>0</tt>, the base used is determined by the format in the sequence (see <a href="/strtol">strtol</a> for details). Notice that by default this argument is <tt>10</tt>, not <tt>0</tt>.</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
On success, the function returns the converted integral number as an <tt>int</tt> value.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br></code></pre></td>
<td class="source"><pre><code><cite>// stoi example</cite>
<dfn>#include &lt;iostream&gt;   </dfn><cite>// std::cout</cite>
<dfn>#include &lt;string&gt;     </dfn><cite>// std::string, std::stoi</cite>

<var>int</var> main ()
{
  std::string str_dec = <kbd>"2001, A Space Odyssey"</kbd>;
  std::string str_hex = <kbd>"40c3"</kbd>;
  std::string str_bin = <kbd>"-10010110001"</kbd>;
  std::string str_auto = <kbd>"0x7f"</kbd>;

  std::string::size_type sz;   <cite>// alias of size_t</cite>

  <var>int</var> i_dec = std::stoi (str_dec,&amp;sz);
  <var>int</var> i_hex = std::stoi (str_hex,<var>nullptr</var>,16);
  <var>int</var> i_bin = std::stoi (str_bin,<var>nullptr</var>,2);
  <var>int</var> i_auto = std::stoi (str_auto,<var>nullptr</var>,0);

  std::cout &lt;&lt; str_dec &lt;&lt; <kbd>": "</kbd> &lt;&lt; i_dec &lt;&lt; <kbd>" and ["</kbd> &lt;&lt; str_dec.substr(sz) &lt;&lt; <kbd>"]\n"</kbd>;
  std::cout &lt;&lt; str_hex &lt;&lt; <kbd>": "</kbd> &lt;&lt; i_hex &lt;&lt; <kbd>'\n'</kbd>;
  std::cout &lt;&lt; str_bin &lt;&lt; <kbd>": "</kbd> &lt;&lt; i_bin &lt;&lt; <kbd>'\n'</kbd>;
  std::cout &lt;&lt; str_auto &lt;&lt; <kbd>": "</kbd> &lt;&lt; i_auto &lt;&lt; <kbd>'\n'</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>
2001, A Space Odyssey: 2001 and [, A Space Odyssey]
40c3:  16579
-10010110001: -1201
0x7f: 127
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Unspecified, but generally linear in the number of characters interpreted.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
Modifies the value pointed by <i>idx</i> (if not zero).<br>
</section>
<br>
<section id="exceptions">
<h3>Exceptions</h3>
If no conversion could be performed, an <samp><a href="/invalid_argument">invalid_argument</a></samp> exception is thrown.<br>
<br>
If the value read is out of the range of representable values by an <tt>int</tt>, an <samp><a href="/out_of_range">out_of_range</a></samp> exception is thrown.<br>
<br>
An invalid <i>idx</i> causes <i>undefined behavior</i>.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/string/stol/"><b>stol</b></a></dt><dd>Convert string to long int <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/string/stoul/"><b>stoul</b></a></dt><dd>Convert string to unsigned integer <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/cstdlib/strtol/"><b>strtol</b></a></dt><dd>Convert string to long integer <span class="typ">(function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
