<div id="I_content">
<div class="C_doc">
<div id="I_type">function template</div>
<div id="I_file">&lt;algorithm&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span>count</h1>
<div class="C_prototype"><pre>template &lt;class InputIterator, class T&gt;  typename iterator_traits&lt;InputIterator&gt;::difference_type    count (InputIterator first, InputIterator last, const T&amp; val);</pre></div><div id="I_description">Count appearances of value in range</div>
<section id="description">
Returns the number of elements in the range <code>[first,last)</code> that compare equal to <var>val</var>.<br>
<br>
The function uses <code>operator==</code> to compare the individual elements to <var>val</var>.<br>
<br>
The behavior of this function template is equivalent to:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br></code></pre></td>
<td class="source"><pre><code><var>template</var> &lt;<var>class</var> InputIterator, <var>class</var> T&gt;
  <var>typename</var> iterator_traits&lt;InputIterator&gt;::difference_type
    count (InputIterator first, InputIterator last, <var>const</var> T&amp; val)
{
  <var>typename</var> iterator_traits&lt;InputIterator&gt;::difference_type ret = 0;
  <var>while</var> (first!=last) {
    <var>if</var> (*first == val) ++ret;
    ++first;
  }
  <var>return</var> ret;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>first, last</dt>
<dd><a href="/InputIterator">Input iterators</a> to the initial and final positions of the sequence of elements. The range used is <code>[first,last)</code>, which contains all the elements between <var>first</var> and <var>last</var>, including the element pointed by <var>first</var> but not the element pointed by <var>last</var>.</dd>
<dt>val</dt>
<dd>Value to match.<br>
<samp>T</samp> shall be a type supporting comparisons with the elements pointed by <samp>InputIterator</samp> using <code>operator==</code> (with the elements as left-hand side operands, and <var>val</var> as right-hand side).</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
The number of elements in the range <code>[first,last)</code> that compare equal to <var>val</var>.<br>
The return type (<samp><a href="/iterator_traits">iterator_traits</a>&lt;InputIterator&gt;::difference_type</samp>) is a signed integral type.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br></code></pre></td>
<td class="source"><pre><code><cite>// count algorithm example</cite>
<dfn>#include &lt;iostream&gt;     </dfn><cite>// std::cout</cite>
<dfn>#include &lt;algorithm&gt;    </dfn><cite>// std::count</cite>
<dfn>#include &lt;vector&gt;       </dfn><cite>// std::vector</cite>

<var>int</var> main () {
  <cite>// counting elements in array:</cite>
  <var>int</var> myints[] = {10,20,30,30,20,10,10,20};   <cite>// 8 elements</cite>
  <var>int</var> mycount = std::count (myints, myints+8, 10);
  std::cout &lt;&lt; <kbd>"10 appears "</kbd> &lt;&lt; mycount &lt;&lt; <kbd>" times.\n"</kbd>;

  <cite>// counting elements in container:</cite>
  std::vector&lt;<var>int</var>&gt; myvector (myints, myints+8);
  mycount = std::count (myvector.begin(), myvector.end(), 20);
  std::cout &lt;&lt; <kbd>"20 appears "</kbd> &lt;&lt; mycount  &lt;&lt; <kbd>" times.\n"</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>10 appears 3 times.
20 appears 3 times.
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Linear in the <a href="/distance">distance</a> between <var>first</var> and <var>last</var>: Compares once each element.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The objects in the range <code>[first,last)</code> are accessed (each object is accessed exactly once).<br>
</section>
<br>
<section id="exceptions">
<h3>Exceptions</h3>
Throws if either an element comparison or an operation on an iterator throws.<br>
Note that invalid arguments cause <i>undefined behavior</i>.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/algorithm/for_each/"><b>for_each</b></a></dt><dd>Apply function to range <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/count_if/"><b>count_if</b></a></dt><dd>Return number of elements in range satisfying condition <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/find/"><b>find</b></a></dt><dd>Find value in range <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/replace/"><b>replace</b></a></dt><dd>Replace value in range <span class="typ">(function template)</span></dd></dl>
<div id="CH_bb"></div></div></div>
