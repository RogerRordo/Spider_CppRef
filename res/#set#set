<div id="I_content">
<div class="C_doc">
<div id="I_type">class template</div>
<div id="I_file">&lt;set&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span>set</h1>
<div class="C_prototype"><pre>template &lt; class T,                        // set::key_type/value_type           class Compare = less&lt;T&gt;,        // set::key_compare/value_compare           class Alloc = allocator&lt;T&gt;      // set::allocator_type           &gt; class set;</pre></div><div id="I_description">Set</div>
<section id="description">
Sets are containers that store unique elements following a specific order.<br>
<br>
In a <tt>set</tt>, the value of an element also identifies it (the value is itself the <i>key</i>, of type <tt>T</tt>), and each value must be unique. The value of the elements in a <tt>set</tt> cannot be modified once in the container (the elements are always const), but they can be inserted or removed from the container.<br>
<br>
Internally, the elements in a <tt>set</tt> are always sorted following a specific <i>strict weak ordering</i> criterion indicated by its internal <a href="/set::key_comp">comparison object</a> (of type <tt>Compare</tt>).<br>
<br>
<tt>set</tt> containers are generally slower than <a href="/unordered_set">unordered_set</a> containers to access individual elements by their <i>key</i>, but they allow the direct iteration on subsets based on their order.<br>
<br>
Sets are typically implemented as <i>binary search trees</i>.<br>
</section>
<br>
<section id="properties">
<h3>Container properties</h3>
<dl>
<dt>Associative</dt>
<dd>Elements in associative containers are referenced by their <i>key</i> and not by their absolute position in the container.</dd>
<dt>Ordered</dt>
<dd>The elements in the container follow a strict order at all times. All inserted elements are given a position in this order.</dd>
<dt>Set</dt>
<dd>The value of an element is also the <i>key</i> used to identify it.</dd>
<dt>Unique keys</dt>
<dd>No two elements in the container can have equivalent <i>keys</i>.</dd>
<dt>Allocator-aware</dt>
<dd>The container uses an allocator object to dynamically handle its storage needs.</dd>
</dl>
</section>
<br>
<section id="parameters">
<h3>Template parameters</h3>
<dl>
<dt>T</dt>
<dd>Type of the elements. Each element in a <tt>set</tt> container is also uniquely identified by this value (each value is itself also the element's key).<br>
Aliased as member types <tt>set::key_type</tt> and <tt>set::value_type</tt>.</dd>
<dt>Compare</dt>
<dd>A binary predicate that takes two arguments of the same type as the elements and returns a <tt>bool</tt>. The expression <tt>comp(a,b)</tt>, where <i>comp</i> is an object of this type and <i>a</i> and <i>b</i> are key values, shall return <tt>true</tt> if <i>a</i> is considered to go before <i>b</i> in the <i>strict weak ordering</i> the function defines.<br>
The <tt>set</tt> object uses this expression to determine both the order the elements follow in the container and whether two element keys are equivalent (by comparing them reflexively: they are equivalent if <tt>!comp(a,b) && !comp(b,a)</tt>). No two elements in a <tt>set</tt> container can be equivalent.<br>
This can be a function pointer or a function object (see <a href="/set::set">constructor</a> for an example). This defaults to <tt><a href="/less">less</a>&lt;T&gt;</tt>, which returns the same as applying the <i>less-than operator</i> (<tt>a&lt;b</tt>).<br>
Aliased as member types <tt>set::key_compare</tt> and <tt>set::value_compare</tt>.</dd>
<dt>Alloc</dt>
<dd>Type of the allocator object used to define the storage allocation model. By default, the <a href="/allocator">allocator</a> class template is used, which defines the simplest memory allocation model and is value-independent.<br>
Aliased as member type <tt>set::allocator_type</tt>.</dd>
</dl>
</section>
<br>
<section id="types">
<h3>Member types</h3>
<div class="C_SwitchCases">
<div title="C++98">
<table class="boxed">
<tr><th>member type</th><th>definition</th><th>notes</th></tr>
<tr><td><tt>key_type</tt></td><td>The first template parameter (<tt>T</tt>)</td><td></td></tr>
<tr><td><tt>value_type</tt></td><td>The first template parameter (<tt>T</tt>)</td><td></td></tr>
<tr><td><tt>key_compare</tt></td><td>The second template parameter (<tt>Compare</tt>)</td><td>defaults to: <tt><a href="/less">less</a>&lt;key_type&gt;</tt></td></tr>
<tr><td><tt>value_compare</tt></td><td>The second template parameter (<tt>Compare</tt>)</td><td>defaults to: <tt><a href="/less">less</a>&lt;value_type&gt;</tt></td></tr>
<tr><td><tt>allocator_type</tt></td><td>The third template parameter (<tt>Alloc</tt>)</td><td>defaults to: <tt><a href="/allocator">allocator</a>&lt;value_type&gt;</tt></td></tr>
<tr><td><tt>reference</tt></td><td><tt>allocator_type::reference</tt></td><td>for the default <a href="/allocator">allocator</a>: <tt>value_type&</tt></td></tr>
<tr><td><tt>const_reference</tt></td><td><tt>allocator_type::const_reference</tt></td><td>for the default <a href="/allocator">allocator</a>: <tt>const value_type&</tt></td></tr>
<tr><td><tt>pointer</tt></td><td><tt>allocator_type::pointer</tt></td><td>for the default <a href="/allocator">allocator</a>: <tt>value_type*</tt></td></tr>
<tr><td><tt>const_pointer</tt></td><td><tt>allocator_type::const_pointer</tt></td><td>for the default <a href="/allocator">allocator</a>: <tt>const value_type*</tt></td></tr>
<tr><td><tt>iterator</tt></td><td>a <a href="/BidirectionalIterator">bidirectional iterator</a> to <tt>value_type</tt></td><td>convertible to <tt>const_iterator</tt></td></tr>
<tr><td><tt>const_iterator</tt></td><td>a <a href="/BidirectionalIterator">bidirectional iterator</a> to <tt>const value_type</tt></td><td></td></tr>
<tr><td><tt>reverse_iterator</tt></td><td><tt><a href="/reverse_iterator">reverse_iterator</a>&lt;iterator&gt;</tt></td><td></td></tr>
<tr><td><tt>const_reverse_iterator</tt></td><td><tt><a href="/reverse_iterator">reverse_iterator</a>&lt;const_iterator&gt;</tt></td><td></td></tr>
<tr><td><tt>difference_type</tt></td><td>a signed integral type, identical to: <tt>iterator_traits&lt;iterator&gt;::difference_type</tt></td><td>usually the same as <a href="/ptrdiff_t">ptrdiff_t</a></td></tr>
<tr><td><tt>size_type</tt></td><td>an unsigned integral type that can represent any non-negative value of <tt>difference_type</tt></td><td>usually the same as <a href="/size_t">size_t</a></td></tr>
</table>
</div>
<div title="C++11">
<table class="boxed">
<tr><th>member type</th><th>definition</th><th>notes</th></tr>
<tr><td><tt>key_type</tt></td><td>The first template parameter (<tt>T</tt>)</td><td></td></tr>
<tr><td><tt>value_type</tt></td><td>The first template parameter (<tt>T</tt>)</td><td></td></tr>
<tr><td><tt>key_compare</tt></td><td>The second template parameter (<tt>Compare</tt>)</td><td>defaults to: <tt><a href="/less">less</a>&lt;key_type&gt;</tt></td></tr>
<tr><td><tt>value_compare</tt></td><td>The second template parameter (<tt>Compare</tt>)</td><td>defaults to: <tt><a href="/less">less</a>&lt;value_type&gt;</tt></td></tr>
<tr><td><tt>allocator_type</tt></td><td>The third template parameter (<tt>Alloc</tt>)</td><td>defaults to: <tt><a href="/allocator">allocator</a>&lt;value_type&gt;</tt></td></tr>
<tr><td><tt>reference</tt></td><td><tt>value_type&</tt></td><td></td></tr>
<tr><td><tt>const_reference</tt></td><td><tt>const value_type&</tt></td><td></td></tr>
<tr><td><tt>pointer</tt></td><td><tt><a href="/allocator_traits">allocator_traits</a>&lt;allocator_type&gt;::pointer</tt></td><td>for the default <a href="/allocator">allocator</a>: <tt>value_type*</tt></td></tr>
<tr><td><tt>const_pointer</tt></td><td><tt><a href="/allocator_traits">allocator_traits</a>&lt;allocator_type&gt;::const_pointer</tt></td><td>for the default <a href="/allocator">allocator</a>: <tt>const value_type*</tt></td></tr>
<tr><td><tt>iterator</tt></td><td>a <a href="/BidirectionalIterator">bidirectional iterator</a> to <tt>const value_type</tt></td><td>* convertible to <tt>const_iterator</tt></td></tr>
<tr><td><tt>const_iterator</tt></td><td>a <a href="/BidirectionalIterator">bidirectional iterator</a> to <tt>const value_type</tt></td><td>*</td></tr>
<tr><td><tt>reverse_iterator</tt></td><td><tt><a href="/reverse_iterator">reverse_iterator</a>&lt;iterator&gt;</tt></td><td>*</td></tr>
<tr><td><tt>const_reverse_iterator</tt></td><td><tt><a href="/reverse_iterator">reverse_iterator</a>&lt;const_iterator&gt;</tt></td><td>*</td></tr>
<tr><td><tt>difference_type</tt></td><td>a signed integral type, identical to:<br>
<tt>iterator_traits&lt;iterator&gt;::difference_type</tt></td><td>usually the same as <a href="/ptrdiff_t">ptrdiff_t</a></td></tr>
<tr><td><tt>size_type</tt></td><td>an unsigned integral type that can represent any non-negative value of <tt>difference_type</tt></td><td>usually the same as <a href="/size_t">size_t</a></td></tr>
</table>
*Note: All iterators in a <a href="/set">set</a> point to const elements. Whether the <tt>const_</tt> member type is the same type as its non-<tt>const_</tt> counterpart depends on the particular library implementation, but programs should not rely on them being different to overload functions: <tt>const_iterator</tt> is more generic, since <tt>iterator</tt> is always convertible to it.<br>
</div>
</div>
</section>
<br>
<section id="functions">
<h3>Member functions</h3>
<dl class="links"><dt><a href= "/reference/set/set/set/"><b>(constructor)</b></a></dt><dd>Construct set <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/set/set/~set/"><b>(destructor)</b></a></dt><dd>Set destructor <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/set/set/operator=/"><b>operator=</b></a></dt><dd>Copy container content <span class="typ">(public member function)</span></dd></dl>
<br>
<b>Iterators</b>:<br>
<dl class="links"><dt><a href= "/reference/set/set/begin/"><b>begin</b></a></dt><dd>Return iterator to beginning <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/set/set/end/"><b>end</b></a></dt><dd>Return iterator to end <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/set/set/rbegin/"><b>rbegin</b></a></dt><dd>Return reverse iterator to reverse beginning <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/set/set/rend/"><b>rend</b></a></dt><dd>Return reverse iterator to reverse end <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/set/set/cbegin/"><b>cbegin <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Return const_iterator to beginning <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/set/set/cend/"><b>cend <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Return const_iterator to end <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/set/set/crbegin/"><b>crbegin <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Return const_reverse_iterator to reverse beginning <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/set/set/crend/"><b>crend <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Return const_reverse_iterator to reverse end <span class="typ">(public member function)</span></dd></dl>
<br>
<b>Capacity</b>:<br>
<dl class="links"><dt><a href= "/reference/set/set/empty/"><b>empty</b></a></dt><dd>Test whether container is empty <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/set/set/size/"><b>size</b></a></dt><dd>Return container size <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/set/set/max_size/"><b>max_size</b></a></dt><dd>Return maximum size <span class="typ">(public member function)</span></dd></dl>
<br>
<b>Modifiers</b>:<br>
<dl class="links"><dt><a href= "/reference/set/set/insert/"><b>insert</b></a></dt><dd>Insert element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/set/set/erase/"><b>erase</b></a></dt><dd>Erase elements <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/set/set/swap/"><b>swap</b></a></dt><dd>Swap content <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/set/set/clear/"><b>clear</b></a></dt><dd>Clear content <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/set/set/emplace/"><b>emplace <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Construct and insert element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/set/set/emplace_hint/"><b>emplace_hint <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Construct and insert element with hint <span class="typ">(public member function)</span></dd></dl>
<br>
<b>Observers</b>:<br>
<dl class="links"><dt><a href= "/reference/set/set/key_comp/"><b>key_comp</b></a></dt><dd>Return comparison object <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/set/set/value_comp/"><b>value_comp</b></a></dt><dd>Return comparison object <span class="typ">(public member function)</span></dd></dl>
<br>
<b>Operations</b>:<br>
<dl class="links"><dt><a href= "/reference/set/set/find/"><b>find</b></a></dt><dd>Get iterator to element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/set/set/count/"><b>count</b></a></dt><dd>Count elements with a specific value <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/set/set/lower_bound/"><b>lower_bound</b></a></dt><dd>Return iterator to lower bound <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/set/set/upper_bound/"><b>upper_bound</b></a></dt><dd>Return iterator to upper bound <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/set/set/equal_range/"><b>equal_range</b></a></dt><dd>Get range of equal elements <span class="typ">(public member function)</span></dd></dl>
<br>
<b>Allocator</b>:<br>
<dl class="links"><dt><a href= "/reference/set/set/get_allocator/"><b>get_allocator</b></a></dt><dd>Get allocator <span class="typ">(public member function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
