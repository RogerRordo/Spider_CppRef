<div id="I_content">
<div class="C_doc">
<div id="I_type">function template</div>
<div id="I_file">&lt;algorithm&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span>fill_n</h1>
<div class="C_prototype"><div class="C_SwitchCases">
<div title="C++98">
<pre>template &lt;class OutputIterator, class Size, class T&gt;  void fill_n (OutputIterator first, Size n, const T&amp; val);</pre></div>
<div title="C++11" class="on">
<pre>template &lt;class OutputIterator, class Size, class T&gt;  OutputIterator fill_n (OutputIterator first, Size n, const T&amp; val);</pre></div>
</div>
</div><div id="I_description">Fill sequence with value</div>
<section id="description">
Assigns <var>val</var> to the first <var>n</var> elements of the sequence pointed by <var>first</var>.<br>
<br>
The behavior of this function template is equivalent to:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br></code></pre></td>
<td class="source"><pre><code><var>template</var> &lt;<var>class</var> OutputIterator, <var>class</var> Size, <var>class</var> T&gt;
  OutputIterator fill_n (OutputIterator first, Size n, <var>const</var> T&amp; val)
{
  <var>while</var> (n&gt;0) {
    *first = val;
    ++first; --n;
  }
  <var>return</var> first;     <cite>// since C++11</cite>
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>first</dt>
<dd><a href="/OutputIterator">Output iterators</a> to the initial position in a sequence of at least <var>n</var> elements that support being assigned a value of type <samp>T</samp>.</dd>
<dt>n</dt>
<dd>Number of elements to fill.<br>
<div class="C_SwitchCases">
<div title="C++98">
This value shall not be negative.<br>
</div>
<div title="C++11">
If negative, the function does nothing.<br>
</div>
</div>
<samp>Size</samp> shall be (convertible to) an integral type.</dd>
<dt>val</dt>
<dd>Value to be used to fill the range.</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
<div class="C_SwitchCases">
<div title="C++98">
none<br>
</div>
<div title="C++11">
An iterator pointing to the element that follows the last element filled.<br>
</div>
</div>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br></code></pre></td>
<td class="source"><pre><code><cite>// fill_n example</cite>
<dfn>#include &lt;iostream&gt;     </dfn><cite>// std::cout</cite>
<dfn>#include &lt;algorithm&gt;    </dfn><cite>// std::fill_n</cite>
<dfn>#include &lt;vector&gt;       </dfn><cite>// std::vector</cite>

<var>int</var> main () {
  std::vector&lt;<var>int</var>&gt; myvector (8,10);        <cite>// myvector: 10 10 10 10 10 10 10 10</cite>

  std::fill_n (myvector.begin(),4,20);     <cite>// myvector: 20 20 20 20 10 10 10 10</cite>
  std::fill_n (myvector.begin()+3,3,33);   <cite>// myvector: 20 20 20 33 33 33 10 10</cite>

  std::cout &lt;&lt; <kbd>"myvector contains:"</kbd>;
  <var>for</var> (std::vector&lt;<var>int</var>&gt;::iterator it=myvector.begin(); it!=myvector.end(); ++it)
    std::cout &lt;&lt; <kbd>' '</kbd> &lt;&lt; *it;
  std::cout &lt;&lt; <kbd>'\n'</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>myvector contains: 20 20 20 33 33 33 10 10
</samp></pre></td></tr></table></div>
</Section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Linear in <var>n</var>: Assigns a value to each element.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The <var>n</var> first objects at the range pointed by <var>first</var> are modified (each object is modified exactly once).<br>
</section>
<br>
<section id="exceptions">
<h3>Exceptions</h3>
Throws if either an element assignment or an operation on an iterator throws.<br>
Note that invalid arguments cause <i>undefined behavior</i>.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/algorithm/fill/"><b>fill</b></a></dt><dd>Fill range with value <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/generate_n/"><b>generate_n</b></a></dt><dd>Generate values for sequence with function <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/replace/"><b>replace</b></a></dt><dd>Replace value in range <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/for_each/"><b>for_each</b></a></dt><dd>Apply function to range <span class="typ">(function template)</span></dd></dl>
<div id="CH_bb"></div></div></div>
