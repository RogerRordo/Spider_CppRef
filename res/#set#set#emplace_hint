<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;set&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/set/set/">set</a>::emplace_hint<span class="C_ico cpp11warning" title="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it." alt="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it."></span></h1>
<div class="C_prototype"><pre>template &lt;class... Args&gt;  iterator emplace_hint (const_iterator position, Args&amp;&amp;... args);</pre></div><div id="I_description">Construct and insert element with hint</div>
<section id="description">
Inserts a new element in the <a href="/set">set</a>, if unique, with a hint on the insertion <i>position</i>. This new element is constructed in place using <i>args</i> as the arguments for its construction.<br>
<br>
The insertion only takes place if no other element in the container is equivalent to the one being emplaced (elements in a <a href="/set">set</a> container are unique).<br>
<br>
If inserted, this effectively increases the container <a href="/set::size">size</a> by one.<br>
<br>
The value in <i>position</i> is used as a hint on the insertion point. The element will nevertheless be inserted at its corresponding position following the order described by its internal <a href="/set::key_comp">comparison object</a>, but this hint is used by the function to begin its search for the insertion point, speeding up the process considerably when the actual insertion point is either <i>position</i> or close to it.<br>
<br>
The element is constructed in-place by calling <a href="/allocator_traits::construct">allocator_traits::construct</a> with <i>args</i> forwarded.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>position</dt>
<dd>Hint for the position where the element can be inserted.<br>
The function optimizes its insertion time if <i>position</i> points to the element that will follow the inserted element (or to the <a href="/set::end">end</a>, if it would be the last).<br>
Notice that this does not force the new element to be inserted at that position within the <a href="/set">set</a> container (the elements in a <a href="/set">set</a> always follow a specific order).<br>
<tt>const_iterator</tt> is a member type, defined as a <a href="/BidirectionalIterator">bidirectional iterator</a> type that points to elements.</dd>
<dt>args</dt>
<dd>Arguments forwarded to construct the new element.</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
If the function successfully inserts the element (because no equivalent element existed already in the <a href="/set">set</a>), the function returns an iterator to the newly inserted element.<br>
<br>
Otherwise, it returns an iterator to the equivalent element within the container.<br>
<br>
Member type <tt>iterator</tt> is a <a href="/BidirectionalIterator">bidirectional iterator</a> type that points to an element.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br></code></pre></td>
<td class="source"><pre><code><cite>// set::emplace_hint</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;set&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>

<var>int</var> main ()
{
  std::set&lt;std::string&gt; myset;
  <var>auto</var> it = myset.cbegin();

  myset.emplace_hint (it,<kbd>"alpha"</kbd>);
  it = myset.emplace_hint (myset.cend(),<kbd>"omega"</kbd>);
  it = myset.emplace_hint (it,<kbd>"epsilon"</kbd>);
  it = myset.emplace_hint (it,<kbd>"beta"</kbd>);

  std::cout &lt;&lt; <kbd>"myset contains:"</kbd>;
  <var>for</var> (<var>const</var> std::string&amp; x: myset)
    std::cout &lt;&lt; <kbd>' '</kbd> &lt;&lt; x;
  std::cout &lt;&lt; <kbd>'\n'</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>myset contains: alpha beta epsilon omega
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Generally, logarithmic in the container <a href="/set::size">size</a>.<br>
Amortized constant if the insertion point for the element is <i>position</i>.<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
No changes.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The container is modified.<br>
Concurrently accessing existing elements is safe, although iterating ranges in the container is not.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
<b>Strong guarantee:</b> if an exception is thrown, there are no changes in the container.<br>
If <a href="/allocator_traits::construct">allocator_traits::construct</a> is not supported with the appropriate arguments for the element constructions, or if an invalid <i>position</i> is specified, it causes <i>undefined behavior</i>.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/set/set/emplace/"><b>set::emplace</b></a></dt><dd>Construct and insert element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/set/set/insert/"><b>set::insert</b></a></dt><dd>Insert element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/set/set/erase/"><b>set::erase</b></a></dt><dd>Erase elements <span class="typ">(public member function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
