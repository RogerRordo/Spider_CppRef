<div id="I_content">
<div class="C_doc">
<div id="I_type">function template</div>
<div id="I_file">&lt;algorithm&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span>find_first_of</h1>
<div class="C_prototype"><div class="C_SwitchCases">
<div title="C++98">
<table><tr class="odd"><th>equality (1)</th><td><pre>template &lt;class ForwardIterator1, class ForwardIterator2&gt;   ForwardIterator1 find_first_of (ForwardIterator1 first1, ForwardIterator1 last1,                                   ForwardIterator2 first2, ForwardIterator2 last2);</pre></td></tr><tr class="even"><th>predicate (2)</th><td><pre>template &lt;class ForwardIterator1, class ForwardIterator2, class BinaryPredicate&gt;   ForwardIterator1 find_first_of (ForwardIterator1 first1, ForwardIterator1 last1,                                   ForwardIterator2 first2, ForwardIterator2 last2,                                   BinaryPredicate pred);</pre></td></tr></table></div>
<div title="C++11" class="on">
<table><tr class="odd"><th>equality (1)</th><td><pre>template &lt;class InputIterator, class ForwardIterator&gt;   InputIterator find_first_of (InputIterator first1, InputIterator last1,                                   ForwardIterator first2, ForwardIterator last2);</pre></td></tr><tr class="even"><th>predicate (2)</th><td><pre>template &lt;class InputIterator, class ForwardIterator, class BinaryPredicate&gt;   InputIterator find_first_of (InputIterator first1, InputIterator last1,                                   ForwardIterator first2, ForwardIterator last2,                                   BinaryPredicate pred);</pre></td></tr></table></div>
</div>
</div><div id="I_description">Find element from set in range</div>
<section id="description">
Returns an iterator to the first element in the range <code>[first1,last1)</code> that matches any of the elements in <code>[first2,last2)</code>. If no such element is found, the function returns <var>last1</var>.<br>
<br>
The elements in <code>[first1,last1)</code> are sequentially compared to each of the values in <code>[first2,last2)</code> using <code>operator==</code> (or <var>pred</var>, in version <i>(2)</i>), until a pair matches.<br>
<br>
The behavior of this function template is equivalent to:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br></code></pre></td>
<td class="source"><pre><code><var>template</var>&lt;<var>class</var> InputIterator, <var>class</var> ForwardIterator&gt;
  InputIterator find_first_of ( InputIterator first1, InputIterator last1,
                                ForwardIterator first2, ForwardIterator last2)
{
  <var>while</var> (first1!=last1) {
    <var>for</var> (ForwardIterator it=first2; it!=last2; ++it) {
      <var>if</var> (*it==*first1)          <cite>// or: if (pred(*it,*first)) for version (2)</cite>
        <var>return</var> first1;
    }
    ++first1;
  }
  <var>return</var> last1;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>first1, last1</dt>
<dd>
<div class="C_SwitchCases">
<div title="C++98">
<a href="/ForwardIterator">Forward iterators</a> to the initial and final positions of the searched sequence. The range used is <code>[first1,last1)</code>, which contains all the elements between <var>first1</var> and <var>last1</var>, including the element pointed by <var>first1</var> but not the element pointed by <var>last1</var>.<br>
</div>
<div title="C++11">
<a href="/InputIterator">Input iterators</a> to the initial and final positions of the searched sequence. The range used is <code>[first1,last1)</code>, which contains all the elements between <var>first1</var> and <var>last1</var>, including the element pointed by <var>first1</var> but not the element pointed by <var>last1</var>.<br>
</div>
</div>
</dd>
<dt>first2, last2</dt>
<dd><a href="/ForwardIterator">Forward iterators</a> to the initial and final positions of the element values to be searched for. The range used is <code>[first2,last2)</code>.<br>
For <i>(1)</i>, the elements in both ranges shall be of types comparable using <code>operator==</code> (with the elements of the first range as left-hand side operands, and those of the second as right-hand side operands).<br>
</dd>
<dt>pred</dt>
<dd>Binary function that accepts two elements as arguments (one of each of the two sequences, in the same order), and returns a value convertible to <code>bool</code>. The value returned indicates whether the elements are considered to match in the context of this function.<br>
The function shall not modify any of its arguments.<br>
This can either be a function pointer or a function object.</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
An iterator to the first element in <code>[first1,last1)</code> that is part of <code>[first2,last2)</code>.<br>
If no matches are found, the function returns <var>last1</var>.<br>
<div class="C_SwitchCases">
<div title="C++98">
If <code>[first2,last2)</code> is an empty range, the result is unspecified.<br>
</div>
<div title="C++11">
If <code>[first2,last2)</code> is an empty range, the function returns <var>last1</var>.<br>
</div>
</div>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br></code></pre></td>
<td class="source"><pre><code><cite>// find_first_of example</cite>
<dfn>#include &lt;iostream&gt;     </dfn><cite>// std::cout</cite>
<dfn>#include &lt;algorithm&gt;    </dfn><cite>// std::find_first_of</cite>
<dfn>#include &lt;vector&gt;       </dfn><cite>// std::vector</cite>
<dfn>#include &lt;cctype&gt;       </dfn><cite>// std::tolower</cite>

<var>bool</var> comp_case_insensitive (<var>char</var> c1, <var>char</var> c2) {
  <var>return</var> (std::tolower(c1)==std::tolower(c2));
}

<var>int</var> main () {
  <var>int</var> mychars[] = {<kbd>'a'</kbd>,<kbd>'b'</kbd>,<kbd>'c'</kbd>,<kbd>'A'</kbd>,<kbd>'B'</kbd>,<kbd>'C'</kbd>};
  std::vector&lt;<var>char</var>&gt; haystack (mychars,mychars+6);
  std::vector&lt;<var>char</var>&gt;::iterator it;

  <var>int</var> needle[] = {<kbd>'A'</kbd>,<kbd>'B'</kbd>,<kbd>'C'</kbd>};

  <cite>// using default comparison:</cite>
  it = find_first_of (haystack.begin(), haystack.end(), needle, needle+3);

  <var>if</var> (it!=haystack.end())
    std::cout &lt;&lt; <kbd>"The first match is: "</kbd> &lt;&lt; *it &lt;&lt; <kbd>'\n'</kbd>;

  <cite>// using predicate comparison:</cite>
  it = find_first_of (haystack.begin(), haystack.end(),
                      needle, needle+3, comp_case_insensitive);

  <var>if</var> (it!=haystack.end())
    std::cout &lt;&lt; <kbd>"The first match is: "</kbd> &lt;&lt; *it &lt;&lt; <kbd>'\n'</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>The first match is: A
The first match is: a
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Up to linear in <code>count1*count2</code> (where <var>countX</var> is the <a href="/distance">distance</a> between <var>firstX</var> and <var>lastX</var>): Compares elements until a match is found.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
Some (or all) of the objects in both ranges are accessed (once at most in the case of <code>[first1,last1)</code>, and possibly more than once in <code>[first2,last2)</code>).<br>
</section>
<br>
<section id="exceptions">
<h3>Exceptions</h3>
Throws if any element comparison (or <var>pred</var>) throws or if any of the operations on iterators throws.<br>
Note that invalid arguments cause <i>undefined behavior</i>.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/algorithm/search/"><b>search</b></a></dt><dd>Search range for subsequence <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/find/"><b>find</b></a></dt><dd>Find value in range <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/find_if/"><b>find_if</b></a></dt><dd>Find element in range <span class="typ">(function template)</span></dd></dl>
<div id="CH_bb"></div></div></div>
