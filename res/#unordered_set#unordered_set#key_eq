<div id="I_content">
<div class="C_doc">
<div id="I_type">public member type</div>
<div id="I_file">&lt;unordered_set&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/unordered_set/unordered_set/">unordered_set</a>::key_eq<span class="C_ico cpp11warning" title="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it." alt="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it."></span></h1>
<div class="C_prototype"><pre>key_equal key_eq() const;</pre></div><div id="I_description">Get key equivalence predicate</div>
<section id="description">
Returns the key equivalence comparison predicate used by the <a href="/unordered_set">unordered_set</a> container.<br>
<br>
The <dfn>key equivalence comparison</dfn> is a predicate that takes the value of two elements as arguments and returns a <tt>bool</tt> value indicating whether they are to be considered equivalent. It is adopted by the container on construction (see <a href="/unordered_set::unordered_set">unordered_set's constructor</a> for more info). By default, it is <a href="/equal_to">equal_to&lt;key_type&gt;</a>, which returns the same as applying the equal-to operator (<tt>==</tt>) to the arguments.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
none<br>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
The key equality comparison object.<br>
<br>
Member type <tt>key_equal</tt> is the type of the key equality comparison predicate used by the container, defined in <a href="/unordered_set">unordered_set</a> as an alias of its third template parameter (<tt>Pred</tt>).<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br></code></pre></td>
<td class="source"><pre><code><cite>// unordered_set::key_eq</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>
<dfn>#include &lt;unordered_set&gt;</dfn>

<var>int</var> main ()
{
  std::unordered_set&lt;std::string&gt; myset;

  <var>bool</var> case_insensitive = myset.key_eq()(<kbd>"checking"</kbd>,<kbd>"CHECKING"</kbd>);

  std::cout &lt;&lt; <kbd>"myset.key_eq() is "</kbd>;
  std::cout &lt;&lt; ( case_insensitive ? <kbd>"case insensitive"</kbd> : <kbd>"case sensitive"</kbd> );
  std::cout &lt;&lt; std::endl;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>myset.key_eq() is case sensitive
</samp></pre></td></tr></table></div>
<br>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Constant.<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
No changes.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/unordered_set/unordered_set/hash_function/"><b>unordered_set::hash_function</b></a></dt><dd>Get hash function <span class="typ">(public member type)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_set/unordered_set/get_allocator/"><b>unordered_set::get_allocator</b></a></dt><dd>Get allocator <span class="typ">(public member function)</span></dd></dl>
</section>
<div id="CH_bb"></div></div></div>
