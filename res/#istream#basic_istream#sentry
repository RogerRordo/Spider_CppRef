<div id="I_content">
<div class="C_doc">
<div id="I_type">public member class</div>
<div id="I_file">&lt;istream&gt; &lt;iostream&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/istream/basic_istream/">basic_istream</a>::sentry</h1>
<div class="C_prototype"><pre>class sentry;</pre></div><div id="I_description">Prepare stream for input</div>
<section id="description">
Member class that performs a series of operations before and after each input operation:<br>
<br>
Its constructor performs the following operations on the stream object passed as its argument (in the same order):<br>
<br>
<ul>
<li>If any of its <i><a href="/basic_ios::rdstate">internal error flags</a></i> is set, the function sets its <samp><a href="/ios_base::failbit">failbit</a></samp> flag and returns.</li>
<li>If it is a <i><a href="/basic_ios::tie">tied stream</a></i>, the function <i><a href="/basic_ostream::flush">flushes</a></i> the stream it is tied to (if its output buffer is not empty). The class may implement ways for library functions to defer this flush until the next call to <samp><a href="/basic_streambuf::overflow">overflow</a></samp> by its <i><a href="/basic_ios::rdbuf">associated stream buffer</a></i>.</li>
<li>If its <samp><a href="/skipws">skipws</a></samp> format flag is set, and the constructor is not passed <code>true</code> as second argument (<var>noskipws</var>), all leading <i><a href="/isspace">whitespace characters</a></i> (locale-specific) are extracted and discarded. If this operation exhausts the source of characters, the function sets both the <samp><a href="/ios_base::failbit">failbit</a></samp> and <samp><a href="/ios_base::eofbit">eofbit</a></samp> <i><a href="/basic_ios::rdstate">internal state flags</a></i></li>
</ul>
In case of failure during construction, it may set the stream's <samp><a href="/ios_base::failbit">failbit</a></samp> flag.<br>
<br>
There are no required operations to be performed by its destructor. But implementations may use the construction and destruction of <samp>sentry</samp> objects to perform additional initialization or cleanup operations on the stream common to all input operations.<br>
<br>
All member functions that perform an input operation automatically construct an object of this class and then evaluate it (which returns <code>true</code> if no <i><a href="/basic_ios::rdstate">state flag</a></i> was set). Only if this object evaluates to <code>true</code>, the function attempts the input operation (otherwise, it returns without performing it). Before returning, the function destroys the <samp>sentry</samp> object.<br>
<br>
The <samp><a href="/basic_istream::operator&gt;&gt;">operator&gt;&gt;</a></samp> formatted input operations construct the <samp>sentry</samp> object by passing <code>false</code> as second argument (which skips leading whitespaces). All other member functions that construct a <samp>sentry</samp> object pass <code>true</code> as second argument (which does not skip leading whitespaces).<br>
<br>
The structure of this class is:<br>
<div class="C_SwitchCases">
<div title="C++98">
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br></code></pre></td>
<td class="source"><pre><code><var>class</var> sentry {
<var>public</var>:
  <var>explicit</var> sentry (basic_istream&amp; is, <var>bool</var> noskipws = <var>false</var>);
  ~sentry();
  <var>operator</var> <var>bool</var>() <var>const</var>;
<var>private</var>:
  sentry (<var>const</var> sentry&amp;);             <cite>// not defined</cite>
  sentry&amp; <var>operator</var>= (<var>const</var> sentry&amp;);  <cite>// not defined</cite>
};</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
</div>
<div title="C++11">
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br></code></pre></td>
<td class="source"><pre><code><var>class</var> sentry {
<var>public</var>:
  <var>explicit</var> sentry (basic_istream&amp; is, <var>bool</var> noskipws = <var>false</var>);
  ~sentry();
  <var>explicit</var> <var>operator</var> <var>bool</var>() <var>const</var>;
  sentry (<var>const</var> sentry&amp;) = <var>delete</var>;
  sentry&amp; <var>operator</var>= (<var>const</var> sentry&amp;) = <var>delete</var>;
};</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
</div>
</div>
</section>
<br>
<section id="parameters">
<h3>Members</h3>
<dl>
<dt>explicit sentry (basic_istream& is, bool noskipws = false);</dt>
<dd>
Prepares the output stream for an output operation, performing the actions described above.<br>
</dd>
<dt>~sentry();</dt>
<dd>Performs no operations (implementation-defined).</dd>
<dt>explicit operator bool() const;</dt>
<dd>When the object is evaluated, it returns a <code>bool</code> value indicating whether the <samp>sentry</samp> constructor successfully performed all its tasks: If at some point of the construction process, an <i><a href="/basic_ios::rdstate">internal error flags</a></i> was set, this function always returns <code>false</code> for that object.</dd>
</dl>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br></code></pre></td>
<td class="source"><pre><code><cite>// istream::sentry example</cite>
<dfn>#include &lt;iostream&gt;     </dfn><cite>// std::istream, std::cout</cite>
<dfn>#include &lt;string&gt;       </dfn><cite>// std::string</cite>
<dfn>#include &lt;sstream&gt;      </dfn><cite>// std::stringstream</cite>
<dfn>#include &lt;locale&gt;       </dfn><cite>// std::isspace, std::isdigit</cite>

<var>struct</var> Phone {
  std::string digits;
};

<cite>// custom extractor for objects of type Phone</cite>
std::istream&amp; <var>operator</var>&gt;&gt;(std::istream&amp; is, Phone&amp; tel)
{
    std::istream::sentry s(is);
    <var>if</var> (s) <var>while</var> (is.good()) {
      <var>char</var> c = is.get();
      <var>if</var> (std::isspace(c,is.getloc())) <var>break</var>;
      <var>if</var> (std::isdigit(c,is.getloc())) tel.digits+=c;
    }
    <var>return</var> is;
}

<var>int</var> main () {
  std::stringstream parseme (<kbd>"   (555)2326"</kbd>);
  Phone myphone;
  parseme &gt;&gt; myphone;
  std::cout &lt;&lt; <kbd>"digits parsed: "</kbd> &lt;&lt; myphone.digits &lt;&lt; <kbd>'\n'</kbd>;
  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>
digits parsed: 5552326
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/istream/basic_istream/operator>>/"><b>basic_istream::operator&gt;&gt;</b></a></dt><dd>Extract formatted input <span class="typ">(public member function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
