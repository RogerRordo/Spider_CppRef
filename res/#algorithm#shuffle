<div id="I_content">
<div class="C_doc">
<div id="I_type">function template</div>
<div id="I_file">&lt;algorithm&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span>shuffle<span class="C_ico cpp11warning" title="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it." alt="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it."></span></h1>
<div class="C_prototype"><pre>template &lt;class RandomAccessIterator, class URNG&gt;  void shuffle (RandomAccessIterator first, RandomAccessIterator last, URNG&amp;&amp; g);</pre></div><div id="I_description">Randomly rearrange elements in range using generator</div>
<section id="description">
Rearranges the elements in the range <code>[first,last)</code> randomly, using <var>g</var> as <i>uniform random number generator</i>.<br>
<br>
The function swaps the value of each element with that of some other randomly picked element. The function determines the element picked by calling <code>g()</code>.<br>
<br>
This function works with standard generators as those defined in <a href="/&lt;random&gt;">&lt;random&gt;</a>. To shuffle the elements of the range without such a generator, see <a href="/random_shuffle">random_shuffle</a> instead.<br>
<br>
The behavior of this function template is equivalent to:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br></code></pre></td>
<td class="source"><pre><code><var>template</var> &lt;<var>class</var> RandomAccessIterator, <var>class</var> URNG&gt;
  <var>void</var> shuffle (RandomAccessIterator first, RandomAccessIterator last, URNG&amp;&amp; g)
{
  <var>for</var> (<var>auto</var> i=(last-first)-1; i&gt;0; --i) {
    std::uniform_int_distribution&lt;<var>decltype</var>(i)&gt; d(0,i);
    swap (first[i], first[d(g)]);
  }
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>first, last</dt>
<dd><a href="/ForwardIterator">Forward iterators</a> to the initial and final positions of the sequence to be shuffled. The range used is <code>[first,last)</code>, which contains all the elements between <var>first</var> and <var>last</var>, including the element pointed by <var>first</var> but not the element pointed by <var>last</var>.<br>
<samp>ForwardIterator</samp> shall point to a type for which <samp><a href="/swap">swap</a></samp> is defined and swaps the value of its arguments.<br>
</dd>
<dt>g</dt>
<dd>A uniform random number generator, used as the source of randomness.<br>
<samp>URNG</samp> shall be a <i>uniform random number generator</i>, such as one of the standard generator classes (see <a href="/&lt;random&gt;">&lt;random&gt;</a> for more information).</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
none<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br></code></pre></td>
<td class="source"><pre><code><cite>// shuffle algorithm example</cite>
<dfn>#include &lt;iostream&gt;     </dfn><cite>// std::cout</cite>
<dfn>#include &lt;algorithm&gt;    </dfn><cite>// std::shuffle</cite>
<dfn>#include &lt;array&gt;        </dfn><cite>// std::array</cite>
<dfn>#include &lt;random&gt;       </dfn><cite>// std::default_random_engine</cite>
<dfn>#include &lt;chrono&gt;       </dfn><cite>// std::chrono::system_clock</cite>

<var>int</var> main () {
  std::array&lt;<var>int</var>,5&gt; foo {1,2,3,4,5};

  <cite>// obtain a time-based seed:</cite>
  <var>unsigned</var> seed = std::chrono::system_clock::now().time_since_epoch().count();

  shuffle (foo.begin(), foo.end(), std::default_random_engine(seed));

  std::cout &lt;&lt; <kbd>"shuffled elements:"</kbd>;
  <var>for</var> (<var>int</var>&amp; x: foo) std::cout &lt;&lt; <kbd>' '</kbd> &lt;&lt; x;
  std::cout &lt;&lt; <kbd>'\n'</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Possible output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>shuffled elements: 3 1 4 2 5
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Linear in the <a href="/distance">distance</a> between <var>first</var> and <var>last</var> minus one: Obtains random values and swaps elements.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The objects in the range <code>[first,last)</code> are modified.<br>
</section>
<br>
<section id="exceptions">
<h3>Exceptions</h3>
Throws if any of the random number generations, the element swaps or the operations on iterators throws.<br>
Note that invalid arguments cause <i>undefined behavior</i>.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/algorithm/random_shuffle/"><b>random_shuffle</b></a></dt><dd>Randomly rearrange elements in range <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/random/default_random_engine/"><b>default_random_engine</b></a></dt><dd>Default random engine <span class="typ">(class)</span></dd></dl><dl class="links"><dt><a href= "/reference/utility/swap/"><b>swap</b></a></dt><dd>Exchange values of two objects <span class="typ">(function template)</span></dd></dl>
<div id="CH_bb"></div></div></div>
