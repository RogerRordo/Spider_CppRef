<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;map&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/map/map/">map</a>::get_allocator</h1>
<div class="C_prototype"><div class="C_SwitchCases">
<div title="C++98">
<pre>allocator_type get_allocator() const;</pre></div>
<div title="C++11" class="on">
<pre>allocator_type get_allocator() const noexcept;</pre></div>
</div>
</div><div id="I_description">Get allocator</div>
<section id="description">
Returns a copy of the allocator object associated with the <a href="/map">map</a>.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
none<br>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
The allocator.<br>
<br>
Member type <tt>allocator_type</tt> is the type of the allocator used by the container, defined in <a href="/map">map</a> as an alias of its fourth template parameter (<tt>Alloc</tt>).<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br></code></pre></td>
<td class="source"><pre><code><cite>// map::get_allocator</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;map&gt;</dfn>

<var>int</var> main ()
{
  <var>int</var> psize;
  std::map&lt;<var>char</var>,<var>int</var>&gt; mymap;
  std::pair&lt;<var>const</var> <var>char</var>,<var>int</var>&gt;* p;

  <cite>// allocate an array of 5 elements using mymap's allocator:</cite>
  p=mymap.get_allocator().allocate(5);

  <cite>// assign some values to array</cite>
  psize = <var>sizeof</var>(std::map&lt;<var>char</var>,<var>int</var>&gt;::value_type)*5;

  std::cout &lt;&lt; <kbd>"The allocated array has a size of "</kbd> &lt;&lt; psize &lt;&lt; <kbd>" bytes.\n"</kbd>;

  mymap.get_allocator().deallocate(p,5);

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
The example shows an elaborate way to allocate memory for an array of pairs using the same allocator used by the container.<br>
A possible output is:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>The allocated array has a size of 40 bytes.
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Constant.<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
No changes.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The container is accessed.<br>
No contained elements are accessed: concurrently accessing or modifying them is safe.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
<b>No-throw guarantee:</b> this member function never throws exceptions.<br>
Copying any instantiation of the <a href="/allocator">default allocator</a> is also guaranteed to never throw.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/memory/allocator/"><b>allocator</b></a></dt><dd>Default allocator <span class="typ">(class template)</span></dd></dl>
<div id="CH_bb"></div></div></div>
