<div id="I_content">
<div class="C_doc">
<div id="I_type">function</div>
<div id="I_file">&lt;cstdio&gt;</div>
<h1>fwrite</h1>
<div class="C_prototype"><pre>size_t fwrite ( const void * ptr, size_t size, size_t count, FILE * stream );</pre></div><div id="I_description">Write block of data to stream</div>
<section id="description">
Writes an array of <i>count</i> elements, each one with a size of <i>size</i> bytes, from the block of memory pointed by <i>ptr</i> to the current position in the <i>stream</i>.<br>
<br>
The <i>position indicator</i> of the stream is advanced by the total number of bytes written.<br>
<br>
Internally, the function interprets the block pointed by <var>ptr</var> as if it was an array of <code>(size*count)</code> elements of type <code>unsigned char</code>, and writes them sequentially to <var>stream</var> as if <samp><a href="/fputc">fputc</a></samp> was called for each byte.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>ptr</dt>
<dd>Pointer to the array of elements to be written, converted to a <tt>const void*</tt>.</dd>
<dt>size</dt>
<dd>Size in bytes of each element to be written.<br>
<a href="/size_t">size_t</a> is an unsigned integral type.</dd>
<dt>count</dt>
<dd>Number of elements, each one with a size of <i>size</i> bytes.<br>
<a href="/size_t">size_t</a> is an unsigned integral type.</dd>
<dt>stream</dt>
<dd>Pointer to a <a href="/FILE">FILE</a> object that specifies an output stream.</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
The total number of elements successfully written is returned.<br>
If this number differs from the <i>count</i> parameter, a writing error prevented the function from completing. In this case, the <i>error indicator</i> (<a href="/ferror">ferror</a>) will be set for the <i>stream</i>.<br>
If either <i>size</i> or <i>count</i> is zero, the function returns zero and the <i>error indicator</i> remains unchanged.<br>
<a href="/size_t">size_t</a> is an unsigned integral type.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br></code></pre></td>
<td class="source"><pre><code><cite>/* fwrite example : write buffer */</cite>
<dfn>#include &lt;stdio.h&gt;</dfn>

<var>int</var> main ()
{
  FILE * pFile;
  <var>char</var> buffer[] = { <kbd>'x'</kbd> , <kbd>'y'</kbd> , <kbd>'z'</kbd> };
  pFile = fopen (<kbd>"myfile.bin"</kbd>, <kbd>"wb"</kbd>);
  fwrite (buffer , <var>sizeof</var>(<var>char</var>), <var>sizeof</var>(buffer), pFile);
  fclose (pFile);
  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
A file called <tt>myfile.bin</tt> is created and the content of the buffer is stored into it. For simplicity, the buffer contains <tt>char</tt> elements but it can contain any other type.<br>
<tt>sizeof(buffer)</tt> is the length of the array in bytes (in this case it is three, because the array has three elements of one byte each).<br>
</section>
<br>
<h3>See also</h3>
<div id="CH_bb"></div></div></div>
