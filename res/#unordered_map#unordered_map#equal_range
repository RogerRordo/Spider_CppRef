<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;unordered_map&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/unordered_map/unordered_map/">unordered_map</a>::equal_range<span class="C_ico cpp11warning" title="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it." alt="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it."></span></h1>
<div class="C_prototype"><pre>pair&lt;iterator,iterator&gt;   equal_range ( const key_type&amp; k );pair&lt;const_iterator,const_iterator&gt;   equal_range ( const key_type&amp; k ) const;</pre></div><div id="I_description">Get range of elements with specific key</div>
<section id="description">
Returns the bounds of a range that includes all the elements in the container with a key that compares equal to <i>k</i>. In <a href="/unordered_map">unordered_map</a> containers, where keys are unique, the range will include one element at most.<br>
<br>
If <i>k</i> does not match any key in the container, the range returned has <a href="/unordered_map::end">end</a> as both its lower and upper range bounds.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>k</dt>
<dd>Key value to be compared.<br>
Member type <tt>key_type</tt> is the type of the keys for the elements in the container, defined in <a href="/unordered_map">unordered_map</a> as an alias of its first template parameter (<tt>Key</tt>).</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
The function returns a <a href="/pair">pair</a>, where its member <tt>pair::first</tt> is an iterator to the lower bound of the range, and <tt>pair::second</tt> is an iterator to its upper bound. The elements in the range are those between these two iterators, including <tt>pair::first</tt>, but not <tt>pair::second</tt>.<br>
<br>
Member types <tt>iterator</tt> and <tt>const_iterator</tt> are <a href="/ForwardIterator">forward iterator</a> types.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
See <a href="/unordered_multimap::equal_range">unordered_multimap::equal_range</a>.<br>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Average case: constant.<br>
Worst case: linear in <a href="/unordered_map::size">container size</a>.<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
No changes.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/unordered_map/unordered_map/count/"><b>unordered_map::count</b></a></dt><dd>Count elements with a specific key <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_map/unordered_map/find/"><b>unordered_map::find</b></a></dt><dd>Get iterator to element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_map/unordered_map/operator[]/"><b>unordered_map::operator[]</b></a></dt><dd>Access element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_map/unordered_map/at/"><b>unordered_map::at</b></a></dt><dd>Access element <span class="typ">(public member function)</span></dd></dl>
</section>
<div id="CH_bb"></div></div></div>
