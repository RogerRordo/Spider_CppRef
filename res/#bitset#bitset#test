<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;bitset&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/bitset/bitset/">bitset</a>::test</h1>
<div class="C_prototype"><pre>bool test (size_t pos) const;</pre></div><div id="I_description">Return bit value</div>
<section id="description">
Returns whether the bit at position <var>pos</var> is set (i.e., whether it is <i>one</i>).<br>
<br>
Unlike the access operator (<samp><a href="/bitset::operator[]">operator[]</a></samp>), this function performs a range check on <var>pos</var> before retrieveing the bit value, throwing <samp><a href="/out_of_range">out_of_range</a></samp> if <var>pos</var> is equal or greater than the <i><a href="/bitset::size">bitset size</a></i>.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>pos</dt>
<dd>Order position of the bit whose value is retrieved.<br>
Order positions are counted from the rightmost bit, which is order position <code>0</code>.<br>
<samp><a href="/size_t">size_t</a></samp> is an unsigned integral type.<br>
</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
<code>true</code> if the bit at position <var>pos</var> is set, and <code>false</code> if it is not set.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br></code></pre></td>
<td class="source"><pre><code><cite>// bitset::test</cite>
<dfn>#include &lt;iostream&gt;       </dfn><cite>// std::cout</cite>
<dfn>#include &lt;string&gt;         </dfn><cite>// std::string</cite>
<dfn>#include &lt;cstddef&gt;        </dfn><cite>// std::size_t</cite>
<dfn>#include &lt;bitset&gt;         </dfn><cite>// std::bitset</cite>

<var>int</var> main ()
{
  std::bitset&lt;5&gt; foo (std::string(<kbd>"01011"</kbd>));

  std::cout &lt;&lt; <kbd>"foo contains:\n"</kbd>;
  std::cout &lt;&lt; std::boolalpha;
  <var>for</var> (std::size_t i=0; i&lt;foo.size(); ++i)
    std::cout &lt;&lt; foo.test(i) &lt;&lt; <kbd>'\n'</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>
foo contains:
true
true
false
true
false
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The <samp><a href="/bitset">bitset</a></samp> is accessed.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
<b>Strong guarantee:</b> if an exception is thrown, there are no changes in the <samp><a href="/bitset">bitset</a></samp>.<br>
If <var>pos</var> is not a valid bit position, <samp><a href="/out_of_range">out_of_range</a></samp> is thrown.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/bitset/bitset/operator[]/"><b>bitset::operator[]</b></a></dt><dd>Access bit <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/bitset/bitset/count/"><b>bitset::count</b></a></dt><dd>Count bits set <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/bitset/bitset/any/"><b>bitset::any</b></a></dt><dd>Test if any bit is set <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/bitset/bitset/none/"><b>bitset::none</b></a></dt><dd>Test if no bit is set <span class="typ">(public member function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
