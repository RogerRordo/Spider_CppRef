<div id="I_content">
<div class="C_doc">
<div id="I_type">function template</div>
<div id="I_file">&lt;algorithm&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span>iter_swap</h1>
<div class="C_prototype"><pre>template &lt;class ForwardIterator1, class ForwardIterator2&gt;  void iter_swap (ForwardIterator1 a, ForwardIterator2 b);</pre></div><div id="I_description">Exchange values of objects pointed to by two iterators</div>
<section id="description">
Swaps the elements pointed to by <var>a</var> and <var>b</var>.<br>
<br>
The function calls <samp><a href="/swap">swap</a></samp> (unqualified) to exchange the elements.<br>
<br>
The behavior of this function template is equivalent to:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br></code></pre></td>
<td class="source"><pre><code><var>template</var> &lt;<var>class</var> ForwardIterator1, <var>class</var> ForwardIterator2&gt;
  <var>void</var> iter_swap (ForwardIterator1 a, ForwardIterator2 b)
{
  swap (*a, *b);
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>a, b</dt>
<dd><a href="/ForwardIterator">Forward iterators</a> to the objects to swap.<br>
<samp><a href="/swap">swap</a></samp> shall be defined to exchange values of the type pointed to by the iterators.<br>
</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
none<br>
</section>
<br>
<section>
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br></code></pre></td>
<td class="source"><pre><code><cite>// iter_swap example</cite>
<dfn>#include &lt;iostream&gt;     </dfn><cite>// std::cout</cite>
<dfn>#include &lt;algorithm&gt;    </dfn><cite>// std::iter_swap</cite>
<dfn>#include &lt;vector&gt;       </dfn><cite>// std::vector</cite>

<var>int</var> main () {

  <var>int</var> myints[]={10,20,30,40,50 };              <cite>//   myints:  10  20  30  40  50</cite>
  std::vector&lt;<var>int</var>&gt; myvector (4,99);            <cite>// myvector:  99  99  99  99</cite>

  std::iter_swap(myints,myvector.begin());     <cite>//   myints: [99] 20  30  40  50</cite>
                                               <cite>// myvector: [10] 99  99  99</cite>

  std::iter_swap(myints+3,myvector.begin()+2); <cite>//   myints:  99  20  30 [99] 50</cite>
                                               <cite>// myvector:  10  99 [40] 99</cite>

  std::cout &lt;&lt; <kbd>"myvector contains:"</kbd>;
  <var>for</var> (std::vector&lt;<var>int</var>&gt;::iterator it=myvector.begin(); it!=myvector.end(); ++it)
    std::cout &lt;&lt; <kbd>' '</kbd> &lt;&lt; *it;
  std::cout &lt;&lt; <kbd>'\n'</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>myvector contains: 10 99 40 99
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Constant: Calls <samp><a href="/swap">swap</a></samp> once.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The objects pointed to by both iterators are modified.<br>
</section>
<br>
<section id="exceptions">
<h3>Exceptions</h3>
Throws if the call to <samp><a href="/swap">swap</a></samp> throws.<br>
Note that invalid arguments cause <i>undefined behavior</i>.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/utility/swap/"><b>swap</b></a></dt><dd>Exchange values of two objects <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/copy/"><b>copy</b></a></dt><dd>Copy range of elements <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/replace/"><b>replace</b></a></dt><dd>Replace value in range <span class="typ">(function template)</span></dd></dl>
<div id="CH_bb"></div></div></div>
