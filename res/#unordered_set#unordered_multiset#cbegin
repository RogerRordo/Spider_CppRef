<div id="I_content">
<div class="C_doc">
<div id="I_type">public member type</div>
<div id="I_file">&lt;unordered_set&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/unordered_set/unordered_multiset/">unordered_multiset</a>::cbegin<span class="C_ico cpp11warning" title="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it." alt="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it."></span></h1>
<div class="C_prototype"><table><tr class="odd"><th>container iterator (1)</th><td><pre>const_iterator cbegin() const noexcept;</pre></td></tr><tr class="even"><th>bucket iterator (2)</th><td><pre>const_local_iterator cbegin ( size_type n ) const;</pre></td></tr></table></div><div id="I_description">Return const_iterator to beginning</div>
<section id="description">
Returns a <tt>const_iterator</tt> pointing to the first element in the <a href="/unordered_multiset">unordered_multiset</a> container (1) or in one of its buckets (2).<br>
<br>
A <tt>const_iterator</tt> is an iterator that points to const content. This iterator can be increased and decreased (unless it is itself also const), but it cannot be used to modify the contents it points to.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>n</dt>
<dd>Bucket number. This shall be lower than <a href="/unordered_multiset::bucket_count">bucket_count</a>.<br>
It is an optional parameter that changes the behavior of this member function: if set, the iterator retrieved points to the first element of a bucket, otherwise it points to the first element of the container.<br>
Member type <tt>size_type</tt> is an unsigned integral type.</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
A <tt>const_iterator</tt> to the first element in the container (1) or the bucket (2).<br>
<br>
Both <tt>const_iterator</tt> and <tt>const_local_iterator</tt> are member types. In the <a href="/unordered_multiset">unordered_multiset</a> class template, these are <a href="/ForwardIterator">forward iterator</a> types.<br>
They may both be aliases of the same iterator type.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br></code></pre></td>
<td class="source"><pre><code><cite>// unordered_multiset::cbegin/cend example</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>
<dfn>#include &lt;unordered_set&gt;</dfn>

<var>int</var> main ()
{
  std::unordered_multiset&lt;std::string&gt; myums =
    {<kbd>"father"</kbd>,<kbd>"mother"</kbd>,<kbd>"son"</kbd>,<kbd>"daughter"</kbd>,<kbd>"son"</kbd>,<kbd>"son"</kbd>};

  std::cout &lt;&lt; <kbd>"myums contains:"</kbd>;
  <var>for</var> ( <var>auto</var> it = myums.begin(); it != myums.end(); ++it )
    std::cout &lt;&lt; <kbd>" "</kbd> &lt;&lt; *it;    <cite>// cannot modify *it</cite>
  std::cout &lt;&lt; std::endl;

  std::cout &lt;&lt; <kbd>"myums's buckets contain:\n"</kbd>;
  <var>for</var> ( <var>unsigned</var> i = 0; i &lt; myums.bucket_count(); ++i) {
    std::cout &lt;&lt; <kbd>"bucket #"</kbd> &lt;&lt; i &lt;&lt; <kbd>" contains:"</kbd>;
    <var>for</var> ( <var>auto</var> local_it = myums.begin(i); local_it!= myums.end(i); ++local_it )
      std::cout &lt;&lt; <kbd>" "</kbd> &lt;&lt; *local_it;
    std::cout &lt;&lt; std::endl;
  }

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Possible output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>myums contains: father mother daughter son son son
myset's buckets contain:
bucket #0 contains:
bucket #1 contains: father
bucket #2 contains: mother
bucket #3 contains: daughter son son son
bucket #4 contains: 
bucket #5 contains: 
bucket #6 contains: 
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Constant.<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
No changes.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/unordered_set/unordered_multiset/end/"><b>unordered_multiset::end</b></a></dt><dd>Return iterator to end <span class="typ">(public member type)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_set/unordered_multiset/cbegin/"><b>unordered_multiset::cbegin</b></a></dt><dd>Return const_iterator to beginning <span class="typ">(public member type)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_set/unordered_multiset/find/"><b>unordered_multiset::find</b></a></dt><dd>Get iterator to element <span class="typ">(public member function)</span></dd></dl>
</section>
<div id="CH_bb"></div></div></div>
