<div id="I_content">
<div class="C_doc">
<div id="I_type">function</div>
<div id="I_file">&lt;cmath&gt; &lt;ctgmath&gt;</div>
<h1>abs</h1>
<div class="C_prototype"><div class="C_SwitchCases">
<div title="C++98">
<pre>     double abs (double x);      float abs (float x);long double abs (long double x);</pre></div>
<div title="C++11" class="on">
<pre>     double abs (double x);      float abs (float x);long double abs (long double x);     double abs (T x);           // additional overloads for integral types</pre></div>
</div>
</div><div id="I_description">Compute absolute value</div>
<section id="description">
Returns the <i>absolute value</i> of <var>x</var>: |<var>x</var>|.<br>
<br>
These convenience <tt>abs</tt> overloads are exclusive of C++. In C, <samp><a href="/abs">abs</a></samp> is only declared in <a href="/cstdlib">&lt;stdlib.h&gt;</a> (and operates on <code>int</code> values).<br>
<br>
Since C++11, <i>additional overloads</i> are provided in this header (<code><a href="/&lt;cmath&gt;">&lt;cmath&gt;</a></code>) for the <a href="/is_integral">integral types</a>: These overloads effectively cast <var>x</var> to a <code>double</code> before calculations (defined for <samp>T</samp> being any <i><a href="/is_integral">integral type</a></i>).<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>x</dt>
<dd>Value whose absolute value is returned.</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
The absolute value of <i>x</i>.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br></code></pre></td>
<td class="source"><pre><code><cite>// cmath's abs example</cite>
<dfn>#include &lt;iostream&gt;     </dfn><cite>// std::cout</cite>
<dfn>#include &lt;cmath&gt;        </dfn><cite>// std::abs</cite>

<var>int</var> main ()
{
  std::cout &lt;&lt; <kbd>"abs (3.1416) = "</kbd> &lt;&lt; std::abs (3.1416) &lt;&lt; <kbd>'\n'</kbd>;
  std::cout &lt;&lt; <kbd>"abs (-10.6)  = "</kbd> &lt;&lt; std::abs (-10.6) &lt;&lt; <kbd>'\n'</kbd>;
  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>
abs (3.1416) = 3.1416
abs (-10.6) = 10.6
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/cstdlib/abs/"><b>abs (cstdlib)</b></a></dt><dd>Absolute value <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/fabs/"><b>fabs</b></a></dt><dd>Compute absolute value <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cstdlib/labs/"><b>labs</b></a></dt><dd>Absolute value <span class="typ">(function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
