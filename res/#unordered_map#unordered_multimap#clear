<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;unordered_map&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/unordered_map/unordered_multimap/">unordered_multimap</a>::clear<span class="C_ico cpp11warning" title="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it." alt="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it."></span></h1>
<div class="C_prototype"><pre>void clear() noexcept;</pre></div><div id="I_description">Clear content</div>
<section id="description">
All the elements in the <a href="/unordered_multimap">unordered_multimap</a> container are dropped: their destructors are called, and they are removed from the container, leaving it with a <a href="/unordered_multimap::size">size</a> of <tt>0</tt>.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
none<br>
</section>
<br>
<section id="return">
<h3>Return value</h3>
none<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br></code></pre></td>
<td class="source"><pre><code><cite>// clearing unordered_multimap</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>
<dfn>#include &lt;unordered_map&gt;</dfn>

<var>int</var> main ()
{
  std::unordered_multimap&lt;std::string,std::string&gt; myumm =
         { {<kbd>"Tom"</kbd>,<kbd>"Produce"</kbd>}, {<kbd>"Bob"</kbd>,<kbd>"Toys"</kbd>}, {<kbd>"Bob"</kbd>,<kbd>"Garden"</kbd>} };

  std::cout &lt;&lt; <kbd>"myumm contains:"</kbd>;
  <var>for</var> (<var>auto</var>&amp; x: myumm) std::cout &lt;&lt; <kbd>" "</kbd> &lt;&lt; x.first &lt;&lt; <kbd>":"</kbd> &lt;&lt; x.second;
  std::cout &lt;&lt; std::endl;

  myumm.clear();
  myumm.insert(std::make_pair(<kbd>"Bob"</kbd>,<kbd>"Jail"</kbd>));

  std::cout &lt;&lt; <kbd>"myumm contains:"</kbd>;
  <var>for</var> (<var>auto</var>&amp; x: myumm) std::cout &lt;&lt; <kbd>" "</kbd> &lt;&lt; x.first &lt;&lt; <kbd>":"</kbd> &lt;&lt; x.second;
  std::cout &lt;&lt; std::endl;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Possible output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>myumm contains: Tom:Produce Bob:Toys Bob:Garden
myumm contains: Bob:Jail
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Linear on size (destructors).<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
All iterators, pointers and references are invalidated.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/unordered_map/unordered_multimap/erase/"><b>unordered_multimap::erase</b></a></dt><dd>Erase elements <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_map/unordered_multimap/empty/"><b>unordered_multimap::empty</b></a></dt><dd>Test whether container is empty <span class="typ">(public member function)</span></dd></dl>
</section>
<div id="CH_bb"></div></div></div>
