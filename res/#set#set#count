<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;set&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/set/set/">set</a>::count</h1>
<div class="C_prototype"><pre>size_type count (const value_type&amp; val) const;</pre></div><div id="I_description">Count elements with a specific value</div>
<section id="description">
Searches the container for elements equivalent to <i>val</i> and returns the number of matches.<br>
<br>
Because all elements in a <a href="/set">set</a> container are unique, the function can only return <i>1</i> (if the element is found) or zero (otherwise).<br>
<br>
Two elements of a <a href="/set">set</a> are considered equivalent if the container's <a href="/set::key_comp">comparison object</a> returns <tt>false</tt> reflexively (i.e., no matter the order in which the elements are passed as arguments).<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>val</dt>
<dd>Value to search for.<br>
Member type <tt>value_type</tt> is the type of the elements in the container, defined in <a href="/set">set</a> as an alias of its first template parameter (<tt>T</tt>).</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
<tt>1</tt> if the container contains an element equivalent to <i>val</i>, or zero otherwise.<br>
<br>
Member type <tt>size_type</tt> is an unsigned integral type.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br></code></pre></td>
<td class="source"><pre><code><cite>// set::count</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;set&gt;</dfn>

<var>int</var> main ()
{
  std::set&lt;<var>int</var>&gt; myset;

  <cite>// set some initial values:</cite>
  <var>for</var> (<var>int</var> i=1; i&lt;5; ++i) myset.insert(i*3);    <cite>// set: 3 6 9 12</cite>

  <var>for</var> (<var>int</var> i=0; i&lt;10; ++i)
  {
    std::cout &lt;&lt; i;
    <var>if</var> (myset.count(i)!=0)
      std::cout &lt;&lt; <kbd>" is an element of myset.\n"</kbd>;
    <var>else</var>
      std::cout &lt;&lt; <kbd>" is not an element of myset.\n"</kbd>;
  }

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Logarithmic in <a href="/set::size">size</a>.<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
No changes.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The container is accessed.<br>
Concurrently accessing the elements of a <a href="/set">set</a> is safe.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
<b>Strong guarantee:</b> if an exception is thrown, there are no changes in the container.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/set/set/find/"><b>set::find</b></a></dt><dd>Get iterator to element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/set/set/size/"><b>set::size</b></a></dt><dd>Return container size <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/set/set/equal_range/"><b>set::equal_range</b></a></dt><dd>Get range of equal elements <span class="typ">(public member function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
