<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;map&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/map/multimap/">multimap</a>::find</h1>
<div class="C_prototype"><pre>      iterator find (const key_type&amp; k);const_iterator find (const key_type&amp; k) const;</pre></div><div id="I_description">Get iterator to element</div>
<section id="description">
Searches the container for an element with a <i>key</i> equivalent to <i>k</i> and returns an iterator to it if found, otherwise it returns an iterator to <a href="/multimap::end">multimap::end</a>.<br>
<br>
Notice that this function returns an iterator to a single element (of the possibly multiple elements with equivalent keys). To obtain the entire range of equivalent elements, see <a href="/multimap::equal_range">multimap::equal_range</a>.<br>
<br>
Two <i>keys</i> are considered equivalent if the container's <a href="/multimap::key_comp">comparison object</a> returns <tt>false</tt> reflexively (i.e., no matter the order in which the elements are passed as arguments).<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>k</dt>
<dd>Key to be searched for.<br>
Member type <tt>key_type</tt> is the type of the keys for the elements in the container, defined in <a href="/multimap">multimap</a> as an alias of its first template parameter (<tt>Key</tt>).</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
An iterator to the element, if an element with specified key is found, or <a href="/multimap::end">multimap::end</a> otherwise.<br>
<br>
If the <a href="/multimap">multimap</a> object is const-qualified, the function returns a <tt>const_iterator</tt>. Otherwise, it returns an <tt>iterator</tt>.<br>
<br>
Member types <tt>iterator</tt> and <tt>const_iterator</tt> are <a href="/BidirectionalIterator">bidirectional iterator</a> types pointing to elements (of type <tt>value_type</tt>).<br>
Notice that <tt>value_type</tt> in <a href="/multimap">multimap</a> containers is an alias of <tt><a href="/pair">pair</a>&lt;const key_type, mapped_type&gt;</tt>.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br></code></pre></td>
<td class="source"><pre><code><cite>// multimap::find</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;map&gt;</dfn>

<var>int</var> main ()
{
  std::multimap&lt;<var>char</var>,<var>int</var>&gt; mymm;

  mymm.insert (std::make_pair(<kbd>'x'</kbd>,10));
  mymm.insert (std::make_pair(<kbd>'y'</kbd>,20));
  mymm.insert (std::make_pair(<kbd>'z'</kbd>,30));
  mymm.insert (std::make_pair(<kbd>'z'</kbd>,40));

  std::multimap&lt;<var>char</var>,<var>int</var>&gt;::iterator it = mymm.find(<kbd>'x'</kbd>);
  mymm.erase (it);
  mymm.erase (mymm.find(<kbd>'z'</kbd>));

  <cite>// print content:</cite>
  std::cout &lt;&lt; <kbd>"elements in mymm:"</kbd> &lt;&lt; <kbd>'\n'</kbd>;
  std::cout &lt;&lt; <kbd>"y =&gt; "</kbd> &lt;&lt; mymm.find(<kbd>'y'</kbd>)-&gt;second &lt;&lt; <kbd>'\n'</kbd>;
  std::cout &lt;&lt; <kbd>"z =&gt; "</kbd> &lt;&lt; mymm.find(<kbd>'z'</kbd>)-&gt;second &lt;&lt; <kbd>'\n'</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>elements in mymm:
y =&gt; 20
z =&gt; 40
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Logarithmic in <a href="/multimap::size">size</a>.<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
No changes.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The container is accessed (neither the const nor the non-const versions modify the container).<br>
No mapped values are accessed: concurrently accessing or modifying elements is safe.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
<b>Strong guarantee:</b> if an exception is thrown, there are no changes in the container.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/map/multimap/equal_range/"><b>multimap::equal_range</b></a></dt><dd>Get range of equal elements <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/map/multimap/count/"><b>multimap::count</b></a></dt><dd>Count elements with a specific key <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/map/multimap/lower_bound/"><b>multimap::lower_bound</b></a></dt><dd>Return iterator to lower bound <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/map/multimap/upper_bound/"><b>multimap::upper_bound</b></a></dt><dd>Return iterator to upper bound <span class="typ">(public member function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
