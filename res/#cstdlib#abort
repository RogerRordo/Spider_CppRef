<div id="I_content">
<div class="C_doc">
<div id="I_type">function</div>
<div id="I_file">&lt;cstdlib&gt;</div>
<h1>abort</h1>
<div class="C_prototype"><div class="C_SwitchCases">
<div title="C">
<pre>void abort (void);</pre></div>
<div title="C++11" class="on">
<pre>[[noreturn]] void abort() noexcept;</pre></div>
</div>
</div><div id="I_description">Abort current process</div>
<section id="description">
Aborts the current process, producing an abnormal program termination.<br>
<br>
The function raises the <samp>SIGABRT</samp> signal (as if <code><a href="/raise">raise</a>(SIGABRT)</code> was called). This, if uncaught, causes the program to terminate returning a platform-dependent <i>unsuccessful termination</i> error code to the host environment.<br>
<br>
The program is terminated without destroying any object and without calling any of the functions passed to <samp><a href="/atexit">atexit</a></samp> or <samp><a href="/at_quick_exit">at_quick_exit</a></samp>.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
none<br>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
none (the function never returns).<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br></code></pre></td>
<td class="source"><pre><code><cite>/* abort example */</cite>
<dfn>#include &lt;stdio.h&gt;      </dfn><cite>/* fopen, fputs, fclose, stderr */</cite><dfn></dfn>
<dfn>#include &lt;stdlib.h&gt;     </dfn><cite>/* abort, NULL */</cite><dfn></dfn>

<var>int</var> main ()
{
  FILE * pFile;
  pFile= fopen (<kbd>"myfile.txt"</kbd>,<kbd>"r"</kbd>);
  <var>if</var> (pFile == NULL)
  {
    fputs (<kbd>"error opening file\n"</kbd>,stderr);
    abort();
  }

  <cite>/* regular process here */</cite>

  fclose (pFile);
  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
If <tt>myfile.txt</tt> does not exist, a message is printed and <samp>abort</samp> is called.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
Concurrently calling this function is safe, causing no data races.<br>
Note though that its <i>handling process</i> may affect all threads.<br>
</section>
<br>
<section id="exceptions">
<h3>Exceptions (C++)</h3>
If no function handlers have been defined with <samp><a href="/signal">signal</a></samp> to handle <samp>SIGABRT</samp>, the function never throws exceptions (no-throw guarantee).<br>
Otherwise, the behavior depends on the particular library implementation.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/cstdlib/exit/"><b>exit</b></a></dt><dd>Terminate calling process <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cstdlib/atexit/"><b>atexit</b></a></dt><dd>Set function to be executed on exit <span class="typ">(function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
