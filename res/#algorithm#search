<div id="I_content">
<div class="C_doc">
<div id="I_type">function template</div>
<div id="I_file">&lt;algorithm&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span>search</h1>
<div class="C_prototype"><table><tr class="odd"><th>equality (1)</th><td><pre>template &lt;class ForwardIterator1, class ForwardIterator2&gt;   ForwardIterator1 search (ForwardIterator1 first1, ForwardIterator1 last1,                            ForwardIterator2 first2, ForwardIterator2 last2);</pre></td></tr><tr class="even"><th>predicate (2)</th><td><pre>template &lt;class ForwardIterator1, class ForwardIterator2, class BinaryPredicate&gt;   ForwardIterator1 search (ForwardIterator1 first1, ForwardIterator1 last1,                            ForwardIterator2 first2, ForwardIterator2 last2,                            BinaryPredicate pred);</pre></td></tr></table></div><div id="I_description">Search range for subsequence</div>
<section id="description">
Searches the range <code>[first1,last1)</code> for the first occurrence of the sequence defined by <code>[first2,last2)</code>, and returns an iterator to its first element, or <var>last1</var> if no occurrences are found.<br>
<br>
The elements in both ranges are compared sequentially using <code>operator==</code> (or <var>pred</var>, in version <i>(2)</i>): A subsequence of <code>[first1,last1)</code> is considered a match only when this is <code>true</code> for <strong>all</strong> the elements of <code>[first2,last2)</code>.<br>
<br>
This function returns the first of such occurrences. For an algorithm that returns the last instead, see <samp><a href="/find_end">find_end</a></samp>.<br>
<br>
The behavior of this function template is equivalent to:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br></code></pre></td>
<td class="source"><pre><code><var>template</var>&lt;<var>class</var> ForwardIterator1, <var>class</var> ForwardIterator2&gt;
  ForwardIterator1 search ( ForwardIterator1 first1, ForwardIterator1 last1,
                            ForwardIterator2 first2, ForwardIterator2 last2)
{
  <var>if</var> (first2==last2) <var>return</var> first1;  <cite>// specified in C++11</cite>
  
  <var>while</var> (first1!=last1)
  {
    ForwardIterator1 it1 = first1;
    ForwardIterator2 it2 = first2;
    <var>while</var> (*it1==*it2) {    <cite>// or: while (pred(*it1,*it2)) for version 2</cite>
        ++it1; ++it2;
        <var>if</var> (it2==last2) <var>return</var> first1;
        <var>if</var> (it1==last1) <var>return</var> last1;
    }
    ++first1;
  }
  <var>return</var> last1;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>first1, last1</dt>
<dd><a href="/ForwardIterator">Forward iterators</a> to the initial and final positions of the searched sequence. The range used is <code>[first1,last1)</code>, which contains all the elements between <var>first1</var> and <var>last1</var>, including the element pointed by <var>first1</var> but not the element pointed by <var>last1</var>.</dd>
<dt>first2, last2</dt>
<dd><a href="/ForwardIterator">Forward iterators</a> to the initial and final positions of the sequence to be searched for. The range used is <code>[first2,last2)</code>.<br>
For <i>(1)</i>, the elements in both ranges shall be of types comparable using <code>operator==</code> (with the elements of the first range as left-hand side operands, and those of the second as right-hand side operands).<br>
</dd>
<dt>pred</dt>
<dd>Binary function that accepts two elements as arguments (one of each of the two sequences, in the same order), and returns a value convertible to <code>bool</code>. The returned value indicates whether the elements are considered to match in the context of this function.<br>
The function shall not modify any of its arguments.<br>
This can either be a function pointer or a function object.</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
An iterator to the first element of the first occurrence of <code>[first2,last2)</code> in <code>[first1,last1)</code>.<br>
If the sequence is not found, the function returns <var>last1</var>.<br>
<div class="C_SwitchCases">
<div title="C++98">
If <code>[first2,last2)</code> is an empty range, the result is unspecified.<br>
</div>
<div title="C++11">
If <code>[first2,last2)</code> is an empty range, the function returns <var>first1</var>.<br>
</div>
</div>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br></code></pre></td>
<td class="source"><pre><code><cite>// search algorithm example</cite>
<dfn>#include &lt;iostream&gt;     </dfn><cite>// std::cout</cite>
<dfn>#include &lt;algorithm&gt;    </dfn><cite>// std::search</cite>
<dfn>#include &lt;vector&gt;       </dfn><cite>// std::vector</cite>

<var>bool</var> mypredicate (<var>int</var> i, <var>int</var> j) {
  <var>return</var> (i==j);
}

<var>int</var> main () {
  std::vector&lt;<var>int</var>&gt; haystack;

  <cite>// set some values:        haystack: 10 20 30 40 50 60 70 80 90</cite>
  <var>for</var> (<var>int</var> i=1; i&lt;10; i++) haystack.push_back(i*10);

  <cite>// using default comparison:</cite>
  <var>int</var> needle1[] = {40,50,60,70};
  std::vector&lt;<var>int</var>&gt;::iterator it;
  it = std::search (haystack.begin(), haystack.end(), needle1, needle1+4);

  <var>if</var> (it!=haystack.end())
    std::cout &lt;&lt; <kbd>"needle1 found at position "</kbd> &lt;&lt; (it-haystack.begin()) &lt;&lt; <kbd>'\n'</kbd>;
  <var>else</var>
    std::cout &lt;&lt; <kbd>"needle1 not found\n"</kbd>;

  <cite>// using predicate comparison:</cite>
  <var>int</var> needle2[] = {20,30,50};
  it = std::search (haystack.begin(), haystack.end(), needle2, needle2+3, mypredicate);

  <var>if</var> (it!=haystack.end())
    std::cout &lt;&lt; <kbd>"needle2 found at position "</kbd> &lt;&lt; (it-haystack.begin()) &lt;&lt; <kbd>'\n'</kbd>;
  <var>else</var>
    std::cout &lt;&lt; <kbd>"needle2 not found\n"</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>needle1 found at position 3
needle2 not found
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Up to linear in <code>count1*count2</code> (where <var>countX</var> is the <a href="/distance">distance</a> between <var>firstX</var> and <var>lastX</var>): Compares elements until a matching subsequence is found.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
Some (or all) of the objects in both ranges are accessed (possibly more than once).<br>
</section>
<br>
<section id="exceptions">
<h3>Exceptions</h3>
Throws if any of the element comparisons (or <var>pred</var>) throws or if any of the operations on iterators throws.<br>
Note that invalid arguments cause <i>undefined behavior</i>.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/algorithm/find_end/"><b>find_end</b></a></dt><dd>Find last subsequence in range <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/search_n/"><b>search_n</b></a></dt><dd>Search range for elements <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/equal/"><b>equal</b></a></dt><dd>Test whether the elements in two ranges are equal <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/mismatch/"><b>mismatch</b></a></dt><dd>Return first position where two ranges differ <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/find/"><b>find</b></a></dt><dd>Find value in range <span class="typ">(function template)</span></dd></dl>
<div id="CH_bb"></div></div></div>
