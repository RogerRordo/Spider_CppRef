<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;unordered_set&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/unordered_set/unordered_set/">unordered_set</a>::find<span class="C_ico cpp11warning" title="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it." alt="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it."></span></h1>
<div class="C_prototype"><pre>      iterator find ( const key_type&amp; k );const_iterator find ( const key_type&amp; k ) const;</pre></div><div id="I_description">Get iterator to element</div>
<section id="description">
Searches the container for an element with <i>k</i> as value and returns an iterator to it if found, otherwise it returns an iterator to <a href="/unordered_set::end">unordered_set::end</a> (the element past the end of the container).<br>
<br>
Another member function, <a href="/unordered_set::count">unordered_set::count</a>, can be used to just check whether a particular element exists.<br>
<br>
All iterators in an <a href="/unordered_set">unordered_set</a> have const access to the elements (even those whose type is not prefixed with <tt>const_</tt>): Elements can be inserted or removed, but not modified while in the container.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>k</dt>
<dd>Key to be searched for.<br>
Member type <tt>key_type</tt> is the type of the elements in the container. In <a href="/unordered_set">unordered_set</a> containers it is the same as <tt>value_type</tt>, defined as an alias of the class's first template parameter (<tt>Key</tt>).</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
An iterator to the element, if the specified value is found, or <a href="/unordered_set::end">unordered_set::end</a> if it is not found in the container.<br>
<br>
Member types <tt>iterator</tt> and <tt>const_iterator</tt> are <a href="/ForwardIterator">forward iterator</a> types. Both may be aliases of the same iterator type.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br></code></pre></td>
<td class="source"><pre><code><cite>// unordered_set::find</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>
<dfn>#include &lt;unordered_set&gt;</dfn>

<var>int</var> main ()
{
  std::unordered_set&lt;std::string&gt; myset = { <kbd>"red"</kbd>,<kbd>"green"</kbd>,<kbd>"blue"</kbd> };

  std::string input;
  std::cout &lt;&lt; <kbd>"color? "</kbd>;
  getline (std::cin,input);

  std::unordered_set&lt;std::string&gt;::const_iterator got = myset.find (input);

  <var>if</var> ( got == myset.end() )
    std::cout &lt;&lt; <kbd>"not found in myset"</kbd>;
  <var>else</var>
    std::cout &lt;&lt; *got &lt;&lt; <kbd>" is in myset"</kbd>;

  std::cout &lt;&lt; std::endl;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Possible output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>color? blue
blue is in myset
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Average case: constant.<br>
Worst case: linear in <a href="/unordered_set::size">container size</a>.<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
No changes.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/unordered_set/unordered_set/count/"><b>unordered_set::count</b></a></dt><dd>Count elements with a specific key <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_set/unordered_set/equal_range/"><b>unordered_set::equal_range</b></a></dt><dd>Get range of elements with a specific key <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_set/unordered_set/begin/"><b>unordered_set::begin</b></a></dt><dd>Return iterator to beginning <span class="typ">(public member type)</span></dd></dl>
<div id="CH_bb"></div></div></div>
