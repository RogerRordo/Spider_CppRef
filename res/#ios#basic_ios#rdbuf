<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;ios&gt; &lt;iostream&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/ios/basic_ios/">basic_ios</a>::rdbuf</h1>
<div class="C_prototype"><table><tr class="odd"><th>get (1)</th><td><pre>basic_streambuf&lt;char_type,traits_type&gt;* rdbuf() const;</pre></td></tr><tr class="even"><th>set (2)</th><td><pre>basic_streambuf&lt;char_type,traits_type&gt;* rdbuf (basic_streambuf&lt;char_type,traits_type&gt;* sb);</pre></td></tr></table></div><div id="I_description">Get/set stream buffer</div>
<section id="description">
The first form <i>(1)</i> returns a pointer to the <i>stream buffer</i> object currently associated with the stream.<br>
<br>
The second form <i>(2)</i> also sets the object pointed by <var>sb</var> as the <i>stream buffer</i> associated with the stream and clears the <i><a href="/basic_ios::rdstate">error state flags</a></i>.<br>
<br>
If <var>sb</var> is a <i>null pointer</i>, the function automatically sets the <samp>badbit</samp> <i><a href="/basic_ios::rdstate">error state flags</a></i> (which may throw an exception if member <samp><a href="/basic_ios::exceptions">exceptions</a></samp> has been passed <samp>badbit</samp>).<br>
<br>
Some derived stream classes (such as <i><a href="/basic_stringstream">string streams</a></i> and <i><a href="/basic_fstream">file streams</a></i>) maintain their own <i>internal stream buffer</i>, to which they are <em>associated</em> on construction. Calling this function to change the <i>associated stream buffer</i> shall have no effect on that <i>internal stream buffer</i>: the stream will have an <i>associated stream buffer</i> which is different from its <i>internal stream buffer</i> (although input/output operations on streams always use the <i>associated stream buffer</i>, as returned by this member function).<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>sb</dt>
<dd>Pointer to a <samp><a href="/basic_streambuf">basic_streambuf</a></samp> object with the same template parameters as the <samp><a href="/basic_ios">basic_ios</a></samp> object.<br>
<samp>char_type</samp> and <samp>traits_type</samp> are member types defined as aliases of the first and second class template parameters, respectively (see <a href="/basic_ios#types">basic_ios types</a>).</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
A pointer to the <i>stream buffer</i> object associated with the stream before the call.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br></code></pre></td>
<td class="source"><pre><code><cite>// redirecting cout's output thrrough its stream buffer</cite>
<dfn>#include &lt;iostream&gt;     </dfn><cite>// std::streambuf, std::cout</cite>
<dfn>#include &lt;fstream&gt;      </dfn><cite>// std::ofstream</cite>

<var>int</var> main () {
  std::streambuf *psbuf, *backup;
  std::ofstream filestr;
  filestr.open (<kbd>"test.txt"</kbd>);

  backup = std::cout.rdbuf();     <cite>// back up cout's streambuf</cite>

  psbuf = filestr.rdbuf();        <cite>// get file's streambuf</cite>
  std::cout.rdbuf(psbuf);         <cite>// assign streambuf to cout</cite>

  std::cout &lt;&lt; <kbd>"This is written to the file"</kbd>;

  std::cout.rdbuf(backup);        <cite>// restore cout's original streambuf</cite>

  filestr.close();

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
This example uses both function forms: first to get a pointer to a file's <samp><a href="/basic_streambuf">basic_streambuf</a></samp> object and then to assign it to <samp><a href="/cout">cout</a></samp>.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
Accesses <i>(1)</i> or modifies <i>(2)</i> the stream object.<br>
Concurrent access to the same stream object may cause data races.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
<b>Basic guarantee:</b> if an exception is thrown, the stream is in a valid state.<br>
It throws an exception of member type <samp><a href="/ios_base::failure">failure</a></samp> if <var>sb</var> is a <i>null pointer</i> and member <samp><a href="/basic_ios::exceptions">exceptions</a></samp> was set to throw for <samp>badbit</samp>.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/streambuf/streambuf/"><b>streambuf</b></a></dt><dd>Base buffer class for streams <span class="typ">(class)</span></dd></dl>
<div id="CH_bb"></div></div></div>
