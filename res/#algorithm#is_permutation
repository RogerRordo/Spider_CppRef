<div id="I_content">
<div class="C_doc">
<div id="I_type">function template</div>
<div id="I_file">&lt;algorithm&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span>is_permutation<span class="C_ico cpp11warning" title="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it." alt="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it."></span></h1>
<div class="C_prototype"><table><tr class="odd"><th>equality (1)</th><td><pre>template &lt;class ForwardIterator1, class ForwardIterator2&gt;   bool is_permutation (ForwardIterator1 first1, ForwardIterator1 last1,                        ForwardIterator2 first2);</pre></td></tr><tr class="even"><th>predicate (2)</th><td><pre>template &lt;class ForwardIterator1, class ForwardIterator2, class BinaryPredicate&gt;   bool is_permutation (ForwardIterator1 first1, ForwardIterator1 last1,                        ForwardIterator2 first2, BinaryPredicate pred);</pre></td></tr></table></div><div id="I_description">Test whether range is permutation of another</div>
<section id="description">
Compares the elements in the range <code>[first1,last1)</code> with those in the range beginning at <var>first2</var>, and returns <code>true</code> if all of the elements in both ranges match, even in a different order.<br>
<br>
The elements are compared using <code>operator==</code> (or <var>pred</var>, in version <i>(2)</i>).<br>
<br>
The behavior of this function template is equivalent to:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br></code></pre></td>
<td class="source"><pre><code><var>template</var> &lt;<var>class</var> InputIterator1, <var>class</var> InputIterator2&gt;
  <var>bool</var> is_permutation (InputIterator1 first1, InputIterator1 last1,
                       InputIterator2 first2)
{
  std::tie (first1,first2) = std::mismatch (first1,last1,first2);
  <var>if</var> (first1==last1) <var>return</var> <var>true</var>;
  InputIterator2 last2 = first2; std::advance (last2,std::distance(first1,last1));
  <var>for</var> (InputIterator1 it1=first1; it1!=last1; ++it1) {
    <var>if</var> (std::find(first1,it1,*it1)==it1) {
      <var>auto</var> n = std::count (first2,last2,*it1);
      <var>if</var> (n==0 || std::count (it1,last1,*it1)!=n) <var>return</var> <var>false</var>;
    }
  }
  <var>return</var> <var>true</var>;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>first1, last1</dt>
<dd><a href="/InputIterator">Input iterators</a> to the initial and final positions of the first sequence. The range used is <code>[first1,last1)</code>, which contains all the elements between <var>first1</var> and <var>last1</var>, including the element pointed by <var>first1</var> but not the element pointed by <var>last1</var>.</dd>
<dt>first2</dt>
<dd><a href="/InputIterator">Input iterator</a> to the initial position of the second sequence.<br>
The function considers as many elements of this sequence as those in the range <code>[first1,last1)</code>.<br>
If this sequence is shorter, it causes <i>undefined behavior</i>.<br>
</dd>
<dt>pred</dt>
<dd>Binary function that accepts two elements as argument (one of each of the two sequences, in the same order), and returns a value convertible to <code>bool</code>. The value returned indicates whether the elements are considered to match in the context of this function.<br>
The function shall not modify any of its arguments.<br>
This can either be a function pointer or a function object.<br>
</dd>
</dl>
<br>
<samp>InputIterator1</samp> and <samp>InputIterator2</samp> shall point to the same type.<br>
</section>
<br>
<section id="return">
<h3>Return value</h3>
<code>true</code> if all the elements in the range <code>[first1,last1)</code> compare equal to those of the range starting at <var>first2</var> in any order, and <code>false</code> otherwise.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br></code></pre></td>
<td class="source"><pre><code><cite>// is_permutation example</cite>
<dfn>#include &lt;iostream&gt;     </dfn><cite>// std::cout</cite>
<dfn>#include &lt;algorithm&gt;    </dfn><cite>// std::is_permutation</cite>
<dfn>#include &lt;array&gt;        </dfn><cite>// std::array</cite>

<var>int</var> main () {
  std::array&lt;<var>int</var>,5&gt; foo = {1,2,3,4,5};
  std::array&lt;<var>int</var>,5&gt; bar = {3,1,4,5,2};

  <var>if</var> ( std::is_permutation (foo.begin(), foo.end(), bar.begin()) )
    std::cout &lt;&lt; <kbd>"foo and bar contain the same elements.\n"</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>foo and bar contain the same elements.
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
If both sequence are <a href="/equal">equal</a> (with the elements in the same order), linear in the <a href="/distance">distance</a> between <var>first1</var> and <var>last1</var>.<br>
Otherwise, up to quadratic: Performs at most <code>N<sup>2</sup></code> element comparisons until the result is determined (where <var>N</var> is the <a href="/distance">distance</a> between <var>first1</var> and <var>last1</var>).<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
Some (or all) of the objects in both ranges are accessed (possibly multiple times each).<br>
</section>
<br>
<section id="exceptions">
<h3>Exceptions</h3>
Throws if any of the element comparisons (or <var>pred</var>) throws, or if any of the operations on iterators throws.<br>
Note that invalid parameters cause <i>undefined behavior</i>.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/algorithm/equal/"><b>equal</b></a></dt><dd>Test whether the elements in two ranges are equal <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/mismatch/"><b>mismatch</b></a></dt><dd>Return first position where two ranges differ <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/next_permutation/"><b>next_permutation</b></a></dt><dd>Transform range to next permutation <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/prev_permutation/"><b>prev_permutation</b></a></dt><dd>Transform range to previous permutation <span class="typ">(function template)</span></dd></dl>
<div id="CH_bb"></div></div></div>
