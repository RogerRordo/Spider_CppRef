<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;ios&gt; &lt;iostream&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/ios/ios/">ios</a>::exceptions</h1>
<div class="C_prototype"><table><tr class="odd"><th>get (1)</th><td><pre>iostate exceptions() const;</pre></td></tr><tr class="even"><th>set (2)</th><td><pre>void exceptions (iostate except);</pre></td></tr></table></div><div id="I_description">Get/set exceptions mask</div>
<section>
The first form <i>(1)</i> returns the current <i>exception mask</i> for the stream.<br>
<br>
The second form <i>(2)</i> sets a new <i>exception mask</i> for the stream and clears the stream's <i><a href="/ios::rdstate">error state flags</a></i> (as if member <code><a href="/ios::clear">clear</a>()</code> was called).<br>
<br>
The <var>exception mask</var> is an internal value kept by all stream objects specifying for which state flags an exception of member type <samp><a href="/ios_base::failure">failure</a></samp> (or some derived type) is thrown when set. This mask is an object of member type <samp><a href="/ios_base::iostate">iostate</a></samp>, which is a value formed by any combination of the following member constants:<br>
<br>
<table class="boxed">
<tr><th rowspan="2"><samp><a href="/ios_base::iostate">iostate</a></samp> value<br>
(member constants)</th><th rowspan="2">indicates</th><th colspan="5"><samp></samp>functions to check state flags</th></tr>
<tr><th><samp><a href="/ios::good">good()</a></samp></th><th><samp><a href="/ios::eof">eof()</a></samp></th><th><samp><a href="/ios::fail">fail()</a></samp></th><th><samp><a href="/ios::bad">bad()</a></samp></th><th><samp><a href="/ios::rdstate">rdstate()</a></samp></th></tr>
<tr><th><samp>goodbit</samp></th><td>No errors (zero value <samp><a href="/ios_base::iostate">iostate</a></samp>)</td><td class="yes"><code>true</code></td><td class="no"><code>false</code></td><td class="no"><code>false</code></td><td class="no"><code>false</code></td><td><samp>goodbit</samp></td></tr>
<tr><th><samp>eofbit</samp></th><td>End-of-File reached on input operation</td><td class="no"><code>false</code></td><td class="yes"><code>true</code></td><td class="no"><code>false</code></td><td class="no"><code>false</code></td><td><samp>eofbit</samp></td></tr>
<tr><th><samp>failbit</samp></th><td>Logical error on i/o operation</td><td class="no"><code>false</code></td><td class="no"><code>false</code></td><td class="yes"><code>true</code></td><td class="no"><code>false</code></td><td><samp>failbit</samp></td></tr>
<tr><th><samp>badbit</samp></th><td>Read/writing error on i/o operation</td><td class="no"><code>false</code></td><td class="no"><code>false</code></td><td class="yes"><code>true</code></td><td class="yes"><code>true</code></td><td><samp>badbit</samp></td></tr>
</table>
<samp>eofbit</samp>, <samp>failbit</samp> and <samp>badbit</samp> are member constants with implementation-defined values that can be combined (as if with the bitwise OR operator), so that the stream throws when any of the selected <i>error state flags</i> is set.<br>
<samp>goodbit</samp> is zero, indicating that no exceptions shall be thrown when an <i>error state flags</i> is set.<br>
<br>
All streams have <samp>goodbit</samp> by default (they do not throw exceptions due to <i>error state flags</i> being set).<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>except</dt>
<dd>A bitmask value of member type <samp><a href="/ios_base::iostate">iostate</a></samp> formed by a combination of error state flag bits to be set (<samp>badbit</samp>, <samp>eofbit</samp> and/or <samp>failbit</samp>), or set to <samp>goodbit</samp> (or zero).</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
The first form <i>(1)</i> returns a bitmask of member type <samp><a href="/ios_base::iostate">iostate</a></samp> representing the existing exception mask before the call to this member function. <br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br></code></pre></td>
<td class="source"><pre><code><cite>// ios::exceptions</cite>
<dfn>#include &lt;iostream&gt;     </dfn><cite>// std::cerr</cite>
<dfn>#include &lt;fstream&gt;      </dfn><cite>// std::ifstream</cite>

<var>int</var> main () {
  std::ifstream file;
  file.exceptions ( std::ifstream::failbit | std::ifstream::badbit );
  <var>try</var> {
    file.open (<kbd>"test.txt"</kbd>);
    <var>while</var> (!file.eof()) file.get();
    file.close();
  }
  <var>catch</var> (std::ifstream::failure e) {
    std::cerr &lt;&lt; <kbd>"Exception opening/reading/closing file\n"</kbd>;
  }

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
Accesses <i>(1)</i> or modifies <i>(2)</i> the stream object.<br>
Concurrent access to the same stream object may cause data races.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
<b>Basic guarantee:</b> if an exception is thrown, the stream is in a valid state.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/ios/ios/rdstate/"><b>ios::rdstate</b></a></dt><dd>Get error state flags <span class="typ">(public member function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
