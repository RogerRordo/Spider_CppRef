<div id="I_content">
<div class="C_doc">
<div id="I_type">class template</div>
<div id="I_file">&lt;queue&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span>priority_queue</h1>
<div class="C_prototype"><pre>template &lt;class T, class Container = vector&lt;T&gt;,  class Compare = less&lt;typename Container::value_type&gt; &gt; class priority_queue;</pre></div><div id="I_description">Priority queue</div>
<section id="description">
Priority queues are a type of container adaptors, specifically designed such that its first element is always the greatest of the elements it contains, according to some <i>strict weak ordering</i> criterion.<br>
<br>
This context is similar to a <i>heap</i>, where elements can be inserted at any moment, and only the <i>max heap</i> element can be retrieved (the one at the top in the <i>priority queue</i>).<br>
<br>
Priority queues are implemented as <i>container adaptors</i>, which are classes that use an encapsulated object of a specific container class as its <i>underlying container</i>, providing a specific set of member functions to access its elements. Elements are <i>popped</i> from the <i>"back"</i> of the specific container, which is known as the <i>top</i> of the priority queue.<br>
<br>
The underlying container may be any of the standard container class templates or some other specifically designed container class. The container shall be accessible through <i><a href="/RandomAccessIterator">random access iterators</a></i> and support the following operations:<br>
<ul>
<li><tt>empty()</tt></li>
<li><tt>size()</tt></li>
<li><tt>front()</tt></li>
<li><tt>push_back()</tt></li>
<li><tt>pop_back()</tt></li>
</ul>
<br>
The standard container classes <samp><a href="/vector">vector</a></samp> and <samp><a href="/deque">deque</a></samp> fulfill these requirements. By default, if no container class is specified for a particular <samp><a href="/priority_queue">priority_queue</a></samp> class instantiation, the standard container <samp><a href="/vector">vector</a></samp> is used.<br>
<br>
Support of <i><a href="/RandomAccessIterator">random access iterators</a></i> is required to keep a heap structure internally at all times. This is done automatically by the container adaptor by automatically calling the algorithm functions <samp><a href="/make_heap">make_heap</a></samp>, <samp><a href="/push_heap">push_heap</a></samp> and <samp><a href="/pop_heap">pop_heap</a></samp> when needed.<br>
</section>
<br>
<section id="parameters">
<h3>Template parameters</h3>
<dl>
<dt>T</dt>
<dd>Type of the elements.<br>
Aliased as member type <samp>priority_queue::value_type</samp>.</dd>
<dt>Container</dt>
<dd>Type of the internal <i>underlying container</i> object where the elements are stored.<br>
Its <samp>value_type</samp> shall be <samp>T</samp>.<br>
Aliased as member type <samp>priority_queue::container_type</samp>.</dd>
<dt>Compare</dt>
<dd>A binary predicate that takes two elements (of type <samp>T</samp>) as arguments and returns a <code>bool</code>.<br>
The expression <code>comp(a,b)</code>, where <var>comp</var> is an object of this type and <var>a</var> and <var>b</var> are elements in the container, shall return <code>true</code> if <var>a</var> is considered to go before <var>b</var> in the <i>strict weak ordering</i> the function defines.<br>
The <samp>priority_queue</samp> uses this function to maintain the elements sorted in a way that preserves <i>heap properties</i> (i.e., that the element popped is the last according to this <i>strict weak ordering</i>).<br>
This can be a function pointer or a function object, and defaults to <code><a href="/less">less</a>&lt;T&gt;</code>, which returns the same as applying the <i>less-than operator</i> (<code>a&lt;b</code>).</dd>
</dl>
</section>
<br>
<section id="types">
<h3>Member types</h3>
<div class="C_SwitchCases">
<div title="C++98">
<table class="boxed">
<tr><th>member type</th><th>definition</th><th>notes</th></tr>
<tr><td><tt>value_type</tt></td><td>The first template parameter (<samp>T</samp>)</td><td>Type of the elements</td></tr>
<tr><td><tt>container_type</tt></td><td>The second template parameter (<samp>Container</samp>)</td><td>Type of the <i>underlying container</i></td></tr>
<tr><td><tt>size_type</tt></td><td>an unsigned integral type</td><td>usually the same as <samp><a href="/size_t">size_t</a></samp></td></tr>
</table>
</div>
<div title="C++11">
<table class="boxed">
<tr><th>member type</th><th>definition</th><th>notes</th></tr>
<tr><td><tt>value_type</tt></td><td>The first template parameter (<samp>T</samp>)</td><td>Type of the elements</td></tr>
<tr><td><tt>container_type</tt></td><td>The second template parameter (<samp>Container</samp>)</td><td>Type of the <i>underlying container</i></td></tr>
<tr><td><tt>reference</tt></td><td><samp>container_type::reference</samp></td><td>usually, <code>value_type&</code></td></tr>
<tr><td><tt>const_reference</tt></td><td><samp>container_type::const_reference</samp></td><td>usually, <code>const value_type&</code></td></tr>
<tr><td><tt>size_type</tt></td><td>an unsigned integral type</td><td>usually, the same as <samp><a href="/size_t">size_t</a></samp></td></tr>
</table>
</div>
</div>
</section>
<br>
<section id="functions">
<h3>Member functions</h3>
<dl class="links"><dt><a href= "/reference/queue/priority_queue/priority_queue/"><b>(constructor)</b></a></dt><dd>Construct priority queue <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/queue/priority_queue/empty/"><b>empty</b></a></dt><dd>Test whether container is empty <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/queue/priority_queue/size/"><b>size</b></a></dt><dd>Return size <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/queue/priority_queue/top/"><b>top</b></a></dt><dd>Access top element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/queue/priority_queue/push/"><b>push</b></a></dt><dd>Insert element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/queue/priority_queue/emplace/"><b>emplace <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Construct and insert element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/queue/priority_queue/pop/"><b>pop</b></a></dt><dd>Remove top element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/queue/priority_queue/swap/"><b>swap <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Swap contents <span class="typ">(public member function)</span></dd></dl>
<br>
<h3>Non-member function overloads</h3>
<dl class="links"><dt><a href= "/reference/queue/priority_queue/swap-free/"><b>swap (queue) <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Exchange contents of priority queues <span class="typ">(public member function)</span></dd></dl>
<br>
<h3>Non-member class specializations</h3>
<dl class="links"><dt><a href= "/reference/queue/priority_queue/uses_allocator/"><b>uses_allocator&lt;queue&gt; <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Uses allocator for priority queue <span class="typ">(class template)</span></dd></dl>
<div id="CH_bb"></div></div></div>
