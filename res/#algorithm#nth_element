<div id="I_content">
<div class="C_doc">
<div id="I_type">function template</div>
<div id="I_file">&lt;algorithm&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span>nth_element</h1>
<div class="C_prototype"><table><tr class="odd"><th>default (1)</th><td><pre>template &lt;class RandomAccessIterator&gt;  void nth_element (RandomAccessIterator first, RandomAccessIterator nth,                    RandomAccessIterator last);</pre></td></tr><tr class="even"><th>custom (2)</th><td><pre>template &lt;class RandomAccessIterator, class Compare&gt;  void nth_element (RandomAccessIterator first, RandomAccessIterator nth,                    RandomAccessIterator last, Compare comp);</pre></td></tr></table></div><div id="I_description">Sort element in range</div>
<section id="description">
Rearranges the elements in the range <code>[first,last)</code>, in such a way that the element at the <var>nth</var> position is the element that would be in that position in a sorted sequence.<br>
<br>
The other elements are left without any specific order, except that none of the elements preceding <var>nth</var> are greater than it, and none of the elements following it are less.<br>
<br>
The elements are compared using <code>operator&lt;</code> for the first version, and <var>comp</var> for the second.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>first, last</dt>
<dd><a href="/RandomAccessIterator">Random-access iterators</a> to the initial and final positions of the sequence to be used. The range used is <code>[first,last)</code>, which contains all the elements between <var>first</var> and <var>last</var>, including the element pointed by <var>first</var> but not the element pointed by <var>last</var>.<br>
Notice that in this function, these are not consecutive parameters, but the first and the <strong>third</strong>.</dd>
<dt>nth</dt>
<dd>
<div class="C_SwitchCases">
<div title="C++11">
<a href="/RandomAccessIterator">Random-access iterator</a> pointing to the location within the range <code>[first,last)</code> that will contain the sorted element.<br>
Notice that the value of the element pointed by <var>nth</var> before the call is not relevant.<br>
</div>
<div title="C++14">
<a href="/RandomAccessIterator">Random-access iterator</a> pointing to the location within the range <code>[first,last]</code> that will contain the sorted element.<br>
If this points to <var>last</var>, the function call has no effect.<br>
Notice that the value of the element pointed by <var>nth</var> before the call is not relevant.<br>
</div>
</div>
</dd>
<dt>comp</dt>
<dd>Binary function that accepts two elements in the range as arguments, and returns a value convertible to <code>bool</code>. The value returned indicates whether the element passed as first argument is considered to go before the second in the specific <i>strict weak ordering</i> it defines.<br>
The function shall not modify any of its arguments.<br>
This can either be a function pointer or a function object.<br>
</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
none<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br></code></pre></td>
<td class="source"><pre><code><cite>// nth_element example</cite>
<dfn>#include &lt;iostream&gt;     </dfn><cite>// std::cout</cite>
<dfn>#include &lt;algorithm&gt;    </dfn><cite>// std::nth_element, std::random_shuffle</cite>
<dfn>#include &lt;vector&gt;       </dfn><cite>// std::vector</cite>

<var>bool</var> myfunction (<var>int</var> i,<var>int</var> j) { <var>return</var> (i&lt;j); }

<var>int</var> main () {
  std::vector&lt;<var>int</var>&gt; myvector;

  <cite>// set some values:</cite>
  <var>for</var> (<var>int</var> i=1; i&lt;10; i++) myvector.push_back(i);   <cite>// 1 2 3 4 5 6 7 8 9</cite>

  std::random_shuffle (myvector.begin(), myvector.end());

  <cite>// using default comparison (operator &lt;):</cite>
  std::nth_element (myvector.begin(), myvector.begin()+5, myvector.end());

  <cite>// using function as comp</cite>
  std::nth_element (myvector.begin(), myvector.begin()+5, myvector.end(),myfunction);

  <cite>// print out content:</cite>
  std::cout &lt;&lt; <kbd>"myvector contains:"</kbd>;
  <var>for</var> (std::vector&lt;<var>int</var>&gt;::iterator it=myvector.begin(); it!=myvector.end(); ++it)
    std::cout &lt;&lt; <kbd>' '</kbd> &lt;&lt; *it;
  std::cout &lt;&lt; <kbd>'\n'</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Possible output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>myvector contains: 3 1 4 2 5 6 9 7 8
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
On average, linear in the <a href="/distance">distance</a> between <var>first</var> and <var>last</var>: Compares elements, and possibly swaps (or moves) them, until the elements are properly rearranged.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The objects in the range <code>[first,last)</code> are modified.<br>
</section>
<br>
<section id="exceptions">
<h3>Exceptions</h3>
Throws if any of the element comparisons, the element swaps (or moves) or the operations on iterators throws.<br>
Note that invalid arguments cause <i>undefined behavior</i>.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/algorithm/sort/"><b>sort</b></a></dt><dd>Sort elements in range <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/partial_sort/"><b>partial_sort</b></a></dt><dd>Partially sort elements in range <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/partition/"><b>partition</b></a></dt><dd>Partition range in two <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/find_if/"><b>find_if</b></a></dt><dd>Find element in range <span class="typ">(function template)</span></dd></dl>
<div id="CH_bb"></div></div></div>
