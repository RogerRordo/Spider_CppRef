<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;istream&gt; &lt;iostream&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/istream/basic_istream/">basic_istream</a>::operator>></h1>
<div class="C_prototype"><div class="C_SwitchCases">
<div title="C++98">
<table><tr class="odd"><th>arithmetic types (1)</th><td><pre>basic_istream&amp; operator&gt;&gt; (bool&amp; val);basic_istream&amp; operator&gt;&gt; (short&amp; val);basic_istream&amp; operator&gt;&gt; (unsigned short&amp; val);basic_istream&amp; operator&gt;&gt; (int&amp; val);basic_istream&amp; operator&gt;&gt; (unsigned int&amp; val);basic_istream&amp; operator&gt;&gt; (long&amp; val);basic_istream&amp; operator&gt;&gt; (unsigned long&amp; val);basic_istream&amp; operator&gt;&gt; (float&amp; val);basic_istream&amp; operator&gt;&gt; (double&amp; val);basic_istream&amp; operator&gt;&gt; (long double&amp; val);basic_istream&amp; operator&gt;&gt; (void*&amp; val);</pre></td></tr><tr class="even"><th>stream buffers (2)</th><td><pre>basic_istream&amp; operator&gt;&gt; (basic_streambuf&lt;char_type,traits_type&gt;* sb );</pre></td></tr><tr class="odd"><th>manipulators (3)</th><td><pre>basic_istream&amp; operator&gt;&gt; (basic_istream&amp; (*pf)(basic_istream&amp;));basic_istream&amp; operator&gt;&gt; (  basic_ios&lt;char_type,traits_type&gt;&amp; (*pf)(basic_ios&lt;char_type,traits_type&gt;&amp;));basic_istream&amp; operator&gt;&gt; (ios_base&amp; (*pf)(ios_base&amp;));</pre></td></tr></table></div>
<div title="C++11" class="on">
<table><tr class="even"><th>arithmetic types (1)</th><td><pre>basic_istream&amp; operator&gt;&gt; (bool&amp; val);basic_istream&amp; operator&gt;&gt; (short&amp; val);basic_istream&amp; operator&gt;&gt; (unsigned short&amp; val);basic_istream&amp; operator&gt;&gt; (int&amp; val);basic_istream&amp; operator&gt;&gt; (unsigned int&amp; val);basic_istream&amp; operator&gt;&gt; (long&amp; val);basic_istream&amp; operator&gt;&gt; (unsigned long&amp; val);basic_istream&amp; operator&gt;&gt; (long long&amp; val);basic_istream&amp; operator&gt;&gt; (unsigned long long&amp; val);basic_istream&amp; operator&gt;&gt; (float&amp; val);basic_istream&amp; operator&gt;&gt; (double&amp; val);basic_istream&amp; operator&gt;&gt; (long double&amp; val);basic_istream&amp; operator&gt;&gt; (void*&amp; val);</pre></td></tr><tr class="odd"><th>stream buffers (2)</th><td><pre>basic_istream&amp; operator&gt;&gt; (basic_streambuf&lt;char_type,traits_type&gt;* sb );</pre></td></tr><tr class="even"><th>manipulators (3)</th><td><pre>basic_istream&amp; operator&gt;&gt; (basic_istream&amp; (*pf)(basic_istream&amp;));basic_istream&amp; operator&gt;&gt; (  basic_ios&lt;char_type,traits_type&gt;&amp; (*pf)(basic_ios&lt;char_type,traits_type&gt;&amp;));basic_istream&amp; operator&gt;&gt; (ios_base&amp; (*pf)(ios_base&amp;));</pre></td></tr></table></div>
</div>
</div><div id="I_description">Extract formatted input</div>
<section id="description">
This operator (<code>&gt;&gt;</code>) applied to an input stream is known as <i>extraction operator</i>:<br>
<br>
<dl>
<dt>(1) arithmetic types</dt>
<dd>Extracts and parses characters sequentially from the stream to interpret them as the representation of a value of the proper type, which is stored as the value of <var>val</var>.<br>
Internally, the function accesses the input sequence by first constructing a <samp><a href="/basic_istream::sentry">sentry</a></samp> object (with <var>noskipws</var> set to <code>false</code>). Then (if <samp><a href="/basic_ios::good">good</a></samp>), it calls <samp><a href="/num_get::get">num_get::get</a></samp> (using the stream's <i><a href="/ios_base::getloc">selected locale</a></i>) to perform both the extraction and the parsing operations, adjusting the <i><a href="/basic_ios::rdstate">internal state flags</a></i> accordingly. Finally, it destroys the <samp><a href="/basic_istream::sentry">sentry</a></samp> object before returning.<br>
</dd>
<dt>(2) stream buffers</dt>
<dd>
Extracts as many characters as possible from the stream and inserts them into the output sequence controlled by the <i><a href="/basic_streambuf">stream buffer</a></i> object pointed by <var>sb</var> (if any), until either the input sequence is exhausted or the function fails to insert into the object pointed by <var>sb</var>.<br>
<div class="C_SwitchCases">
<div title="C++98">
The function is considered to perform <i>formatted input</i>: Internally, the function accesses the input sequence by first constructing a <samp><a href="/basic_istream::sentry">sentry</a></samp> object (with <var>noskipws</var> set to <strong><code>false</code></strong>).  Then (if <samp><a href="/basic_ios::good">good</a></samp>), it extracts characters from its associated <i><a href="/basic_streambuf">stream buffer</a></i> object as if calling its member functions <samp><a href="/basic_streambuf::sbumpc">sbumpc</a></samp> or <samp><a href="/basic_streambuf::sgetc">sgetc</a></samp>, and finally destroys the <samp><a href="/basic_istream::sentry">sentry</a></samp> object before returning.<br>
</div>
<div title="C++11">
The function is considered to perform <i>unformatted input</i>: Internally, the function accesses the input sequence by first constructing a <samp><a href="/basic_istream::sentry">sentry</a></samp> object (with <var>noskipws</var> set to <strong><code>true</code></strong>).  Then (if <samp><a href="/basic_ios::good">good</a></samp>), it extracts characters from its associated <i><a href="/basic_streambuf">stream buffer</a></i> object as if calling its member functions <samp><a href="/basic_streambuf::sbumpc">sbumpc</a></samp> or <samp><a href="/basic_streambuf::sgetc">sgetc</a></samp>, and finally destroys the <samp><a href="/basic_istream::sentry">sentry</a></samp> object before returning.<br>
The number of characters successfully read and stored by this function can be accessed by calling member <samp><a href="/basic_istream::gcount">gcount</a></samp>.<br>
</div>
</div>
</dd>
<dt>(3) manipulators</dt>
<dd>Calls <code>pf(*this)</code>, where <var>pf</var> may be a <i>manipulator</i>.<br>
<dfn>Manipulators</dfn> are functions specifically designed to be called when used with this operator.<br>
This operation has no effect on the input sequence and extracts no characters (unless the manipulator itself does, like <samp><a href="/ws">ws</a></samp>).<br>
</dd>
</dl>
<br>
See <samp><a href="/basic_istream:operator&gt;&gt;">operator&gt;&gt;</a></samp> for other overloads that extract characters.<br>
<br>
Except where stated otherwise, calling this function does not alter the value returned by member <samp><a href="/basic_istream::gcount">gcount</a></samp>.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>val</dt>
<dd>Object where the value that the extracted characters represent is stored.<br>
Notice that the type of this argument (along with the stream's <i><a href="/ios_base::fmtflags">format flags</a></i>) influences what constitutes a valid representation.<br>
</dd>
<dt>sb</dt>
<dd>Pointer to a <samp><a href="/basic_streambuf">basic_streambuf</a></samp> object on whose controlled output sequence the characters are copied.<br>
</dd>
<dt>pf</dt>
<dd>A function that takes and returns a stream object. It generally is a <i>manipulator function</i>.<br>
The standard manipulators which have an effect when used on standard <samp><a href="/basic_istream">basic_istream</a></samp> objects are:<br>
<table class="boxed"><tr><th>manipulator</th><th>Effect</th></tr>
<tr><td><samp><a href="/ws">ws</a></samp></td><td>Extracts whitespaces.</td></tr>
<tr><td><samp><a href="/boolalpha">boolalpha</a></samp>/<samp><a href="/noboolalpha">noboolalpha</a></samp></td><td>Activates/deactivates the extraction of alphanumerical representations of values of type <code>bool</code>.</td></tr>
<tr><td><samp><a href="/skipws">skipws</a></samp>/<samp><a href="/noskipws">noskipws</a></samp></td><td>Activates/deactivates whether leading whitespaces are discarded before formatted input operations.</td></tr>
<tr><td><samp><a href="/dec">dec</a></samp>/<samp><a href="/hex">hex</a></samp>/<samp><a href="/oct">oct</a></samp></td><td>Sets that base used to interpret integral numerical values.</td></tr>
</table>
<br>
The following extended manipulators can also be applied to <samp><a href="/basic_istream">basic_istream</a></samp> objects (these take additional arguments and require the explicit inclusion of the <samp><a href="/&lt;iomanip&gt;">&lt;iomanip&gt;</a></samp> header):<br>
<table class="boxed"><tr><th>manipulator</th><th>Effect</th></tr>
<tr><td><samp><a href="/setbase">setbase</a></samp></td><td>Sets the numerical base used to interpret integral numerical values.</td></tr>
<tr><td><samp><a href="/setiosflags">setiosflags</a></samp>/<samp><a href="/resetiosflags">resetiosflags</a></samp></td><td>Set/reset format flags.</td></tr>
</table>
</dd>
</dl>
<br>
<samp>char_type</samp> and <samp>traits_type</samp> are member types defined as aliases of the first and second class template parameters, respectively (see <a href="/basic_istream#types">basic_istream types</a>).<br>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
The <samp><a href="/basic_istream">basic_istream</a></samp> object (<code>*this</code>).<br>
<br>
The extracted value or sequence is not returned, but directly stored in the variable passed as argument.<br>
<br>
Errors are signaled by modifying the <i><a href="/basic_ios::rdstate">internal state flags</a></i>, except for <i>(3)</i>, that never sets any flags (but the particular manipulator applied may):<br>
<table class="boxed">
<tr><th>flag</th><th>error</th></tr>
<tr><td><samp><a href="/ios_base::eofbit">eofbit</a></samp></td><td>The input sequence has no more characters available (<i>end-of-file</i> reached).</td></tr>
<tr><td><samp><a href="/ios_base::failbit">failbit</a></samp></td><td>Either no characters were extracted, or the characters extracted could not be interpreted as a valid value of the appropriate type.<br>
For <i>(2)</i>, it is set when no characters are inserted in the object pointed by <var>sb</var>, or when <var>sb</var> is a <i>null pointer</i>.<br>
</td></tr>
<tr><td><samp><a href="/ios_base::badbit">badbit</a></samp></td><td>Error on stream (such as when this function catches an exception thrown by an internal operation).<br>
When set, the integrity of the stream may have been affected.</td></tr>
</table>
Multiple flags may be set by a single operation.<br>
<br>
If the operation sets an <i><a href="/basic_ios::rdstate">internal state flag</a></i> that was registered with member <samp><a href="/basic_ios::exceptions">exceptions</a></samp>, the function throws an exception of member type <samp><a href="/ios_base::failure">failure</a></samp>.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br></code></pre></td>
<td class="source"><pre><code><cite>// example on extraction</cite>
<dfn>#include &lt;iostream&gt;     </dfn><cite>// std::cin, std::cout, std::hex</cite>

<var>int</var> main () {
  <var>int</var> n;

  std::cout &lt;&lt; <kbd>"Enter a number: "</kbd>;
  std::cin &gt;&gt; n;
  std::cout &lt;&lt; <kbd>"You have entered: "</kbd> &lt;&lt; n &lt;&lt; <kbd>'\n'</kbd>;

  std::cout &lt;&lt; <kbd>"Enter a hexadecimal number: "</kbd>;
  std::cin &gt;&gt; std::hex &gt;&gt; n;         <cite>// manipulator</cite>
  std::cout &lt;&lt; <kbd>"Its decimal equivalent is: "</kbd> &lt;&lt; n &lt;&lt; <kbd>'\n'</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
This example demonstrates the use of some of the overloaded <samp>operator&gt;&gt;</samp> functions shown above using the standard <samp><a href="/basic_istream">basic_istream</a></samp> object <samp><a href="/cin">cin</a></samp>.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
Modifies <var>val</var> or the object pointed by <var>sb</var>.<br>
Modifies the stream object.<br>
Concurrent access to the same stream object may cause data races, except for the standard stream objects <samp><a href="/cin">cin</a></samp> and <samp><a href="/wcin">wcin</a></samp> when these are <i><a href="/ios_base::sync_with_stdio">synchronized with stdio</a></i> (in this case, no data races are initiated, although no guarantees are given on the order in which extracted characters are attributed to threads).<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
<b>Basic guarantee:</b> if an exception is thrown, the object is in a valid state.<br>
It throws an exception of member type <samp><a href="/ios_base::failure">failure</a></samp> if the resulting <i>error state flag</i> is not <samp><a href="/ios_base::goodbit">goodbit</a></samp> and member <samp><a href="/basic_ios::exceptions">exceptions</a></samp> was set to throw for that state.<br>
Any exception thrown by an internal operation is caught and handled by the function, setting <samp><a href="/ios_base::badbit">badbit</a></samp>. If <samp><a href="/ios_base::badbit">badbit</a></samp> was set on the last call to <samp><a href="/basic_ios::exceptions">exceptions</a></samp>, the function rethrows the caught exception.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/istream/basic_istream/get/"><b>basic_istream::get</b></a></dt><dd>Get characters <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/istream/basic_istream/getline/"><b>basic_istream::getline</b></a></dt><dd>Get line <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/ostream/basic_ostream/operator<</"><b>basic_ostream::operator&lt;&lt;</b></a></dt><dd>Insert formatted output <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/istream/basic_istream/sentry/"><b>basic_istream::sentry</b></a></dt><dd>Prepare stream for input <span class="typ">(public member class)</span></dd></dl>
<div id="CH_bb"></div></div></div>
