<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;vector&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/vector/vector/">vector</a>::push_back</h1>
<div class="C_prototype"><div class="C_SwitchCases">
<div title="C++98">
<pre>void push_back (const value_type&amp; val);</pre></div>
<div title="C++11" class="on">
<pre>void push_back (const value_type&amp; val);void push_back (value_type&amp;&amp; val);</pre></div>
</div>
</div><div id="I_description">Add element at the end</div>
<section id="description">
Adds a new element at the end of the <a href="/vector">vector</a>, after its current last element. The content of <i>val</i> is copied (or moved) to the new element.<br>
<br>
This effectively increases the container <a href="/vector::size">size</a> by one, which causes an automatic reallocation of the allocated storage space if -and only if- the new vector <a href="/vector::size">size</a> surpasses the current vector <a href="/vector::capacity">capacity</a>.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>val</dt>
<dd>Value to be copied (or moved) to the new element.<br>
Member type <tt>value_type</tt> is the type of the elements in the container, defined in <a href="/vector">vector</a> as an alias of its first template parameter (<tt>T</tt>).</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
none<br>
<br>
If a reallocation happens, the storage is allocated using the container's <a href="/vector::get_allocator">allocator</a>, which may throw exceptions on failure (for the default <a href="/allocator">allocator</a>, <tt>bad_alloc</tt> is thrown if the allocation request does not succeed).<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br></code></pre></td>
<td class="source"><pre><code><cite>// vector::push_back</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;vector&gt;</dfn>

<var>int</var> main ()
{
  std::vector&lt;<var>int</var>&gt; myvector;
  <var>int</var> myint;

  std::cout &lt;&lt; <kbd>"Please enter some integers (enter 0 to end):\n"</kbd>;

  <var>do</var> {
    std::cin &gt;&gt; myint;
    myvector.push_back (myint);
  } <var>while</var> (myint);

  std::cout &lt;&lt; <kbd>"myvector stores "</kbd> &lt;&lt; <var>int</var>(myvector.size()) &lt;&lt; <kbd>" numbers.\n"</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
The example uses <tt>push_back</tt> to add a new element to the vector each time a new integer is read.<br>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Constant (amortized time, reallocation may happen).<br>
<br>
If a reallocation happens, the reallocation is itself up to linear in the entire <a href="/vector::size">size</a>.<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
If a reallocation happens, all iterators, pointers and references related to the container are invalidated.<br>
Otherwise, only the <a href="/vector::end">end iterator</a> is invalidated, and all iterators, pointers and references to elements are guaranteed to keep referring to the same elements they were referring to before the call.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The container is modified.<br>
If a reallocation happens, all contained elements are modified.<br>
Otherwise, no existing element is accessed, and concurrently accessing or modifying them is safe.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
If no reallocations happen, there are no changes in the container in case of exception (strong guarantee).<br>
If a reallocation happens, the strong guarantee is also given if the type of the elements is either <i>copyable</i> or <i>no-throw moveable</i>.<br>
Otherwise, the container is guaranteed to end in a valid state (basic guarantee).<br>
If <a href="/allocator_traits::construct">allocator_traits::construct</a> is not supported with <i>val</i> as argument, it causes <i>undefined behavior</i>.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/vector/vector/pop_back/"><b>vector::pop_back</b></a></dt><dd>Delete last element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/vector/vector/insert/"><b>vector::insert</b></a></dt><dd>Insert elements <span class="typ">(public member function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
