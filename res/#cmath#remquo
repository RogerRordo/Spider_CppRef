<div id="I_content">
<div class="C_doc">
<div id="I_type">function</div>
<div id="I_file">&lt;cmath&gt; &lt;ctgmath&gt;</div>
<h1>remquo<span class="C_ico cpp11warning" title="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it." alt="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it."></span></h1>
<div class="C_prototype"><div class="C_SwitchCases">
<div title="C99">
<pre>     double remquo  (double numer     , double denom     , int* quot);      float remquof (float numer      , float denom      , int* quot);long double remquol (long double numer, long double denom, int* quot);</pre></div>
<div title="C++11" class="on">
<pre>     double remquo (double numer     , double denom     , int* quot);      float remquo (float numer      , float denom      , int* quot);long double remquo (long double numer, long double denom, int* quot);     double remquo (Type1 numer      , Type2 denom      , int* quot);  // additional overloads</pre></div>
</div>
</div><div id="I_description">Compute remainder and quotient</div>
<section id="description">
Returns the same as <samp><a href="/remainder">remainder</a></samp>, but it additionally stores the quotient internally used to determine its result in the object pointed by <var>quot</var>.<br>
<br>
The value pointed by <var>quot</var> contains the congruent modulo with at least 3 bits of the integral quotient <var>numer</var>/<var>denom</var>.<br>
<br>
<div class="C_SwitchCases">
<div title="C99">
Header <samp><a href="/&lt;ctgmath&gt;">&lt;tgmath.h&gt;</a></samp> provides a type-generic macro version of this function.<br>
</div>
<div title="C++11">
<i>Additional overloads</i> are provided in this header (<code><a href="/&lt;cmath&gt;">&lt;cmath&gt;</a></code>) for other combinations of <a href="/is_arithmetic">arithmetic types</a> (<samp>Type1</samp> and <samp>Type2</samp>): These overloads effectively cast its arguments to <code>double</code> before calculations, except if at least one of the arguments is of type <code>long double</code> (in which case both are casted to <code>long double</code> instead).<br>
</div>
</div>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>numer</dt>
<dd>Floating point value with the quotient numerator.</dd>
<dt>denom</dt>
<dd>Floating point value with the quotient denominator.</dd>
<dt>quot</dt>
<dd>Pointer to an object where the quotient internally used to determine the remainder is stored as a value of type <code>int</code>.</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
The remainder of dividing the arguments.<br>
If this remainder is zero, its sign shall be that of <var>x</var>; In this case, the value stored in <var>quot</var> is unspecified.<br>
If <var>denominator</var> is zero, the function may either return zero or cause  a <i>domain error</i> (depending on the library implementation).<br>
<br>
If a <i>domain error</i> occurs:<br>
- And <samp><a href="/math_errhandling">math_errhandling</a></samp> has <samp><a href="/MATH_ERRNO">MATH_ERRNO</a></samp> set: the global variable <samp><a href="/errno">errno</a></samp> is set to <samp><a href="/EDOM">EDOM</a></samp>.<br>
- And <samp><a href="/math_errhandling">math_errhandling</a></samp> has <samp><a href="/MATH_ERREXCEPT">MATH_ERREXCEPT</a></samp> set: <samp><a href="/FE_INVALID">FE_INVALID</a></samp> is raised.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br></code></pre></td>
<td class="source"><pre><code><cite>/* remquo example */</cite>
<dfn>#include &lt;stdio.h&gt;      </dfn><cite>/* printf */</cite><dfn></dfn>
<dfn>#include &lt;math.h&gt;       </dfn><cite>/* remquo */</cite><dfn></dfn>

<var>int</var> main ()
{
  <var>double</var> numer = 10.3;
  <var>double</var> denom = 4.5;
  <var>int</var> quot;
  <var>double</var> result = remquo (numer,denom,&amp;quot);
  printf (<kbd>"numerator: %f\n"</kbd>, numer);
  printf (<kbd>"denominator: %f\n"</kbd>, denom);
  printf (<kbd>"remainder: %f\n"</kbd>, result);
  printf (<kbd>"quotient: %d\n"</kbd>, quot);
  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>
numerator: 10.300000
denominator: 4.500000
remainer: 1.300000
quotient: 2
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/cmath/remainder/"><b>remainder</b></a></dt><dd>Compute remainder (IEC 60559) <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/fmod/"><b>fmod</b></a></dt><dd>Compute remainder of division <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/fabs/"><b>fabs</b></a></dt><dd>Compute absolute value <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/round/"><b>round</b></a></dt><dd>Round to nearest <span class="typ">(function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
