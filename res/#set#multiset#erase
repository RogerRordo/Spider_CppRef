<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;set&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/set/multiset/">multiset</a>::erase</h1>
<div class="C_prototype"><div class="C_SwitchCases">
<div title="C++98">
<table><tr class="odd"><th>(1)</th><td><pre>     void erase (iterator position);</pre></td></tr><tr class="even"><th>(2)</th><td><pre>size_type erase (const value_type&amp; val);</pre></td></tr><tr class="odd"><th>(3)</th><td><pre>     void erase (iterator first, iterator last);</pre></td></tr></table></div>
<div title="C++11" class="on">
<table><tr class="even"><th>(1)</th><td><pre>iterator  erase (const_iterator position);</pre></td></tr><tr class="odd"><th>(2)</th><td><pre>size_type erase (const value_type&amp; val);</pre></td></tr><tr class="even"><th>(3)</th><td><pre>iterator  erase (const_iterator first, const_iterator last);</pre></td></tr></table></div>
</div>
</div><div id="I_description">Erase elements</div>
<section id="description">
Removes elements from the <a href="/multiset">multiset</a> container.<br>
<br>
This effectively reduces the container <a href="/multiset::size">size</a> by the number of elements removed, which are destroyed.<br>
<br>
The parameters determine the elements removed:<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>position</dt>
<dd>Iterator pointing to a single element to be removed from the <a href="/multiset">multiset</a>.<br>
Member types <tt>iterator</tt> and <tt>const_iterator</tt> are <a href="/BidirectionalIterator">bidirectional iterator</a> types that point to elements.</dd>
<dt>val</dt>
<dd>Value to be removed from the <a href="/multiset">multiset</a>. All elements with a value equivalent to this are removed from the container.<br>
Member type <tt>value_type</tt> is the type of the elements in the container, defined in <a href="/multiset">multiset</a> as an alias of its first template parameter (<tt>T</tt>).</dd>
<dt>first, last</dt>
<dd>Iterators specifying a range within the <a href="/multiset">multiset</a> container to be removed: <tt>[first,last)</tt>. i.e., the range includes all the elements between <i>first</i> and <i>last</i>, including the element pointed by <i>first</i> but not the one pointed by <i>last</i>.<br>
Member types <tt>iterator</tt> and <tt>const_iterator</tt> are <a href="/BidirectionalIterator">bidirectional iterator</a> types that point to elements.</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
For the value-based version (2), the function returns the number of elements erased.<br>
<br>
Member type <tt>size_type</tt> is an unsigned integral type.<br>
<br>
<div class="C_SwitchCases">
<div title="C++98">
The other versions return no value.<br>
</div>
<div title="C++11">
The other versions return an iterator to the element that follows the last element removed (or <a href="/multiset::end">multiset::end</a>, if the last element was removed).<br>
<br>
Member type <tt>iterator</tt> is a <a href="/BidirectionalIterator">bidirectional iterator</a> type that points to elements.</div>
</div>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br></code></pre></td>
<td class="source"><pre><code><cite>// erasing from multiset</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;set&gt;</dfn>

<var>int</var> main ()
{
  std::multiset&lt;<var>int</var>&gt; mymultiset;
  std::multiset&lt;<var>int</var>&gt;::iterator it;

  <cite>// insert some values:</cite>
  mymultiset.insert (40);                            <cite>// 40</cite>
  <var>for</var> (<var>int</var> i=1; i&lt;7; i++) mymultiset.insert(i*10);   <cite>// 10 20 30 40 40 50 60</cite>

  it=mymultiset.begin();
  it++;                                              <cite>//    ^</cite>

  mymultiset.erase (it);                             <cite>// 10 30 40 40 50 60</cite>

  mymultiset.erase (40);                             <cite>// 10 30 50 60</cite>

  it=mymultiset.find (50);
  mymultiset.erase ( it, mymultiset.end() );         <cite>// 10 30</cite>

  std::cout &lt;&lt; <kbd>"mymultiset contains:"</kbd>;
  <var>for</var> (it=mymultiset.begin(); it!=mymultiset.end(); ++it)
    std::cout &lt;&lt; <kbd>' '</kbd> &lt;&lt; *it;
  std::cout &lt;&lt; <kbd>'\n'</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>mymultiset contains: 10 30
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
For the first version (<tt>erase(position)</tt>), amortized constant.<br>
For the second version (<tt>erase(val)</tt>), logarithmic in container <a href="/multiset::size">size</a>, plus linear in the number of elements removed.<br>
For the last version (<tt>erase(first,last)</tt>), linear in the distance between <i>first</i> and <i>last</i>.<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
Iterators, pointers and references referring to elements removed by the function are invalidated.<br>
All other iterators, pointers and references keep their validity.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The container is modified.<br>
The elements removed are modified. Concurrently accessing other elements is safe, although iterating ranges in the container is not.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
Unless the container's <a href="/multiset::key_comp">comparison object</a> throws, this function never throws exceptions (no-throw guarantee).<br>
Otherwise, if a single element is to be removed, there are no changes in the container in case of exception (strong guarantee).<br>
Otherwise, the container is guaranteed to end in a valid state (basic guarantee).<br>
If an invalid <i>position</i> or range is specified, it causes <i>undefined behavior</i>.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/set/multiset/clear/"><b>multiset::clear</b></a></dt><dd>Clear content <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/set/multiset/insert/"><b>multiset::insert</b></a></dt><dd>Insert element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/set/multiset/find/"><b>multiset::find</b></a></dt><dd>Get iterator to element <span class="typ">(public member function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
