<div id="I_content">
<div class="C_doc">
<div id="I_type">function template</div>
<div id="I_file">&lt;algorithm&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span>move<span class="C_ico cpp11warning" title="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it." alt="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it."></span></h1>
<div class="C_prototype"><pre>template &lt;class InputIterator, class OutputIterator&gt;  OutputIterator move (InputIterator first, InputIterator last, OutputIterator result);</pre></div><div id="I_description">Move range of elements</div>
<section id="description">
Moves the elements in the range <code>[first,last)</code> into the range beginning at <var>result</var>.<br>
<br>
The value of the elements in the <code>[first,last)</code> is transferred to the elements pointed by <var>result</var>. After the call, the elements in the range <code>[first,last)</code> are left in an unspecified but valid state.<br>
<br>
The ranges shall not overlap in such a way that <var>result</var> points to an element in the range <var>[first,last)</var>. For such cases, see <samp><a href="/move_backward">move_backward</a></samp>.<br>
<br>
The behavior of this function template is equivalent to:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br></code></pre></td>
<td class="source"><pre><code><var>template</var>&lt;<var>class</var> InputIterator, <var>class</var> OutputIterator&gt;
  OutputIterator move (InputIterator first, InputIterator last, OutputIterator result)
{
  <var>while</var> (first!=last) {
    *result = std::move(*first);
    ++result; ++first;
  }
  <var>return</var> result;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>first, last</dt>
<dd><a href="/InputIterator">Input iterators</a> to the initial and final positions in a sequence to be moved. The range used is <code>[first,last)</code>, which contains all the elements between <var>first</var> and <var>last</var>, including the element pointed by <var>first</var> but not the element pointed by <var>last</var>.</dd>
<dt>result</dt>
<dd><a href="/OutputIterator">Output iterator</a> to the initial position in the destination sequence.<br>
This shall not point to any element in the range <code>[first,last)</code>.<br>
</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
An iterator to the end of the destination range where elements have been moved.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br></code></pre></td>
<td class="source"><pre><code><cite>// move algorithm example</cite>
<dfn>#include &lt;iostream&gt;     </dfn><cite>// std::cout</cite>
<dfn>#include &lt;algorithm&gt;    </dfn><cite>// std::move (ranges)</cite>
<dfn>#include &lt;utility&gt;      </dfn><cite>// std::move (objects)</cite>
<dfn>#include &lt;vector&gt;       </dfn><cite>// std::vector</cite>
<dfn>#include &lt;string&gt;       </dfn><cite>// std::string</cite>

<var>int</var> main () {
  std::vector&lt;std::string&gt; foo = {<kbd>"air"</kbd>,<kbd>"water"</kbd>,<kbd>"fire"</kbd>,<kbd>"earth"</kbd>};
  std::vector&lt;std::string&gt; bar (4);

  <cite>// moving ranges:</cite>
  std::cout &lt;&lt; <kbd>"Moving ranges...\n"</kbd>;
  std::move ( foo.begin(), foo.begin()+4, bar.begin() );

  std::cout &lt;&lt; <kbd>"foo contains "</kbd> &lt;&lt; foo.size() &lt;&lt; <kbd>" elements:"</kbd>;
  std::cout &lt;&lt; <kbd>" (each in an unspecified but valid state)"</kbd>;
  std::cout &lt;&lt; <kbd>'\n'</kbd>;

  std::cout &lt;&lt; <kbd>"bar contains "</kbd> &lt;&lt; bar.size() &lt;&lt; <kbd>" elements:"</kbd>;
  <var>for</var> (std::string&amp; x: bar) std::cout &lt;&lt; <kbd>" ["</kbd> &lt;&lt; x &lt;&lt; <kbd>"]"</kbd>;
  std::cout &lt;&lt; <kbd>'\n'</kbd>;

  <cite>// moving container:</cite>
  std::cout &lt;&lt; <kbd>"Moving container...\n"</kbd>;
  foo = std::move (bar);

  std::cout &lt;&lt; <kbd>"foo contains "</kbd> &lt;&lt; foo.size() &lt;&lt; <kbd>" elements:"</kbd>;
  <var>for</var> (std::string&amp; x: foo) std::cout &lt;&lt; <kbd>" ["</kbd> &lt;&lt; x &lt;&lt; <kbd>"]"</kbd>;
  std::cout &lt;&lt; <kbd>'\n'</kbd>;

  std::cout &lt;&lt; <kbd>"bar is in an unspecified but valid state"</kbd>;
  std::cout &lt;&lt; <kbd>'\n'</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Possible output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>Moving ranges...
foo contains 4 elements: (each in an unspecified but valid state)
bar contains 4 elements: [air] [water] [fire] [earth]
Moving container...
foo contains 4 elements: [air] [water] [fire] [earth]
bar is in an unspecified but valid state
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Linear in the <a href="/distance">distance</a> between <var>first</var> and <var>last</var>: Performs a move-assignment for each element in the range.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The objects in both ranges are modified.<br>
</section>
<br>
<section id="exceptions">
<h3>Exceptions</h3>
Throws if either an element move-assignment or an operation on iterators throws.<br>
Note that invalid arguments cause <i>undefined behavior</i>.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/algorithm/move_backward/"><b>move_backward</b></a></dt><dd>Move range of elements backward <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/copy/"><b>copy</b></a></dt><dd>Copy range of elements <span class="typ">(function template)</span></dd></dl>
<div id="CH_bb"></div></div></div>
