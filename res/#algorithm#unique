<div id="I_content">
<div class="C_doc">
<div id="I_type">function template</div>
<div id="I_file">&lt;algorithm&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span>unique</h1>
<div class="C_prototype"><table><tr class="odd"><th>equality (1)</th><td><pre>template &lt;class ForwardIterator&gt;  ForwardIterator unique (ForwardIterator first, ForwardIterator last);</pre></td></tr><tr class="even"><th>predicate (2)</th><td><pre>template &lt;class ForwardIterator, class BinaryPredicate&gt;  ForwardIterator unique (ForwardIterator first, ForwardIterator last,                          BinaryPredicate pred);</pre></td></tr></table></div><div id="I_description">Remove consecutive duplicates in range</div>
<section id="description">
Removes all but the first element from every consecutive group of equivalent elements in the range <code>[first,last)</code>.<br>
<br>
The function cannot alter the properties of the object containing the range of elements (i.e., it cannot alter the size of an array or a container): The removal is done by replacing the duplicate elements by the next element that is not a duplicate, and signaling the new size of the shortened range by returning an iterator to the element that should be considered its new <i>past-the-end</i> element.<br>
<br>
The relative order of the elements not removed is preserved, while the elements between the returned iterator and <var>last</var> are left in a valid but unspecified state.<br>
<br>
The function uses <code>operator==</code> to compare the pairs of elements (or <var>pred</var>, in version <i>(2)</i>).<br>
<br>
The behavior of this function template is equivalent to:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br></code></pre></td>
<td class="source"><pre><code><var>template</var> &lt;<var>class</var> ForwardIterator&gt;
  ForwardIterator unique (ForwardIterator first, ForwardIterator last)
{
  <var>if</var> (first==last) <var>return</var> last;

  ForwardIterator result = first;
  <var>while</var> (++first != last)
  {
    <var>if</var> (!(*result == *first))  <cite>// or: if (!pred(*result,*first)) for version (2)</cite>
      *(++result)=*first;
  }
  <var>return</var> ++result;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>first, last</dt>
<dd><a href="/ForwardIterator">Forward iterators</a> to the initial and final positions of the sequence of <i><a href="/is_move_assignable">move-assignable</a></i> elements. The range used is <code>[first,last)</code>, which contains all the elements between <var>first</var> and <var>last</var>, including the element pointed by <var>first</var> but not the element pointed by <var>last</var>.</dd>
<dt>pred</dt>
<dd>Binary function that accepts two elements in the range as argument, and returns a value convertible to <code>bool</code>. The value returned indicates whether both arguments are considered equivalent (if <code>true</code>, they are equivalent and one of them is removed).<br>
The function shall not modify any of its arguments.<br>
This can either be a function pointer or a function object.</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
An iterator to the element that follows the last element not removed.<br>
The range between <var>first</var> and this iterator includes all the elements in the sequence that were not considered duplicates.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br></code></pre></td>
<td class="source"><pre><code><cite>// unique algorithm example</cite>
<dfn>#include &lt;iostream&gt;     </dfn><cite>// std::cout</cite>
<dfn>#include &lt;algorithm&gt;    </dfn><cite>// std::unique, std::distance</cite>
<dfn>#include &lt;vector&gt;       </dfn><cite>// std::vector</cite>

<var>bool</var> myfunction (<var>int</var> i, <var>int</var> j) {
  <var>return</var> (i==j);
}

<var>int</var> main () {
  <var>int</var> myints[] = {10,20,20,20,30,30,20,20,10};           <cite>// 10 20 20 20 30 30 20 20 10</cite>
  std::vector&lt;<var>int</var>&gt; myvector (myints,myints+9);

  <cite>// using default comparison:</cite>
  std::vector&lt;<var>int</var>&gt;::iterator it;
  it = std::unique (myvector.begin(), myvector.end());   <cite>// 10 20 30 20 10 ?  ?  ?  ?</cite>
                                                         <cite>//                ^</cite>

  myvector.resize( std::distance(myvector.begin(),it) ); <cite>// 10 20 30 20 10</cite>

  <cite>// using predicate comparison:</cite>
  std::unique (myvector.begin(), myvector.end(), myfunction);   <cite>// (no changes)</cite>

  <cite>// print out content:</cite>
  std::cout &lt;&lt; <kbd>"myvector contains:"</kbd>;
  <var>for</var> (it=myvector.begin(); it!=myvector.end(); ++it)
    std::cout &lt;&lt; <kbd>' '</kbd> &lt;&lt; *it;
  std::cout &lt;&lt; <kbd>'\n'</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>myvector contains: 10 20 30 20 10
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
For non-empty ranges, linear in one less than the <a href="/distance">distance</a> between <var>first</var> and <var>last</var>: Compares each pair of consecutive elements, and possibly performs assignments on some of them.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The objects in the range <code>[first,last)</code> are accessed and potentially modified.<br>
</section>
<br>
<section id="exceptions">
<h3>Exceptions</h3>
Throws if any of <var>pred</var>, the element comparisons, the element assignments or the operations on iterators throws.<br>
Note that invalid arguments cause <i>undefined behavior</i>.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/algorithm/unique_copy/"><b>unique_copy</b></a></dt><dd>Copy range removing duplicates <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/adjacent_find/"><b>adjacent_find</b></a></dt><dd>Find equal adjacent elements in range <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/remove/"><b>remove</b></a></dt><dd>Remove value from range <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/remove_if/"><b>remove_if</b></a></dt><dd>Remove elements from range <span class="typ">(function template)</span></dd></dl>
<div id="CH_bb"></div></div></div>
