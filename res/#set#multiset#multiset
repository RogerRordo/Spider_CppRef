<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;set&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/set/multiset/">multiset</a>::multiset</h1>
<div class="C_prototype"><div class="C_SwitchCases">
<div title="C++98">
<table><tr class="odd"><th>empty (1)</th><td><pre>explicit multiset (const key_compare&amp; comp = key_compare(),                   const allocator_type&amp; alloc = allocator_type());</pre></td></tr><tr class="even"><th>range (2)</th><td><pre>template &lt;class InputIterator&gt;  multiset (InputIterator first, InputIterator last,            const key_compare&amp; comp = key_compare(),            const allocator_type&amp; alloc = allocator_type());</pre></td></tr><tr class="odd"><th>copy (3)</th><td><pre>multiset (const multiset&amp; x);</pre></td></tr></table></div>
<div title="C++11" class="on">
<table><tr class="even"><th>empty (1)</th><td><pre>explicit multiset (const key_compare&amp; comp = key_compare(),                   const allocator_type&amp; alloc = allocator_type());explicit multiset (const allocator_type&amp; alloc);</pre></td></tr><tr class="odd"><th>range (2)</th><td><pre>template &lt;class InputIterator&gt;  multiset (InputIterator first, InputIterator last,            const key_compare&amp; comp = key_compare(),            const allocator_type&amp; = allocator_type());</pre></td></tr><tr class="even"><th>copy (3)</th><td><pre>multiset (const multiset&amp; x);multiset (const multiset&amp; x, const allocator_type&amp; alloc);</pre></td></tr><tr class="odd"><th>move (4)</th><td><pre>multiset (multiset&amp;&amp; x);multiset (multiset&amp;&amp; x, const allocator_type&amp; alloc);</pre></td></tr><tr class="even"><th>initializer list (5)</th><td><pre>multiset (initializer_list&lt;value_type&gt; il,          const key_compare&amp; comp = key_compare(),          const allocator_type&amp; alloc = allocator_type());</pre></td></tr></table></div>
<div title="C++14" class="on">
<table><tr class="odd"><th>empty (1)</th><td><pre>mutiset();explicit multiset (const key_compare&amp; comp,                   const allocator_type&amp; alloc = allocator_type());explicit multiset (const allocator_type&amp; alloc);</pre></td></tr><tr class="even"><th>range (2)</th><td><pre>template &lt;class InputIterator&gt;  multiset (InputIterator first, InputIterator last,            const key_compare&amp; comp = key_compare(),            const allocator_type&amp; = allocator_type());template &lt;class InputIterator&gt;  multiset (InputIterator first, InputIterator last,            const allocator_type&amp; = allocator_type());</pre></td></tr><tr class="odd"><th>copy (3)</th><td><pre>multiset (const multiset&amp; x);multiset (const multiset&amp; x, const allocator_type&amp; alloc);</pre></td></tr><tr class="even"><th>move (4)</th><td><pre>multiset (multiset&amp;&amp; x);multiset (multiset&amp;&amp; x, const allocator_type&amp; alloc);</pre></td></tr><tr class="odd"><th>initializer list (5)</th><td><pre>multiset (initializer_list&lt;value_type&gt; il,          const key_compare&amp; comp = key_compare(),          const allocator_type&amp; alloc = allocator_type());multiset (initializer_list&lt;value_type&gt; il,          const allocator_type&amp; alloc = allocator_type());</pre></td></tr></table></div>
</div>
</div><div id="I_description">Construct multiset</div>
<section id="description">
Constructs a <a href="/multiset">multiset</a> container object, initializing its contents depending on the constructor version used:<br>
<br>
<div class="C_SwitchCases">
<div title="C++98">
<dl>
<dt>(1) empty container constructor (default constructor)</dt>
<dd>Constructs an <a href="/multiset::empty">empty</a> container, with no elements.</dd>
<dt>(2) range constructor</dt>
<dd>Constructs a container with as many elements as the range <tt>[first,last)</tt>, with each element constructed from its corresponding element in that range.</dd>
<dt>(3) copy constructor</dt>
<dd>Constructs a container with a copy of each of the elements in <i>x</i>.</dd>
</dl>
<br>
The container keeps an internal copy of <i>alloc</i> and <i>comp</i>, which are used to allocate storage and to sort the elements throughout its lifetime.<br>
The copy constructor <i>(3)</i> creates a container that keeps and uses copies of <i>x</i>'s <a href="/multiset::get_allocator">allocator</a> and <a href="/multiset::key_comp">comparison object</a>.<br>
<br>
The storage for the elements is allocated using this <a href="/multiset::get_allocator">internal allocator</a>.<br>
<br>
The elements are sorted according to the <a href="/multiset::key_comp">comparison object</a>.<br>
</div>
<div title="C++11">
<dl>
<dt>(1) empty container constructors (default constructor)</dt>
<dd>Constructs an <a href="/multiset::empty">empty</a> container, with no elements.</dd>
<dt>(2) range constructor</dt>
<dd>Constructs a container with as many elements as the range <tt>[first,last)</tt>, with each element <i>emplace-constructed</i> from its corresponding element in that range.</dd>
<dt>(3) copy constructor (and copying with allocator)</dt>
<dd>Constructs a container with a copy of each of the elements in <i>x</i>.</dd>
<dt>(4) move constructor (and moving with allocator)</dt>
<dd>Constructs a container that acquires the elements of <i>x</i>.<br>
If <i>alloc</i> is specified and is different from <i>x</i>'s allocator, the elements are moved. Otherwise, no elements are constructed (their ownership is directly transferred).<br>
<i>x</i> is left in an unspecified but valid state.</dd>
<dt>(5) initializer list constructor</dt>
<dd>Constructs a container with a copy of each of the elements in <i>il</i>.</dd>
</dl>
<br>
The container keeps an internal copy of <i>alloc</i>, which is used to allocate and deallocate storage for its elements, and to construct and destroy them (as specified by its <a href="/allocator_traits">allocator_traits</a>). If no <var>alloc</var> argument is passed to the constructor, a default-constructed allocator is used, except in the following cases:<br>
- The copy constructor <i>(3, first signature)</i> creates a container that keeps and uses a copy of the allocator returned by calling the appropriate <a href="/allocator_traits::select_on_container_copy_construction">selected_on_container_copy_construction</a> trait on <i>x</i>'s allocator.<br>
- The move constructor <i>(4, first signature)</i> acquires <i>x</i>'s allocator.<br>
<br>
The container also keeps an internal copy of <i>comp</i> (or <i>x</i>'s <a href="/multiset::key_comp">comparison object</a>), which is used to establish the order of the elements in the container and to check for equivalent elements.<br>
<br>
All elements are <i>copied</i>, <i>moved</i> or otherwise <i>constructed</i> by calling <a href="/allocator_traits::construct">allocator_traits::construct</a> with the appropriate arguments.<br>
<br>
The elements are sorted according to the <a href="/multiset::key_comp">comparison object</a>. If elements that are equivalent are passed to the constructor, their relative order is preserved.<br>
</div>
</div>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>comp</dt>
<dd>Binary predicate that, taking two values of the same type of those contained in the <a href="/multiset">multiset</a>, returns <tt>true</tt> if the first argument goes before the second argument in the <i>strict weak ordering</i> it defines, and <tt>false</tt> otherwise.<br>
This shall be a function pointer or a function object.<br>
Member type <tt>key_compare</tt> is the internal comparison object type used by the container, defined in <a href="/multiset">multiset</a> as an alias of its second template parameter (<tt>Compare</tt>).<br>
If <tt>key_compare</tt> uses the default <a href="/less">less</a> (which has no state), this parameter is not relevant.</dd>
<dt>alloc</dt>
<dd>Allocator object.<br>
The container keeps and uses an internal copy of this allocator.<br>
Member type <tt>allocator_type</tt> is the internal allocator type used by the container, defined in <a href="/multiset">multiset</a> as an alias of its third template parameter (<tt>Alloc</tt>).<br>
If <tt>allocator_type</tt> is an instantiation of the default <a href="/allocator">allocator</a> (which has no state), this parameter is not relevant.</dd>
<dt>first, last</dt>
<dd><a href="/InputIterator">Input iterators</a> to the initial and final positions in a range. The range used is <tt>[first,last)</tt>, which includes all the elements between <i>first</i> and <i>last</i>, including the element pointed by <i>first</i> but not the element pointed by <i>last</i>.<br>
The function template argument <tt>InputIterator</tt> shall be an <a href="/InputIterator">input iterator</a> type that points to elements of a type from which <tt>value_type</tt> objects can be constructed.</dd>
<dt>x</dt>
<dd>Another <a href="/multiset">multiset</a> object of the same type (with the same class template arguments <tt>T</tt>, <tt>Compare</tt> and <tt>Alloc</tt>), whose contents are either copied or acquired.<br>
</dd>
<dt>il</dt>
<dd>An <a href="/initializer_list">initializer_list</a> object.<br>
These objects are automatically constructed from <i>initializer list</i> declarators.<br>
Member type <tt>value_type</tt> is the type of the elements in the container, defined in <a href="/multiset">multiset</a> as an alias of its first template parameter (<tt>T</tt>).</dd>
</dl>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br></code></pre></td>
<td class="source"><pre><code><cite>// constructing multisets</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;set&gt;</dfn>

<var>bool</var> fncomp (<var>int</var> lhs, <var>int</var> rhs) {<var>return</var> lhs&lt;rhs;}

<var>struct</var> classcomp {
  <var>bool</var> <var>operator</var>() (<var>const</var> <var>int</var>&amp; lhs, <var>const</var> <var>int</var>&amp; rhs) <var>const</var>
  {<var>return</var> lhs&lt;rhs;}
};

<var>int</var> main ()
{
  std::multiset&lt;<var>int</var>&gt; first;                          <cite>// empty multiset of ints</cite>

  <var>int</var> myints[]= {10,20,30,20,20};
  std::multiset&lt;<var>int</var>&gt; second (myints,myints+5);       <cite>// pointers used as iterators</cite>

  std::multiset&lt;<var>int</var>&gt; third (second);                 <cite>// a copy of second</cite>

  std::multiset&lt;<var>int</var>&gt; fourth (second.begin(), second.end());  <cite>// iterator ctor.</cite>

  std::multiset&lt;<var>int</var>,classcomp&gt; fifth;                <cite>// class as Compare</cite>

  <var>bool</var>(*fn_pt)(<var>int</var>,<var>int</var>) = fncomp;
  std::multiset&lt;<var>int</var>,<var>bool</var>(*)(<var>int</var>,<var>int</var>)&gt; sixth (fn_pt); <cite>// function pointer as Compare</cite>

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
The code does not produce any output, but demonstrates some ways in which a <a href="/multiset">multiset</a> container can be constructed.<br>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Constant for the <i>empty constructors (1)</i>, and for the <i>move constructors (4)</i> (unless <i>alloc</i> is different from <i>x</i>'s allocator).<br>
For all other cases, linear in the distance between the iterators (copy constructions) if the elements are already sorted according to the same criterion. For unsorted sequences, linearithmic (<tt>N*logN</tt>) in that distance (sorting,copy constructions).<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
The <i>move constructors</i> (4), invalidate all iterators, pointers and references related to <i>x</i> if the elements are moved.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
All copied elements are accessed.<br>
The <i>move constructors (4)</i> modify <i>x</i>.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
<b>Strong guarantee:</b> no effects in case an exception is thrown.<br>
If <a href="/allocator_traits::construct">allocator_traits::construct</a> is not supported with the appropriate arguments for the element constructions, or if the range specified by <tt>[first,last)</tt> is not valid, it causes <i>undefined behavior</i>.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/set/multiset/operator=/"><b>multiset::operator=</b></a></dt><dd>Copy container content <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/set/multiset/insert/"><b>multiset::insert</b></a></dt><dd>Insert element <span class="typ">(public member function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
