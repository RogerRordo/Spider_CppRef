<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;unordered_set&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/unordered_set/unordered_set/">unordered_set</a>::swap<span class="C_ico cpp11warning" title="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it." alt="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it."></span></h1>
<div class="C_prototype"><pre>void swap ( unordered_set&amp; ust );</pre></div><div id="I_description">Swap content</div>
<section id="description">
Exchanges the content of the container by the content of <i>ust</i>, which is another <a href="/unordered_set">unordered_set</a> object containing elements of the same type. Sizes may differ.<br>
<br>
After the call to this member function, the elements in this container are those which were in <i>ust</i> before the call, and the elements of <i>ust</i> are those which were in <tt>this</tt>. Other objects kept internally by the containers (such as their <tt>hasher</tt> or <tt>key_equal</tt> objects) are also swapped.<br>
<br>
This function exchanges internal pointers to data between the containers without actually performing any copies or moves on the individual elements, allowing for constant time execution no matter the sizes.<br>
<br>
Notice that a global algorithm function exists with this same name, <a href="/swap">swap</a>. This global function is overloaded for arguments of type <a href="/unordered_set">unordered_set</a>  to have the same behavior and complexity as this member function.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>ust</dt>
<dd>Another <a href="/unordered_set">unordered_set</a> container object of the same type as this.</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
none<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br></code></pre></td>
<td class="source"><pre><code><cite>// unordered_set::swap</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>
<dfn>#include &lt;unordered_set&gt;</dfn>

<var>int</var> main ()
{
  std::unordered_set&lt;std::string&gt;
     first = {<kbd>"iron"</kbd>,<kbd>"copper"</kbd>,<kbd>"oil"</kbd>},
     second  = {<kbd>"wood"</kbd>,<kbd>"corn"</kbd>,<kbd>"milk"</kbd>};

  first.swap(second);

  std::cout &lt;&lt; <kbd>"first:"</kbd>;
  <var>for</var> (<var>const</var> std::string&amp; x: first) std::cout &lt;&lt; <kbd>" "</kbd> &lt;&lt; x;
  std::cout &lt;&lt; std::endl;

  std::cout &lt;&lt; <kbd>"second:"</kbd>;
  <var>for</var> (<var>const</var> std::string&amp; x: second) std::cout &lt;&lt; <kbd>" "</kbd> &lt;&lt; x;
  std::cout &lt;&lt; std::endl;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Possible output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>first: corn milk wood
second: oil copper iron
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Constant.<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
All iterators, pointers and references remain valid, but now are referring to elements in the other container, and iterate in it.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/unordered_set/unordered_set/swap(global)/"><b>swap (unordered_set)</b></a></dt><dd>Exchanges contents of two unordered_set containers <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/utility/swap/"><b>swap</b></a></dt><dd>Exchange values of two objects <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/swap_ranges/"><b>swap_ranges</b></a></dt><dd>Exchange values of two ranges <span class="typ">(function template)</span></dd></dl>
</section>
<div id="CH_bb"></div></div></div>
