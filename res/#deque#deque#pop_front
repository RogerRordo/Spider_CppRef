<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;deque&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/deque/deque/">deque</a>::pop_front</h1>
<div class="C_prototype"><pre>void pop_front();</pre></div><div id="I_description">Delete first element</div>
<section id="description">
Removes the first element in the <a href="/deque">deque</a> container, effectively reducing its <a href="/deque::size">size</a> by one.<br>
<br>
This destroys the removed element.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
none<br>
</section>
<br>
<section id="return">
<h3>Return value</h3>
none<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br></code></pre></td>
<td class="source"><pre><code><cite>// deque::pop_front</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;deque&gt;</dfn>

<var>int</var> main ()
{
  std::deque&lt;<var>int</var>&gt; mydeque;

  mydeque.push_back (100);
  mydeque.push_back (200);
  mydeque.push_back (300);

  std::cout &lt;&lt; <kbd>"Popping out the elements in mydeque:"</kbd>;
  <var>while</var> (!mydeque.empty())
  {
    std::cout &lt;&lt; <kbd>' '</kbd> &lt;&lt; mydeque.front();
    mydeque.pop_front();
  }

  std::cout &lt;&lt; <kbd>"\nThe final size of mydeque is "</kbd> &lt;&lt; <var>int</var>(mydeque.size()) &lt;&lt; <kbd>'\n'</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>Popping out the elements in mydeque: 100 200 300
The final size of mydeque is 0
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Constant.<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
The iterators, pointers and references referring to the removed element are invalidated.<br>
Iterators, pointers and references referring to other elements that have not been removed are guaranteed to keep referring to the same elements they were referring to before the call.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The container is modified.<br>
The first element is modified. Concurrently accessing or modifying other elements is safe (although see <i>iterator validity</i> above).<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
If the container is not <a href="/deque::empty">empty</a>, the function never throws exceptions (no-throw guarantee).<br>
Otherwise, the behavior is undefined.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/deque/deque/pop_back/"><b>deque::pop_back</b></a></dt><dd>Delete last element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/deque/deque/push_front/"><b>deque::push_front</b></a></dt><dd>Insert element at beginning <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/deque/deque/erase/"><b>deque::erase</b></a></dt><dd>Erase elements <span class="typ">(public member function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
