<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;istream&gt; &lt;iostream&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/istream/basic_istream/">basic_istream</a>::get</h1>
<div class="C_prototype"><table><tr class="odd"><th>single character (1)</th><td><pre>int_type get();basic_istream&amp; get (char_type&amp; c);</pre></td></tr><tr class="even"><th>c-string (2)</th><td><pre>basic_istream&amp; get (char_type* s, streamsize n);basic_istream&amp; get (char_type* s, streamsize n, char_type delim);</pre></td></tr><tr class="odd"><th>stream buffer (3)</th><td><pre>basic_istream&amp; get (basic_streambuf&lt;char_type,traits_type&gt;&amp; sb);basic_istream&amp; get (basic_streambuf&lt;char_type,traits_type&gt;&amp; sb, char_type delim);</pre></td></tr></table></div><div id="I_description">Get characters</div>
<section id="description">
Extracts characters from the stream, as <i>unformatted input</i>:<br>
<br>
<dl>
<dt>(1) single character</dt>
<dd>Extracts a single character from the stream.<br>
The character is either returned (first signature), or set as the value of its argument (second signature).</dd>
<dt>(2) c-string</dt>
<dd>Extracts characters from the stream and stores them in <var>s</var> as a c-string, until either <code>(n-1)</code> characters have been extracted or the <var>delimiting character</var> is encountered: the <dfn>delimiting character</dfn> being either the <i>newline character</i> (<code><a href="/basic_ios::widen">widen</a>('\n')</code>) or <var>delim</var> (if this argument is specified).<br>
The <i>delimiting character</i> is <strong>not</strong> extracted from the input sequence if found, and remains there as the next character to be extracted from the stream (see <samp><a href="/basic_istream::getline">getline</a></samp> for an alternative that <em>does</em> discard the <i>delimiting character</i>).<br>
A <i>null character</i> (<code>char_type()</code>) is automatically appended to the written sequence if <var>n</var> is greater than zero, even if an empty string is extracted.<br>
</dd>
<dt>(3) stream buffer</dt>
<dd>Extracts characters from the stream and inserts them into the output sequence controlled by the <i><a href="/basic_streambuf">stream buffer</a></i> object <var>sb</var>, stopping either as soon as such an insertion fails or as soon as the <i>delimiting character</i> is encountered in the input sequence (the <dfn>delimiting character</dfn> being either the <i>newline character</i> or <var>delim</var>, if this argument is specified).<br>
Only the characters successfully inserted into <var>sb</var> are extracted from the stream: Neither the <i>delimiting character</i>, nor eventually the character that failed to be inserted at <var>sb</var>, are extracted from the input sequence and remain there as the next character to be extracted from the stream.<br>
</dd>
</dl>
<br>
The function also stops extracting characters if the <i>end-of-file</i> is reached. If this is reached prematurely (before meeting the conditions described above), the function sets the <samp><a href="/ios_base::eofbit">eofbit</a></samp> flag.<br>
<br>
Internally, the function accesses the input sequence by first constructing a <samp><a href="/basic_istream::sentry">sentry</a></samp> object (with <var>noskipws</var> set to <code>true</code>). Then (if <samp><a href="/basic_ios::good">good</a></samp>), it extracts characters from its associated <i><a href="/basic_streambuf">stream buffer</a></i> object as if calling its member functions <samp><a href="/basic_streambuf::sbumpc">sbumpc</a></samp> or <samp><a href="/basic_streambuf::sgetc">sgetc</a></samp>, and finally destroys the <samp><a href="/basic_istream::sentry">sentry</a></samp> object before returning.<br>
<br>
The number of characters successfully read and stored by this function can be accessed by calling member <samp><a href="/basic_istream::gcount">gcount</a></samp>.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>c</dt>
<dd>The reference to a character where the extracted value is stored.</dd>
<dt>s</dt>
<dd>Pointer to an array of characters where extracted characters are stored as a c-string.<br>
If the function does not extract any characters (or if the first character extracted is the <i>delimiter character</i>) and <var>n</var> is greater than zero, this is set to an empty c-string.<br>
</dd>
<dt>n</dt>
<dd>Maximum number of characters to write to <var>s</var> (including the terminating null character).<br>
If this is less than <code>2</code>, the function does not extract any characters and sets <samp><a href="/ios_base::failbit">failbit</a></samp>.<br>
<samp><a href="/streamsize">streamsize</a></samp> is a signed integral type.<br>
</dd>
<dt>delim</dt>
<dd>Explicit <i>delimiting character</i>: The operation of extracting successive characters stops as soon as the next character to extract compares equal to this (using <samp><a href="/char_traits::eq">traits_type::eq</a></samp>).</dd>
<dt>sb</dt>
<dd>A <samp><a href="/basic_streambuf">basic_streambuf</a></samp> object on whose controlled output sequence the characters are copied.<br>
</dd>
</dl>
Member type <samp>char_type</samp> is the type of characters used by the stream (i.e., its first class template parameter, <samp>charT</samp>).<br>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
The first signature returns the character read, or the <i><a href="/char_traits::eof">end-of-file</a></i> value (<code><a href="/char_traits::eof">traits_type::eof()</a></code>) if no characters are available in the stream (note that in this case, the <samp><a href="/ios_base::failbit">failbit</a></samp> flag is also set).<br>
<br>
Member type <samp>int_type</samp> is an integral type able to represent any character value or the special <i><a href="/char_traits::eof">end-of-file</a></i> value.<br>
<br>
All other signatures always return <code>*this</code>. Note that this return value can be checked for the state of the stream (see <i><a href="/basic_ios::operator bool">casting a stream to bool</a></i> for more info).<br>
<br>
Errors are signaled by modifying the <i><a href="/basic_ios::rdstate">internal state flags</a></i>:<br>
<table class="boxed">
<tr><th>flag</th><th>error</th></tr>
<tr><td><samp><a href="/ios_base::eofbit">eofbit</a></samp></td><td>The function stopped extracting characters because the input sequence has no more characters available (<i>end-of-file</i> reached).</td></tr>
<tr><td><samp><a href="/ios_base::failbit">failbit</a></samp></td><td>Either no characters were written or an empty c-string was stored in <var>s</var>.</td></tr>
<tr><td><samp><a href="/ios_base::badbit">badbit</a></samp></td><td>Error on stream (such as when this function catches an exception thrown by an internal operation).<br>
When set, the integrity of the stream may have been affected.</td></tr>
</table>
Multiple flags may be set by a single operation.<br>
<br>
If the operation sets an <i><a href="/basic_ios::rdstate">internal state flag</a></i> that was registered with member <samp><a href="/basic_ios::exceptions">exceptions</a></samp>, the function throws an exception of member type <samp><a href="/ios_base::failure">failure</a></samp>.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br></code></pre></td>
<td class="source"><pre><code><cite>// istream::get example</cite>
<dfn>#include &lt;iostream&gt;     </dfn><cite>// std::cin, std::cout</cite>
<dfn>#include &lt;fstream&gt;      </dfn><cite>// std::ifstream</cite>

<var>int</var> main () {
  <var>char</var> str[256];

  std::cout &lt;&lt; <kbd>"Enter the name of an existing text file: "</kbd>;
  std::cin.get (str,256);    <cite>// get c-string</cite>

  std::ifstream is(str);     <cite>// open file</cite>

  <var>char</var> c;
  <var>while</var> (is.get(c))          <cite>// loop getting single characters</cite>
    std::cout &lt;&lt; c;

  is.close();                <cite>// close file</cite>

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
This example prompts for the name of an existing text file and prints its content on the screen, using <samp>cin.get</samp> both to get individual characters and c-strings.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
Modifies <var>c</var>, <var>sb</var> or the elements in the array pointed by <var>s</var>.<br>
Modifies the stream object.<br>
Concurrent access to the same stream object may cause data races, except for the standard stream objects <samp><a href="/cin">cin</a></samp> and <samp><a href="/wcin">wcin</a></samp> when these are <i><a href="/ios_base::sync_with_stdio">synchronized with stdio</a></i> (in this case, no data races are initiated, although no guarantees are given on the order in which extracted characters are attributed to threads).<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
<b>Basic guarantee:</b> if an exception is thrown, the object is in a valid state.<br>
It throws an exception of member type <samp><a href="/ios_base::failure">failure</a></samp> if the resulting <i>error state flag</i> is not <samp><a href="/ios_base::goodbit">goodbit</a></samp> and member <samp><a href="/ios::exceptions">exceptions</a></samp> was set to throw for that state.<br>
Any exception thrown by an internal operation is caught and handled by the function, setting <samp><a href="/ios_base::badbit">badbit</a></samp>. If <samp><a href="/ios_base::badbit">badbit</a></samp> was set on the last call to <samp><a href="/ios::exceptions">exceptions</a></samp>, the function rethrows the caught exception.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/istream/basic_istream/getline/"><b>basic_istream::getline</b></a></dt><dd>Get line <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/istream/basic_istream/ignore/"><b>basic_istream::ignore</b></a></dt><dd>Extract and discard characters <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/istream/basic_istream/gcount/"><b>basic_istream::gcount</b></a></dt><dd>Get character count <span class="typ">(public member function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
