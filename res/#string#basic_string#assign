<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;string&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/string/basic_string/">basic_string</a>::assign</h1>
<div class="C_prototype"><div class="C_SwitchCases">
<div title="C++98">
<table><tr class="odd"><th>string (1)</th><td><pre>basic_string&amp; assign (const basic_string&amp; str);</pre></td></tr><tr class="even"><th>substring (2)</th><td><pre>basic_string&amp; assign (const basic_string&amp; str, size_type subpos, size_type sublen);</pre></td></tr><tr class="odd"><th>c-string (3)</th><td><pre>basic_string&amp; assign (const charT* s);</pre></td></tr><tr class="even"><th>buffer (4)</th><td><pre>basic_string&amp; assign (const charT* s, size_type n);</pre></td></tr><tr class="odd"><th>fill (5)</th><td><pre>basic_string&amp; assign (size_type n, charT c);</pre></td></tr><tr class="even"><th>range (6)</th><td><pre>template &lt;class InputIterator&gt;   basic_string&amp; assign (InputIterator first, InputIterator last);</pre></td></tr></table></div>
<div title="C++11" class="on">
<table><tr class="odd"><th>string (1)</th><td><pre>basic_string&amp; assign (const basic_string&amp; str);</pre></td></tr><tr class="even"><th>substring (2)</th><td><pre>basic_string&amp; assign (const basic_string&amp; str, size_type subpos, size_type sublen);</pre></td></tr><tr class="odd"><th>c-string (3)</th><td><pre>basic_string&amp; assign (const charT* s);</pre></td></tr><tr class="even"><th>buffer (4)</th><td><pre>basic_string&amp; assign (const charT* s, size_type n);</pre></td></tr><tr class="odd"><th>fill (5)</th><td><pre>basic_string&amp; assign (size_type n, charT c);</pre></td></tr><tr class="even"><th>range (6)</th><td><pre>template &lt;class InputIterator&gt;   basic_string&amp; assign (InputIterator first, InputIterator last);</pre></td></tr><tr class="odd"><th>initializer list(7)</th><td><pre>basic_string&amp; assign (initializer_list&lt;charT&gt; il);</pre></td></tr><tr class="even"><th>move (8)</th><td><pre>basic_string&amp; assign (basic_string&amp;&amp; str) noexcept;</pre></td></tr></table></div>
<div title="C++14" class="on">
<table><tr class="odd"><th>string (1)</th><td><pre>basic_string&amp; assign (const basic_string&amp; str);</pre></td></tr><tr class="even"><th>substring (2)</th><td><pre>basic_string&amp; assign (const basic_string&amp; str, size_type subpos, size_type sublen = npos);</pre></td></tr><tr class="odd"><th>c-string (3)</th><td><pre>basic_string&amp; assign (const charT* s);</pre></td></tr><tr class="even"><th>buffer (4)</th><td><pre>basic_string&amp; assign (const charT* s, size_type n);</pre></td></tr><tr class="odd"><th>fill (5)</th><td><pre>basic_string&amp; assign (size_type n, charT c);</pre></td></tr><tr class="even"><th>range (6)</th><td><pre>template &lt;class InputIterator&gt;   basic_string&amp; assign (InputIterator first, InputIterator last);</pre></td></tr><tr class="odd"><th>initializer list(7)</th><td><pre>basic_string&amp; assign (initializer_list&lt;charT&gt; il);</pre></td></tr><tr class="even"><th>move (8)</th><td><pre>basic_string&amp; assign (basic_string&amp;&amp; str) noexcept;</pre></td></tr></table></div>
</div>
</div><div id="I_description">Assign content to string</div>
<section id="description">
Assigns a new value to the string, replacing its current contents.<br>
<br>
<dl>
<dt>(1) string</dt>
<dd>Copies <i>str</i>.</dd>
<dt>(2) substring</dt>
<dd>Copies the portion of <i>str</i> that begins at the character position <i>subpos</i> and spans <i>sublen</i> characters (or until the end of <i>str</i>, if either <i>str</i> is too short or if <i>sublen</i> is <a href="/basic_string::npos">basic_string::npos</a>).</dd>
<dt>(3) c-string</dt>
<dd>Copies the null-terminated character sequence (C-string) pointed by <i>s</i>.<br>
The <a href="/basic_string::length">length</a> is determined by calling <tt><a href="/char_traits::length">traits_type::length</a>(s)</tt>.</dd>
<dt>(4) buffer</dt>
<dd>Copies the first <i>n</i> characters from the array of characters pointed by <i>s</i>.</dd>
<dt>(5) fill</dt>
<dd>Replaces the current value by <i>n</i> consecutive copies of character <i>c</i>.</dd>
<dt>(6) range</dt>
<dd>Copies the sequence of characters in the range <tt>[first,last)</tt>, in the same order.</dd>
<dt>(7) initializer list</dt>
<dd>Copies each of the characters in <i>il</i>, in the same order.</dd>
<dt>(8) move</dt>
<dd>Acquires the contents of <i>str</i>.<br>
<i>str</i> is left in an unspecified but valid state.</dd>
</dl>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>str</dt>
<dd>Another <a href="/basic_string">basic_string</a> object of the same type (with the same class template arguments <tt>charT</tt>, <tt>traits</tt> and <tt>Alloc</tt>), whose value is either copied or moved.<br>
</dd>
<dt>subpos</dt>
<dd>Position of the first character in <i>str</i> that is copied to the object as a substring.<br>
If this is greater than <i>str</i>'s <a href="/basic_string::length">length</a>, it throws <a href="/out_of_range">out_of_range</a>.<br>
Note: The first character in <i>str</i> is denoted by a value of <tt>0</tt> (not <tt>1</tt>).<br>
</dd>
<dt>sublen</dt>
<dd>Length of the substring to be copied (if the string is shorter, as many characters as possible are copied).<br>
A value of <a href="/basic_string::npos">basic_string::npos</a> indicates all characters until the end of <i>str</i>.</dd>
<dt>s</dt>
<dd>Pointer to an array of characters (such as a <i>c-string</i>).</dd>
<dt>n</dt>
<dd>Number of characters to copy.</dd>
<dt>c</dt>
<dd>Character value, repeated <i>n</i> times.</dd>
<dt>first, last</dt>
<dd><a href="/InputIterator">Input iterators</a> to the initial and final positions in a range. The range used is <tt>[first,last)</tt>, which includes all the characters between <i>first</i> and <i>last</i>, including the character pointed by <i>first</i> but not the character pointed by <i>last</i>.<br>
The function template argument <tt>InputIterator</tt> shall be an <a href="/InputIterator">input iterator</a> type that points to elements of a type convertible to <tt>charT</tt>.<br>
If <tt>InputIterator</tt> is an integral type, the arguments are casted to the proper types so that signature (5) is used instead.</dd>
<dt>il</dt>
<dd>An <a href="/initializer_list">initializer_list</a> object.<br>
These objects are automatically constructed from <i>initializer list</i> declarators.</dd>
</dl>
<br>
<tt>charT</tt> is <a href="/basic_string">basic_string</a>'s character type (i.e., its first template parameter).<br>
Member type <tt>size_type</tt> is an unsigned integral type.<br>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
<tt>*this</tt>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br></code></pre></td>
<td class="source"><pre><code><cite>// string::assign</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>

<var>int</var> main ()
{
  std::string str;
  std::string base=<kbd>"The quick brown fox jumps over a lazy dog."</kbd>;

  <cite>// used in the same order as described above:</cite>

  str.assign(base);
  std::cout &lt;&lt; str &lt;&lt; <kbd>'\n'</kbd>;

  str.assign(base,10,9);
  std::cout &lt;&lt; str &lt;&lt; <kbd>'\n'</kbd>;         <cite>// "brown fox"</cite>

  str.assign(<kbd>"pangrams are cool"</kbd>,7);
  std::cout &lt;&lt; str &lt;&lt; <kbd>'\n'</kbd>;         <cite>// "pangram"</cite>

  str.assign(<kbd>"c-string"</kbd>);
  std::cout &lt;&lt; str &lt;&lt; <kbd>'\n'</kbd>;         <cite>// "c-string"</cite>

  str.assign(10,<kbd>'*'</kbd>);
  std::cout &lt;&lt; str &lt;&lt; <kbd>'\n'</kbd>;         <cite>// "**********"</cite>

  str.assign&lt;<var>int</var>&gt;(10,0x2D);
  std::cout &lt;&lt; str &lt;&lt; <kbd>'\n'</kbd>;         <cite>// "----------"</cite>

  str.assign(base.begin()+16,base.end()-12);
  std::cout &lt;&lt; str &lt;&lt; <kbd>'\n'</kbd>;         <cite>// "fox jumps over"</cite>

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>The quick brown fox jumps over a lazy dog.
brown fox
pangram
c-string
**********
----------
fox jumps over
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
<div class="C_SwitchCases">
<div title="C++98">
Unspecified.<br>
</div>
<div title="C++11">
Unspecified, but generally linear in the new <a href="/basic_string::length">string length</a> (and constant for the <i>move version</i>).<br>
</div>
</div>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
Any iterators, pointers and references related to this object may be invalidated.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The object is modified.<br>
The <i>move assign</i> form <i>(8)</i>, modifies <var>str</var>.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
For the <i>move assign (8)</i>, the function does not throw exceptions (no-throw guarantee).<br>
In all other cases, there are no effects in case an exception is thrown (strong guarantee).<br>
<br>
If <tt>s</tt> does not point to an array long enough, or if the range specified by <tt>[first,last)</tt> is not valid, it causes <i>undefined behavior</i>.<br>
<br>
If <i>subpos</i> is greater than <i>str</i>'s <a href="/basic_string::length">length</a>, an <a href="/out_of_range">out_of_range</a> exception is thrown.<br>
If the resulting <a href="/basic_string::length">string length</a> would exceed the <a href="/basic_string::max_size">max_size</a>, a <a href="/length_error">length_error</a> exception is thrown.<br>
If the type uses the <a href="/allocator">default allocator</a>, a <a href="/bad_alloc">bad_alloc</a> exception is thrown if the function needs to allocate storage and fails.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/string/basic_string/operator=/"><b>basic_string::operator=</b></a></dt><dd>String assignment <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/string/basic_string/append/"><b>basic_string::append</b></a></dt><dd>Append to string <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/string/basic_string/insert/"><b>basic_string::insert</b></a></dt><dd>Insert into string <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/string/basic_string/replace/"><b>basic_string::replace</b></a></dt><dd>Replace portion of string <span class="typ">(public member function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
