<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;string&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/string/basic_string/">basic_string</a>::push_back</h1>
<div class="C_prototype"><pre>void push_back (charT c);</pre></div><div id="I_description">Append character to string</div>
<section id="description">
Appends character <i>c</i> to the end of the <a href="/basic_string">basic_string</a>, increasing its <a href="/basic_string::length">length</a> by one.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>c</dt>
<dd>Character added to the <a href="/basic_string">basic_string</a>.<br>
<tt>charT</tt> is <a href="/basic_string">basic_string</a>'s character type (i.e., its first template parameter).<br>
</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
none<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br></code></pre></td>
<td class="source"><pre><code><cite>// string::push_back</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;fstream&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>

<var>int</var> main ()
{
  std::string str;
  std::ifstream file (<kbd>"test.txt"</kbd>,std::ios::in);
  <var>if</var> (file) {
    <var>while</var> (!file.eof()) str.push_back(file.get());
  }
  std::cout &lt;&lt; str &lt;&lt; <kbd>'\n'</kbd>;
  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
This example reads an entire file character by character, appending each character to a string object using <tt>push_back</tt>.<br>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Unspecified; Generally amortized constant, but up to linear in the new <a href="/basic_string::length">string length</a>.<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
Any iterators, pointers and references related to this object may be invalidated.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The object is modified.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
<b>Strong guarantee:</b> if an exception is thrown, there are no changes in the <a href="/basic_string">basic_string</a>.<br>
<br>
If the resulting <a href="/basic_string::length">string length</a> would exceed the <a href="/basic_string::max_size">max_size</a>, a <a href="/length_error">length_error</a> exception is thrown.<br>
If the type uses the <a href="/allocator">default allocator</a>, a <a href="/bad_alloc">bad_alloc</a> exception is thrown if the function needs to allocate storage and fails.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/string/basic_string/back/"><b>basic_string::back</b></a></dt><dd>Access last character <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/string/basic_string/pop_back/"><b>basic_string::pop_back</b></a></dt><dd>Delete last character <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/string/basic_string/append/"><b>basic_string::append</b></a></dt><dd>Append to string <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/string/basic_string/insert/"><b>basic_string::insert</b></a></dt><dd>Insert into string <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/string/basic_string/end/"><b>basic_string::end</b></a></dt><dd>Return iterator to end <span class="typ">(public member function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
