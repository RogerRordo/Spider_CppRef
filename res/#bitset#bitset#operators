<div id="I_content">
<div class="C_doc">
<div id="I_type">function</div>
<div id="I_file">&lt;bitset&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span>bitset operators</h1>
<div class="C_prototype"><div class="C_SwitchCases">
<div title="C++98">
<table><tr class="odd"><th>member functions</th><td><pre>bitset&amp; operator&amp;= (const bitset&amp; rhs);bitset&amp; operator|= (const bitset&amp; rhs);bitset&amp; operator^= (const bitset&amp; rhs);bitset&amp; operator&lt;&lt;= (size_t pos);bitset&amp; operator&gt;&gt;= (size_t pos);bitset operator~() const;bitset operator&lt;&lt;(size_t pos) const;bitset operator&gt;&gt;(size_t pos) const;bool operator== (const bitset&amp; rhs) const;bool operator!= (const bitset&amp; rhs) const;</pre></td></tr><tr class="even"><th>non-member functions</th><td><pre>template&lt;size_t N&gt;  bitset&lt;N&gt; operator&amp; (const bitset&lt;N&gt;&amp; lhs, const bitset&lt;N&gt;&amp; rhs);template&lt;size_t N&gt;  bitset&lt;N&gt; operator| (const bitset&lt;N&gt;&amp; lhs, const bitset&lt;N&gt;&amp; rhs);template&lt;size_t N&gt;  bitset&lt;N&gt; operator^ (const bitset&lt;N&gt;&amp; lhs, const bitset&lt;N&gt;&amp; rhs);</pre></td></tr><tr class="odd"><th>iostream inserters/extractors</th><td><pre>template&lt;class charT, class traits, size_t N&gt;  basic_istream&lt;charT, traits&gt;&amp;    operator&gt;&gt; (basic_istream&lt;charT,traits&gt;&amp; is, bitset&lt;N&gt;&amp; rhs);template&lt;class charT, class traits, size_t N&gt;  basic_ostream&lt;charT, traits&gt;&amp;    operator&lt;&lt; (basic_ostream&lt;charT,traits&gt;&amp; os, const bitset&lt;N&gt;&amp; rhs);</pre></td></tr></table></div>
<div title="C++11" class="on">
<table><tr class="even"><th>member functions</th><td><pre>bitset&amp; operator&amp;= (const bitset&amp; rhs) noexcept;bitset&amp; operator|= (const bitset&amp; rhs) noexcept;bitset&amp; operator^= (const bitset&amp; rhs) noexcept;bitset&amp; operator&lt;&lt;= (size_t pos) noexcept;bitset&amp; operator&gt;&gt;= (size_t pos) noexcept;bitset operator~() const noexcept;bitset operator&lt;&lt;(size_t pos) const noexcept;bitset operator&gt;&gt;(size_t pos) const noexcept;bool operator== (const bitset&amp; rhs) const noexcept;bool operator!= (const bitset&amp; rhs) const noexcept;</pre></td></tr><tr class="odd"><th>non-member functions</th><td><pre>template&lt;size_t N&gt;  bitset&lt;N&gt; operator&amp; (const bitset&lt;N&gt;&amp; lhs, const bitset&lt;N&gt;&amp; rhs) noexcept;template&lt;size_t N&gt;  bitset&lt;N&gt; operator| (const bitset&lt;N&gt;&amp; lhs, const bitset&lt;N&gt;&amp; rhs) noexcept;template&lt;size_t N&gt;  bitset&lt;N&gt; operator^ (const bitset&lt;N&gt;&amp; lhs, const bitset&lt;N&gt;&amp; rhs) noexcept;</pre></td></tr><tr class="even"><th>iostream inserters/extractors</th><td><pre>template&lt;class charT, class traits, size_t N&gt;  basic_istream&lt;charT, traits&gt;&amp;    operator&gt;&gt; (basic_istream&lt;charT,traits&gt;&amp; is, bitset&lt;N&gt;&amp; rhs);template&lt;class charT, class traits, size_t N&gt;  basic_ostream&lt;charT, traits&gt;&amp;    operator&lt;&lt; (basic_ostream&lt;charT,traits&gt;&amp; os, const bitset&lt;N&gt;&amp; rhs);</pre></td></tr></table></div>
</div>
</div><div id="I_description">Bitset operators</div>
<section id="description">
Performs the proper bitwise operation using the contents of the <samp><a href="/bitset">bitset</a></samp>.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>lhs</dt>
<dd>Left-hand side <samp><a href="/bitset">bitset</a></samp> object (for non-member functions).</dd>
<dt>rhs</dt>
<dd>Right-hand side <samp><a href="/bitset">bitset</a></samp> object.<br>
Both the <i>left-hand side</i> and <i>right-hand side</i> <samp><a href="/bitset">bitset</a></samp> objects must have the same amount of bits (i.e., have the same class template parameter, <var>N</var>).</dd>
<dt>pos</dt>
<dd>Number of bit locations to be shifted.</dd>
<dt>is,os</dt>
<dd><samp><a href="/basic_istream">basic_istream</a></samp> or <samp><a href="/basic_ostream">basic_ostream</a></samp> object from which a <samp><a href="/bitset">bitset</a></samp> object is respectively extracted or inserted. The format in which bitsets are inserted/extracted is a sequence of (suitably widened) <code>'0'</code> and <code>'1'</code> characters.</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
If a reference: the left-hand side object (<code>*this</code>, <var>is</var> or <var>os</var>).<br>
Otherwise: the result of the operation (either a <samp><a href="/bitset">bitset</a></samp> object, or <code>true</code> or <code>false</code> for the relational operators).<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br></code></pre></td>
<td class="source"><pre><code><cite>// bitset operators</cite>
<dfn>#include &lt;iostream&gt;       </dfn><cite>// std::cout</cite>
<dfn>#include &lt;string&gt;         </dfn><cite>// std::string</cite>
<dfn>#include &lt;bitset&gt;         </dfn><cite>// std::bitset</cite>

<var>int</var> main ()
{
  std::bitset&lt;4&gt; foo (std::string(<kbd>"1001"</kbd>));
  std::bitset&lt;4&gt; bar (std::string(<kbd>"0011"</kbd>));

  std::cout &lt;&lt; (foo^=bar) &lt;&lt; <kbd>'\n'</kbd>;       <cite>// 1010 (XOR,assign)</cite>
  std::cout &lt;&lt; (foo&amp;=bar) &lt;&lt; <kbd>'\n'</kbd>;       <cite>// 0010 (AND,assign)</cite>
  std::cout &lt;&lt; (foo|=bar) &lt;&lt; <kbd>'\n'</kbd>;       <cite>// 0011 (OR,assign)</cite>

  std::cout &lt;&lt; (foo&lt;&lt;=2) &lt;&lt; <kbd>'\n'</kbd>;        <cite>// 1100 (SHL,assign)</cite>
  std::cout &lt;&lt; (foo&gt;&gt;=1) &lt;&lt; <kbd>'\n'</kbd>;        <cite>// 0110 (SHR,assign)</cite>

  std::cout &lt;&lt; (~bar) &lt;&lt; <kbd>'\n'</kbd>;           <cite>// 1100 (NOT)</cite>
  std::cout &lt;&lt; (bar&lt;&lt;1) &lt;&lt; <kbd>'\n'</kbd>;         <cite>// 0110 (SHL)</cite>
  std::cout &lt;&lt; (bar&gt;&gt;1) &lt;&lt; <kbd>'\n'</kbd>;         <cite>// 0001 (SHR)</cite>

  std::cout &lt;&lt; (foo==bar) &lt;&lt; <kbd>'\n'</kbd>;       <cite>// false (0110==0011)</cite>
  std::cout &lt;&lt; (foo!=bar) &lt;&lt; <kbd>'\n'</kbd>;       <cite>// true  (0110!=0011)</cite>

  std::cout &lt;&lt; (foo&amp;bar) &lt;&lt; <kbd>'\n'</kbd>;        <cite>// 0010</cite>
  std::cout &lt;&lt; (foo|bar) &lt;&lt; <kbd>'\n'</kbd>;        <cite>// 0111</cite>
  std::cout &lt;&lt; (foo^bar) &lt;&lt; <kbd>'\n'</kbd>;        <cite>// 0101</cite>

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>
1010
0010
0011
1100
0110
1100
0110
0001
0
1
0010
0111
0101
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="access">
<h3>Data races</h3>
All bit position in the <samp><a href="/bitset">bitset</a></samp> objects involved in the operation are accessed, and -if in a compound assignment- also modified.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
The stream inserter/extractors leave all objects in a valid state in case of exception (basic guarantee).<br>
The other operations never throw exceptions (no-throw guarantee).<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/bitset/bitset/operator[]/"><b>bitset::operator[]</b></a></dt><dd>Access bit <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/bitset/bitset/set/"><b>bitset::set</b></a></dt><dd>Set bits <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/bitset/bitset/reset/"><b>bitset::reset</b></a></dt><dd>Reset bits <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/bitset/bitset/flip/"><b>bitset::flip</b></a></dt><dd>Flip bits <span class="typ">(public member function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
