<div id="I_content">
<div class="C_doc">
<div id="I_type">function template</div>
<div id="I_file">&lt;algorithm&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span>minmax_element<span class="C_ico cpp11warning" title="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it." alt="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it."></span></h1>
<div class="C_prototype"><table><tr class="odd"><th>default (1)</th><td><pre>template &lt;class ForwardIterator&gt;  pair&lt;ForwardIterator,ForwardIterator&gt;    minmax_element (ForwardIterator first, ForwardIterator last);</pre></td></tr><tr class="even"><th>custom (2)</th><td><pre>template &lt;class ForwardIterator, class Compare&gt;  pair&lt;ForwardIterator,ForwardIterator&gt;    minmax_element (ForwardIterator first, ForwardIterator last, Compare comp);</pre></td></tr></table></div><div id="I_description">Return smallest and largest elements in range</div>
<section id="description">
Returns a <samp><a href="/pair">pair</a></samp> with an iterator pointing to the element with the smallest value in the range <code>[first,last)</code> as first element, and the largest as second.<br>
<br>
The comparisons are performed using either <code>operator&lt;</code> for the first version, or <var>comp</var> for the second.<br>
<br>
If more than one equivalent element has the smallest value, the first iterator points to the first of such elements.<br>
<br>
If more than one equivalent element has the largest value, the second iterator points to the last of such elements.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>first, last</dt>
<dd><a href="/InputIterator">Input iterators</a> to the initial and final positions of the sequence to compare. The range used is <code>[first,last)</code>, which contains all the elements between <var>first</var> and <var>last</var>, including the element pointed by <var>first</var> but not the element pointed by <var>last</var>.</dd>
<dt>comp</dt>
<dd>Binary function that accepts two elements in the range as arguments, and returns a value convertible to <code>bool</code>. The value returned indicates whether the element passed as first argument is considered less than the second.<br>
The function shall not modify any of its arguments.<br>
This can either be a function pointer or a function object.<br>
</dd>
</section>
<br>
<section id="return">
<h3>Return value</h3>
A <samp><a href="/pair">pair</a></samp> with an iterator pointing to the element with the smallest value in the range <code>[first,last)</code> as first element, and the largest as second.<br>
<br>
<samp><a href="/pair">pair</a></samp> is a class template defined in <samp><a href="/&lt;utility&gt;">&lt;utility&gt;</a></samp>.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br></code></pre></td>
<td class="source"><pre><code><cite>// minmax_element</cite>
<dfn>#include &lt;iostream&gt;     </dfn><cite>// std::cout</cite>
<dfn>#include &lt;algorithm&gt;    </dfn><cite>// std::minmax_element</cite>
<dfn>#include &lt;array&gt;        </dfn><cite>// std::array</cite>

<var>int</var> main () {
  std::array&lt;<var>int</var>,7&gt; foo {3,7,2,9,5,8,6};

  <var>auto</var> result = std::minmax_element (foo.begin(),foo.end());

  <cite>// print result:</cite>
  std::cout &lt;&lt; <kbd>"min is "</kbd> &lt;&lt; *result.first;
  std::cout &lt;&lt; <kbd>", at position "</kbd> &lt;&lt; (result.first-foo.begin()) &lt;&lt; <kbd>'\n'</kbd>;
  std::cout &lt;&lt; <kbd>"max is "</kbd> &lt;&lt; *result.second;
  std::cout &lt;&lt; <kbd>", at position "</kbd> &lt;&lt; (result.second-foo.begin()) &lt;&lt; <kbd>'\n'</kbd>;

  <var>return</var> 0;
}
</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>min is 2, at position 2
max is 9, at position 3
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Up to linear in <code>1.5</code> times one less than the number of elements compared.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The objects in the range <code>[first,last)</code> are accessed.<br>
</section>
<br>
<section id="exceptions">
<h3>Exceptions</h3>
Throws if any comparison throws.<br>
Note that invalid arguments cause <i>undefined behavior</i>.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/algorithm/minmax/"><b>minmax</b></a></dt><dd>Return smallest and largest elements <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/min_element/"><b>min_element</b></a></dt><dd>Return smallest element in range <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/max_element/"><b>max_element</b></a></dt><dd>Return largest element in range <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/lower_bound/"><b>lower_bound</b></a></dt><dd>Return iterator to lower bound <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/upper_bound/"><b>upper_bound</b></a></dt><dd>Return iterator to upper bound <span class="typ">(function template)</span></dd></dl>
<div id="CH_bb"></div></div></div>
