<div id="I_content">
<div class="C_doc">
<div id="I_type">function template</div>
<div id="I_file">&lt;algorithm&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span>partition_point<span class="C_ico cpp11warning" title="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it." alt="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it."></span></h1>
<div class="C_prototype"><pre>template &lt;class ForwardIterator, class UnaryPredicate&gt;  ForwardIterator partition_point (ForwardIterator first, ForwardIterator last,                                   UnaryPredicate pred);</pre></div><div id="I_description">Get partition point</div>
<section id="description">
Returns an iterator to the first element in the partitioned range <code>[first,last)</code> for which <var>pred</var> is not <code>true</code>, indicating its partition point.<br>
<br>
The elements in the range shall already be partitioned, as if <a href="/partition">partition</a> had been called with the same arguments.<br>
<br>
The function optimizes the number of comparisons performed by comparing non-consecutive elements of the sorted range, which is specially efficient for <a href="/RandomAccessIterator">random-access iterators</a>.<br>
<br>
The behavior of this function template is equivalent to:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br></code></pre></td>
<td class="source"><pre><code><var>template</var> &lt;<var>class</var> ForwardIterator, <var>class</var> UnaryPredicate&gt;
  ForwardIterator partition_point (ForwardIterator first, ForwardIterator last,
                                   UnaryPredicate pred)
{
  <var>auto</var> n = distance(first,last);
  <var>while</var> (n&gt;0)
  {
    ForwardIterator it = first;
    <var>auto</var> step = n/2;
    std::advance (it,step);
    <var>if</var> (pred(*it)) { first=++it; n-=step+1; }
    <var>else</var> n=step;
  }
  <var>return</var> first;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>first, last</dt>
<dd><a href="/ForwardIterator">Forward iterators</a> to the initial and final positions of the partitioned sequence. The range checked is <code>[first,last)</code>, which contains all the elements between <var>first</var> and <var>last</var>, including the element pointed by <var>first</var> but not the element pointed by <var>last</var>.</dd>
<dt>pred</dt>
<dd>Unary function that accepts an element in the range as argument, and returns a value convertible to <code>bool</code>. The value returned indicates whether the element goes before the partition point (if <code>true</code>, it goes before; if <code>false</code> goes at or after it).<br>
The function shall not modify its argument.<br>
This can either be a function pointer or a function object.</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
An iterator to the first element in the partitioned range <code>[first,last)</code> for which <var>pred</var> is not <code>true</code>, or <var>last</var> if it is not <code>true</code> for any element.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br></code></pre></td>
<td class="source"><pre><code><cite>// partition_point example</cite>
<dfn>#include &lt;iostream&gt;     </dfn><cite>// std::cout</cite>
<dfn>#include &lt;algorithm&gt;    </dfn><cite>// std::partition, std::partition_point</cite>
<dfn>#include &lt;vector&gt;       </dfn><cite>// std::vector</cite>

<var>bool</var> IsOdd (<var>int</var> i) { <var>return</var> (i%2)==1; }

<var>int</var> main () {
  std::vector&lt;<var>int</var>&gt; foo {1,2,3,4,5,6,7,8,9};
  std::vector&lt;<var>int</var>&gt; odd;

  std::partition (foo.begin(),foo.end(),IsOdd);

  <var>auto</var> it = std::partition_point(foo.begin(),foo.end(),IsOdd);
  odd.assign (foo.begin(),it);

  <cite>// print contents of odd:</cite>
  std::cout &lt;&lt; <kbd>"odd:"</kbd>;
  <var>for</var> (<var>int</var>&amp; x:odd) std::cout &lt;&lt; <kbd>' '</kbd> &lt;&lt; x;
  std::cout &lt;&lt; <kbd>'\n'</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>odd: 1 3 5 7 9
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
On average, logarithmic in the <a href="/distance">distance</a> between <var>first</var> and <var>last</var>: Performs approximately <code>log<sub>2</sub>(N)+2</code> element comparisons (where <var>N</var> is this distance).<br>
On <i>non-<a href="/RandomAccessIterator">random-access</a> iterators</i>, the iterator <a href="/advance">advances</a> produce themselves an additional linear complexity in <var>N</var> on average.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
Some of the objects in the range <code>[first,last)</code> are accessed.<br>
</section>
<br>
<section id="exceptions">
<h3>Exceptions</h3>
Throws if either an element comparison or an operation on an iterator throws.<br>
Note that invalid arguments cause <i>undefined behavior</i>.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/algorithm/partition/"><b>partition</b></a></dt><dd>Partition range in two <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/find_if_not/"><b>find_if_not</b></a></dt><dd>Find element in range (negative condition) <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/binary_search/"><b>binary_search</b></a></dt><dd>Test if value exists in sorted sequence <span class="typ">(function template)</span></dd></dl>
<div id="CH_bb"></div></div></div>
