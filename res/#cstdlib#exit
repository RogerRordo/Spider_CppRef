<div id="I_content">
<div class="C_doc">
<div id="I_type">function</div>
<div id="I_file">&lt;cstdlib&gt;</div>
<h1>exit</h1>
<div class="C_prototype"><div class="C_SwitchCases">
<div title="C">
<pre>void exit (int status);</pre></div>
<div title="C++" class="on">
<pre>[[noreturn]] void exit (int status);</pre></div>
</div>
</div><div id="I_description">Terminate calling process</div>
<section id="description">
Terminates the process normally, performing the regular cleanup for terminating programs.<br>
<br>
Normal program termination performs the following (in the same order):<br>
<ul>
<li>Objects associated with the current thread with thread storage duration are destroyed (C++11 only).</li>
<li>Objects with static storage duration are destroyed (C++) and functions registered with <samp><a href="/atexit">atexit</a></samp> are called.</li>
<li>All C streams (open with functions in <samp><a href="/cstdio">&lt;cstdio&gt;</a></samp>) are closed (and flushed, if buffered), and all files created with <samp><a href="/tmpfile">tmpfile</a></samp> are removed.</li>
<li>Control is returned to the host environment.</li>
</ul>
<br>
Note that objects with automatic storage are not destroyed by calling <samp>exit</samp> (C++).<br>
<br>
If <var>status</var> is zero or <samp><a href="/EXIT_SUCCESS">EXIT_SUCCESS</a></samp>, a <i>successful termination</i> status is returned to the host environment.<br>
If <var>status</var> is <samp><a href="/EXIT_FAILURE">EXIT_FAILURE</a></samp>, an <i>unsuccessful termination</i> status is returned to the host environment.<br>
Otherwise, the status returned depends on the system and library implementation.<br>
<br>
For a similar function that does not perform the cleanup described above, see <samp><a href="/quick_exit">quick_exit</a></samp>.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>status</dt>
<dd>Status code.<br>
If this is <code>0</code> or <samp><a href="/EXIT_SUCCESS">EXIT_SUCCESS</a></samp>, it indicates success.<br>
If it is <samp><a href="/EXIT_FAILURE">EXIT_FAILURE</a></samp>, it indicates failure.</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
none (the function never returns).<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br></code></pre></td>
<td class="source"><pre><code><cite>/* exit example */</cite>
<dfn>#include &lt;stdio.h&gt;      </dfn><cite>/* printf, fopen */</cite><dfn></dfn>
<dfn>#include &lt;stdlib.h&gt;     </dfn><cite>/* exit, EXIT_FAILURE */</cite><dfn></dfn>

<var>int</var> main ()
{
  FILE * pFile;
  pFile = fopen (<kbd>"myfile.txt"</kbd>,<kbd>"r"</kbd>);
  <var>if</var> (pFile==NULL)
  {
    printf (<kbd>"Error opening file"</kbd>);
    exit (EXIT_FAILURE);
  }
  <var>else</var>
  {
    <cite>/* file operations here */</cite>
  }
  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
Calling this function destroys all objects with static duration: A program with multiple threads running shall not call <samp>exit</samp> (see <samp><a href="/quick_exit">quick_exit</a></samp> for a similar function that does not affect static objects).<br>
</section>
<br>
<section id="exceptions">
<h3>Exceptions (C++)</h3>
<b>No-throw guarantee:</b> this function never throws exceptions.<br>
<br>
If the program termination process described above throws an exception, <samp><a href="/terminate">terminate</a></samp> is automatically called.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/cstdlib/abort/"><b>abort</b></a></dt><dd>Abort current process <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cstdlib/atexit/"><b>atexit</b></a></dt><dd>Set function to be executed on exit <span class="typ">(function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
