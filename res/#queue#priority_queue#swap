<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;queue&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/queue/priority_queue/">priority_queue</a>::swap<span class="C_ico cpp11warning" title="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it." alt="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it."></span></h1>
<div class="C_prototype"><pre>void swap (priority_queue&amp; x) noexcept (/*see below*/);</pre></div><div id="I_description">Swap contents</div>
<section id="description">
Exchanges the contents of the container adaptor by those of <var>x</var>, swapping both the <i>underlying container</i> value and their <i>comparison function</i> using the corresponding <samp><a href="/swap">swap</a></samp> non-member functions (unqualified).<br>
<br>
This member function has a <code>noexcept</code> specifier that matches the combined <code>noexcept</code> of the <samp><a href="/vector:swap">swap</a></samp> operations on the <i>underlying container</i> and the <i>comparison functions</i>.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>x</dt>
<dd>Another <samp><a href="/priority_queue">priority_queue</a></samp> container adaptor of the same type (i.e., instantiated with the same template parameters, <samp>T</samp>, <samp>Container</samp> and <samp>Compare</samp>). Sizes may differ.<br>
</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
none<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br></code></pre></td>
<td class="source"><pre><code><cite>// priority_queue::swap</cite>
<dfn>#include &lt;iostream&gt;       </dfn><cite>// std::cout</cite>
<dfn>#include &lt;queue&gt;          </dfn><cite>// std::priority_queue</cite>

<var>int</var> main ()
{
  std::priority_queue&lt;<var>int</var>&gt; foo,bar;
  foo.push (15); foo.push(30); foo.push(10);
  bar.push (101); bar.push(202);

  foo.swap(bar);

  std::cout &lt;&lt; <kbd>"size of foo: "</kbd> &lt;&lt; foo.size() &lt;&lt; <kbd>'\n'</kbd>;
  std::cout &lt;&lt; <kbd>"size of bar: "</kbd> &lt;&lt; bar.size() &lt;&lt; <kbd>'\n'</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>
size of foo: 2
size of bar: 3
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Constant.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
Both <samp>*this</samp> and <var>x</var> are modified.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
Provides the same level of guarantees as the operation performed on the <i>underlying container</i> objects.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/queue/priority_queue/swap-free/"><b>swap (priority_queue)</b></a></dt><dd>Exchange contents of priority queues <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/utility/swap/"><b>swap</b></a></dt><dd>Exchange values of two objects <span class="typ">(function template)</span></dd></dl>
<div id="CH_bb"></div></div></div>
