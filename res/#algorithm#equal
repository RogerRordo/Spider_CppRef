<div id="I_content">
<div class="C_doc">
<div id="I_type">function template</div>
<div id="I_file">&lt;algorithm&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span>equal</h1>
<div class="C_prototype"><table><tr class="odd"><th>equality (1)</th><td><pre>template &lt;class InputIterator1, class InputIterator2&gt;  bool equal (InputIterator1 first1, InputIterator1 last1,              InputIterator2 first2);</pre></td></tr><tr class="even"><th>predicate (2)</th><td><pre>template &lt;class InputIterator1, class InputIterator2, class BinaryPredicate&gt;  bool equal (InputIterator1 first1, InputIterator1 last1,              InputIterator2 first2, BinaryPredicate pred);</pre></td></tr></table></div><div id="I_description">Test whether the elements in two ranges are equal</div>
<section id="description">
Compares the elements in the range <code>[first1,last1)</code> with those in the range beginning at <var>first2</var>, and returns <code>true</code> if all of the elements in both ranges match.<br>
<br>
The elements are compared using <code>operator==</code> (or <var>pred</var>, in version <i>(2)</i>).<br>
<br>
The behavior of this function template is equivalent to:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br></code></pre></td>
<td class="source"><pre><code><var>template</var> &lt;<var>class</var> InputIterator1, <var>class</var> InputIterator2&gt;
  <var>bool</var> equal ( InputIterator1 first1, InputIterator1 last1, InputIterator2 first2 )
{
  <var>while</var> (first1!=last1) {
    <var>if</var> (!(*first1 == *first2))   <cite>// or: if (!pred(*first1,*first2)), for version 2</cite>
      <var>return</var> <var>false</var>;
    ++first1; ++first2;
  }
  <var>return</var> <var>true</var>;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>first1, last1</dt>
<dd><a href="/InputIterator">Input iterators</a> to the initial and final positions of the first sequence. The range used is <code>[first1,last1)</code>, which contains all the elements between <var>first1</var> and <var>last1</var>, including the element pointed by <var>first1</var> but not the element pointed by <var>last1</var>.</dd>
<dt>first2</dt>
<dd><a href="/InputIterator">Input iterator</a> to the initial position of the second sequence. The comparison includes up to as many elements of this sequence as those in the range <code>[first1,last1)</code>.</dd>
<dt>pred</dt>
<dd>Binary function that accepts two elements as argument (one of each of the two sequences, in the same order), and returns a value convertible to <code>bool</code>. The value returned indicates whether the elements are considered to match in the context of this function.<br>
The function shall not modify any of its arguments.<br>
This can either be a function pointer or a function object.<br>
</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
<code>true</code> if all the elements in the range <code>[first1,last1)</code> compare equal to those of the range starting at <var>first2</var>, and <code>false</code> otherwise.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br></code></pre></td>
<td class="source"><pre><code><cite>// equal algorithm example</cite>
<dfn>#include &lt;iostream&gt;     </dfn><cite>// std::cout</cite>
<dfn>#include &lt;algorithm&gt;    </dfn><cite>// std::equal</cite>
<dfn>#include &lt;vector&gt;       </dfn><cite>// std::vector</cite>

<var>bool</var> mypredicate (<var>int</var> i, <var>int</var> j) {
  <var>return</var> (i==j);
}

<var>int</var> main () {
  <var>int</var> myints[] = {20,40,60,80,100};               <cite>//   myints: 20 40 60 80 100</cite>
  std::vector&lt;<var>int</var>&gt;myvector (myints,myints+5);     <cite>// myvector: 20 40 60 80 100</cite>

  <cite>// using default comparison:</cite>
  <var>if</var> ( std::equal (myvector.begin(), myvector.end(), myints) )
    std::cout &lt;&lt; <kbd>"The contents of both sequences are equal.\n"</kbd>;
  <var>else</var>
    std::cout &lt;&lt; <kbd>"The contents of both sequences differ.\n"</kbd>;

  myvector[3]=81;                                 <cite>// myvector: 20 40 60 81 100</cite>

  <cite>// using predicate comparison:</cite>
  <var>if</var> ( std::equal (myvector.begin(), myvector.end(), myints, mypredicate) )
    std::cout &lt;&lt; <kbd>"The contents of both sequences are equal.\n"</kbd>;
  <var>else</var>
    std::cout &lt;&lt; <kbd>"The contents of both sequences differ.\n"</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>The contents of both sequences are equal.
The contents of both sequence differ.
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Up to linear in the <a href="/distance">distance</a> between <var>first1</var> and <var>last1</var>: Compares elements until a mismatch is found.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
Some (or all) of the objects in both ranges are accessed (once at most).<br>
</section>
<br>
<section id="exceptions">
<h3>Exceptions</h3>
Throws if any of the element comparisons (or <var>pred</var>) throws, or if any of the operations on iterators throws.<br>
Note that invalid parameters cause <i>undefined behavior</i>.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/algorithm/mismatch/"><b>mismatch</b></a></dt><dd>Return first position where two ranges differ <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/find_first_of/"><b>find_first_of</b></a></dt><dd>Find element from set in range <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/find_end/"><b>find_end</b></a></dt><dd>Find last subsequence in range <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/search/"><b>search</b></a></dt><dd>Search range for subsequence <span class="typ">(function template)</span></dd></dl>
<div id="CH_bb"></div></div></div>
