<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;queue&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/queue/queue/">queue</a>::queue</h1>
<div class="C_prototype"><div class="C_SwitchCases">
<div title="C++98">
<pre>explicit queue (const container_type&amp; ctnr = container_type());</pre></div>
<div title="C++11" class="on">
<table><tr class="odd"><th>initialize (1)</th><td><pre>explicit queue (const container_type&amp; ctnr);</pre></td></tr><tr class="even"><th>move-initialize (2)</th><td><pre>explicit queue (container_type&amp;&amp; ctnr = container_type());</pre></td></tr><tr class="odd"><th>allocator (3)</th><td><pre>template &lt;class Alloc&gt; explicit queue (const Alloc&amp; alloc);</pre></td></tr><tr class="even"><th>init + allocator (4)</th><td><pre>template &lt;class Alloc&gt; queue (const container_type&amp; ctnr, const Alloc&amp; alloc);</pre></td></tr><tr class="odd"><th>move-init + allocator (5)</th><td><pre>template &lt;class Alloc&gt; queue (container_type&amp;&amp; ctnr, const Alloc&amp; alloc);</pre></td></tr><tr class="even"><th>copy + allocator (6)</th><td><pre>template &lt;class Alloc&gt; queue (const queue&amp; x, const Alloc&amp; alloc);</pre></td></tr><tr class="odd"><th>move + allocator (7)</th><td><pre>template &lt;class Alloc&gt; queue (queue&amp;&amp; x, const Alloc&amp; alloc);</pre></td></tr></table></div>
</div>
</div><div id="I_description">Construct queue</div>
<section id="description">
Constructs a <samp><a href="/queue">queue</a></samp> container adaptor object.<br>
<br>
<div class="C_SwitchCases">
<div title="C++98">
A container adaptor keeps internally a container object as data. This container object is a copy of the <var>ctnr</var> argument passed to the constructor, if any, otherwise it is an empty container.<br>
</div>
<div title="C++11">
A container adaptor keeps internally a container object as data, which is initialized by this constructor:<br>
<dl>
<dt>(1) initialization constructor</dt>
<dd>Constructs a container adaptor whose internal container is initialized to a copy of <var>ctnr</var>.</dd>
<dt>(2) move-initialization constructor</dt>
<dd>Constructs a container adaptor whose internal container acquires the value of <var>ctnr</var> by <i>move-constructing</i> it.</dd>
<dt>(3) allocator constructor</dt>
<dd>Constructs a container adaptor whose internal container is constructed with <var>alloc</var> as argument.</dd>
<dt>(4) initialization with allocator constructor</dt>
<dd>Constructs a container adaptor whose internal container is constructed with <var>cntr</var> and <var>alloc</var> as arguments.</dd>
<dt>(5) move-initialization with allocator constructor</dt>
<dd>Constructs a container adaptor whose internal container is constructed with <code>std::<a href="/move">move</a>(cntr)</code> and <var>alloc</var> as arguments.</dd>
<dt>(6) copy with allocator constructor</dt>
<dd>Constructs a container adaptor whose internal container is constructed with <var>x</var>'s internal container as first argument and <var>alloc</var> as second.</dd>
<dt>(7) move with allocator constructor</dt>
<dd>Constructs a container adaptor whose internal container is constructed by <i><a href="/move">moving</a></i> <var>x</var>'s internal container as first argument and passing <var>alloc</var> as second.</dd>
</dl>
</div>
</div>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>ctnr</dt>
<dd>Container object.<br>
<samp>container_type</samp> is the type of the <i>underlying container type</i> (defined as an alias of the second class template parameter, <samp>Container</samp>; see <a href="/queue#types">member types</a>).</dd>
<dt>alloc</dt>
<dd>Allocator object.<br>
<samp>Alloc</samp> shall be a type for which <samp><a href="/queue:uses_allocator">uses_allocator::value</a></samp> is <code>true</code> (for other types, the constructor does not even participate in overload resolution).</dd>
<dt>x</dt>
<dd>A <samp><a href="/queue">queue</a></samp> of the same type (i.e., with the same template arguments, <samp>T</samp> and <samp>Container</samp>).</dd>
</dl>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br></code></pre></td>
<td class="source"><pre><code><cite>// constructing queues</cite>
<dfn>#include &lt;iostream&gt;       </dfn><cite>// std::cout</cite>
<dfn>#include &lt;deque&gt;          </dfn><cite>// std::deque</cite>
<dfn>#include &lt;list&gt;           </dfn><cite>// std::list</cite>
<dfn>#include &lt;queue&gt;          </dfn><cite>// std::queue</cite>

<var>int</var> main ()
{
  std::deque&lt;<var>int</var>&gt; mydeck (3,100);        <cite>// deque with 3 elements</cite>
  std::list&lt;<var>int</var>&gt; mylist (2,200);         <cite>// list with 2 elements</cite>

  std::queue&lt;<var>int</var>&gt; first;                 <cite>// empty queue</cite>
  std::queue&lt;<var>int</var>&gt; second (mydeck);       <cite>// queue initialized to copy of deque</cite>

  std::queue&lt;<var>int</var>,std::list&lt;<var>int</var>&gt; &gt; third; <cite>// empty queue with list as underlying container</cite>
  std::queue&lt;<var>int</var>,std::list&lt;<var>int</var>&gt; &gt; fourth (mylist);

  std::cout &lt;&lt; <kbd>"size of first: "</kbd> &lt;&lt; first.size() &lt;&lt; <kbd>'\n'</kbd>;
  std::cout &lt;&lt; <kbd>"size of second: "</kbd> &lt;&lt; second.size() &lt;&lt; <kbd>'\n'</kbd>;
  std::cout &lt;&lt; <kbd>"size of third: "</kbd> &lt;&lt; third.size() &lt;&lt; <kbd>'\n'</kbd>;
  std::cout &lt;&lt; <kbd>"size of fourth: "</kbd> &lt;&lt; fourth.size() &lt;&lt; <kbd>'\n'</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
One container construction (which for standard containers is up to linear in its size).<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
<i>Moving constructors</i> <i>(2)</i> and <i>(7)</i>, may invalidate all iterators, pointers and references related to their moved argument.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
All copied elements are accessed.<br>
The <i>moving constructors</i> <i>(2)</i> and <i>(7)</i> may modify their (first) argument.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
Provides the same level of guarantees as the operation performed on the container.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/queue/queue/push/"><b>queue::push</b></a></dt><dd>Insert element <span class="typ">(public member function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
