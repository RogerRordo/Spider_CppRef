<div id="I_content">
<div class="C_doc">
<div id="I_type">function</div>
<div id="I_file">&lt;cmath&gt; &lt;ctgmath&gt;</div>
<h1>ilogb<span class="C_ico cpp11warning" title="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it." alt="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it."></span></h1>
<div class="C_prototype"><div class="C_SwitchCases">
<div title="C99">
<pre>int ilogb  (double x);int ilogbf (float x);int ilogbl (long double x);</pre></div>
<div title="C++11" class="on">
<pre>int ilogb (double x);int ilogb (float x);int ilogb (long double x);int ilogb (T x);           // additional overloads for integral types</pre></div>
</div>
</div><div id="I_description">Integer binary logarithm</div>
<section id="description">
Returns the integral part of the logarithm of |<var>x</var>|, using <samp><a href="/FLT_RADIX">FLT_RADIX</a></samp> as base for the logarithm.<br>
<br>
This is the <i>exponent</i> used internally by the machine to express the floating-point value <var>x</var>, when it uses a <i>significand</i> between <code>1.0</code> and <samp><a href="/FLT_RADIX">FLT_RADIX</a></samp>, so that, for a positive <var>x</var>:<br>
<br>
x = significand * FLT_RADIX <sup>exponent</sup> <br>
<br>
Generally, <samp>FLT_RADIX</samp> is <code>2</code>, and the value returned by this function is one less than the <i>exponent</i> obtained with <samp><a href="/frexp">frexp</a></samp> (because of the different <i>significand</i> normalization as <code>[1.0,2.0)</code> instead of <code>[0.5,1.0)</code>).<br>
<br>
<div class="C_SwitchCases">
<div title="C99">
Header <samp><a href="/&lt;ctgmath&gt;">&lt;tgmath.h&gt;</a></samp> provides a type-generic macro version of this function.<br>
</div>
<div title="C++11">
<i>Additional overloads</i> are provided in this header (<code><a href="/&lt;cmath&gt;">&lt;cmath&gt;</a></code>) for the <a href="/is_integral">integral types</a>: These overloads effectively cast <var>x</var> to a <code>double</code> before calculations (defined for <samp>T</samp> being any <i><a href="/is_integral">integral type</a></i>).<br>
</div>
</div>
<br>
Two specific macro constants may be returned by this function to indicate the following special cases:<br>
<table class="boxed">
<tr><th>macro</th><th>description</th></tr>
<tr><td><samp>FP_ILOGB0</samp></td><td><var>x</var> is zero</td></tr>
<tr><td><samp>FP_ILOGBNAN</samp></td><td><var>x</var> is <i>NaN</i></td></tr>
</table>
<br>
These macro constants are defined in this same header (<samp><a href="/&lt;cmath&gt;">&lt;cmath&gt;</a></samp>).<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>x</dt>
<dd>Value whose <i>ilogb</i> is returned.</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
If <var>x</var> <a href="/isnormal">is normal</a>, the base-<samp><a href="/FLT_RADIX">FLT_RADIX</a></samp> logarithm of <var>x</var>.<br>
If <var>x</var> is subnormal, the value returned is the one corresponding to the normalized representation (negative <i>exponent</i>).<br>
If <var>x</var> is zero, it returns <samp>FP_LOGB0</samp> (a special value, only returned by this function, defined in <samp><a href="/&lt;cmath&gt;">&lt;cmath&gt;</a></samp>).<br>
If <var>x</var> is infinite, it returns <samp><a href="/INT_MAX">INT_MAX</a></samp>.<br>
If <var>x</var> is NaN, it returns <samp>FP_ILOGBNAN</samp>  (a special value, only returned by this function, defined in <samp><a href="/&lt;cmath&gt;">&lt;cmath&gt;</a></samp>).<br>
If the magnitude of the result is too large to be represented by a value of the return type, the function returns an unspecified value, and an overflow <i>range error</i> occurs.<br>
A zero, infinite or NaN value of <var>x</var> may also cause either a <i>domain error</i> or an overflow <i>range error</i>.<br>
<br>
If an <i>domain error</i> occurs:<br>
- And <samp><a href="/math_errhandling">math_errhandling</a></samp> has <samp><a href="/MATH_ERRNO">MATH_ERRNO</a></samp> set: the global variable <samp><a href="/errno">errno</a></samp> is set to <samp><a href="/EDOM">EDOM</a></samp>.<br>
- And <samp><a href="/math_errhandling">math_errhandling</a></samp> has <samp><a href="/MATH_ERREXCEPT">MATH_ERREXCEPT</a></samp> set: <samp><a href="/FE_INVALID">FE_INVALID</a></samp> is raised.<br>
<br>
If an overflow <i>range error</i> occurs:<br>
- And <samp><a href="/math_errhandling">math_errhandling</a></samp> has <samp><a href="/MATH_ERRNO">MATH_ERRNO</a></samp> set: the global variable <samp><a href="/errno">errno</a></samp> is set to <samp><a href="/ERANGE">ERANGE</a></samp>.<br>
- And <samp><a href="/math_errhandling">math_errhandling</a></samp> has <samp><a href="/MATH_ERREXCEPT">MATH_ERREXCEPT</a></samp> set: <samp><a href="/FE_OVERFLOW">FE_OVERFLOW</a></samp> is raised.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br></code></pre></td>
<td class="source"><pre><code><cite>/* ilogb example */</cite>
<dfn>#include &lt;stdio.h&gt;      </dfn><cite>/* printf */</cite><dfn></dfn>
<dfn>#include &lt;math.h&gt;       </dfn><cite>/* ilogb */</cite><dfn></dfn>

<var>int</var> main ()
{
  <var>double</var> param;
  <var>int</var> result;

  param = 10.0;
  result = ilogb (param);
  printf (<kbd>"ilogb(%f) = %d\n"</kbd>, param, result);
  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>
ilogb(10.000000) = 3
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/cmath/logb/"><b>logb</b></a></dt><dd>Compute floating-point base logarithm <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/log2/"><b>log2</b></a></dt><dd>Compute binary logarithm <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/pow/"><b>pow</b></a></dt><dd>Raise to power <span class="typ">(function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
