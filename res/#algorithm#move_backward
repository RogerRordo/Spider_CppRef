<div id="I_content">
<div class="C_doc">
<div id="I_type">function template</div>
<div id="I_file">&lt;algorithm&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span>move_backward<span class="C_ico cpp11warning" title="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it." alt="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it."></span></h1>
<div class="C_prototype"><pre>template &lt;class BidirectionalIterator1, class BidirectionalIterator2&gt;  BidirectionalIterator2 move_backward (BidirectionalIterator1 first,                                        BidirectionalIterator1 last,                                        BidirectionalIterator2 result);</pre></div><div id="I_description">Move range of elements backward</div>
<section id="description">
Moves the elements in the range <code>[first,last)</code> starting from the end into the range terminating at <var>result</var>.<br>
<br>
The function returns an iterator to the first element in the destination range.<br>
<br>
The resulting range has the elements in the exact same order as <code>[first,last)</code>. To reverse their order, see <samp><a href="/reverse">reverse</a></samp>.<br>
<br>
The function begins by moving <code>*(last-1)</code> into <code>*(result-1)</code>, and then follows backward by the elements preceding these, until <var>first</var> is reached (and including it).<br>
<br>
The ranges shall not overlap in such a way that <var>result</var> (which is the <i>past-the-end element</i> in the destination range) points to an element in the range <code>(first,last]</code>. For such cases, see <samp><a href="/algorithm:move">move</a></samp>.<br>
<br>
The behavior of this function template is equivalent to:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br></code></pre></td>
<td class="source"><pre><code><var>template</var>&lt;<var>class</var> BidirectionalIterator1, <var>class</var> BidirectionalIterator2&gt;
  BidirectionalIterator2 move_backward ( BidirectionalIterator1 first,
                                         BidirectionalIterator1 last,
                                         BidirectionalIterator2 result )
{
  <var>while</var> (last!=first) *(--result) = std::move(*(--last));
  <var>return</var> result;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>first, last</dt>
<dd><a href="/BidirectionalIterator">Bidirectional iterators</a> to the initial and final positions in a sequence to be moved. The range used is <code>[first,last)</code>, which contains all the elements between <var>first</var> and <var>last</var>, including the element pointed by <i>first</i> but not the element pointed by <var>last</var>.</dd>
<dt>result</dt>
<dd><a href="/BidirectionalIterator">Bidirectional iterator</a> to the <i>past-the-end</i> position in the destination sequence.<br>
This shall not point to any element in the range <code>(first,last]</code>.<br>
</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
An iterator to the first element of the destination sequence where elements have been moved.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br></code></pre></td>
<td class="source"><pre><code><cite>// move_backward example</cite>
<dfn>#include &lt;iostream&gt;     </dfn><cite>// std::cout</cite>
<dfn>#include &lt;algorithm&gt;    </dfn><cite>// std::move_backward</cite>
<dfn>#include &lt;string&gt;       </dfn><cite>// std::string</cite>

<var>int</var> main () {
  std::string elems[10] = {<kbd>"air"</kbd>,<kbd>"water"</kbd>,<kbd>"fire"</kbd>,<kbd>"earth"</kbd>};

  <cite>// insert new element at the beginning:</cite>
  std::move_backward (elems,elems+4,elems+5);
  elems[0]=<kbd>"ether"</kbd>;

  std::cout &lt;&lt; <kbd>"elems contains:"</kbd>;
  <var>for</var> (<var>int</var> i=0; i&lt;10; ++i)
    std::cout &lt;&lt; <kbd>" ["</kbd> &lt;&lt; elems[i] &lt;&lt; <kbd>"]"</kbd>;
  std::cout &lt;&lt; <kbd>'\n'</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>elems contains: [ether] [air] [water] [fire] [earth] [] [] [] [] []
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Linear in the <a href="/distance">distance</a> between <var>first</var> and <var>last</var>: Performs a move-assignment for each element in the range.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The objects in both ranges are modified.<br>
</section>
<br>
<section id="exceptions">
<h3>Exceptions</h3>
Throws if either an element move-assignment or an operation on iterators throws.<br>
Note that invalid arguments cause <i>undefined behavior</i>.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/algorithm/move/"><b>move</b></a></dt><dd>Move range of elements <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/copy_backward/"><b>copy_backward</b></a></dt><dd>Copy range of elements backward <span class="typ">(function template)</span></dd></dl>
<div id="CH_bb"></div></div></div>
