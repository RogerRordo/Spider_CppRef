<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;vector&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/vector/vector/">vector</a>::shrink_to_fit<span class="C_ico cpp11warning" title="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it." alt="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it."></span></h1>
<div class="C_prototype"><pre>void shrink_to_fit();</pre></div><div id="I_description">Shrink to fit</div>
<section id="description">
Requests the container to reduce its <a href="/vector::capacity">capacity</a> to fit its <a href="/vector::size">size</a>.<br>
<br>
The request is non-binding, and the container implementation is free to optimize otherwise and leave the <a href="/vector">vector</a> with a <a href="/vector::capacity">capacity</a> greater than its <a href="/vector::size">size</a>.<br>
<br>
This may cause a reallocation, but has no effect on the <a href="/vector::size">vector size</a> and cannot alter its elements.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
none<br>
</section>
<br>
<section id="return">
<h3>Return value</h3>
none<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br></code></pre></td>
<td class="source"><pre><code><cite>// vector::shrink_to_fit</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;vector&gt;</dfn>

<var>int</var> main ()
{
  std::vector&lt;<var>int</var>&gt; myvector (100);
  std::cout &lt;&lt; <kbd>"1. capacity of myvector: "</kbd> &lt;&lt; myvector.capacity() &lt;&lt; <kbd>'\n'</kbd>;

  myvector.resize(10);
  std::cout &lt;&lt; <kbd>"2. capacity of myvector: "</kbd> &lt;&lt; myvector.capacity() &lt;&lt; <kbd>'\n'</kbd>;

  myvector.shrink_to_fit();
  std::cout &lt;&lt; <kbd>"3. capacity of myvector: "</kbd> &lt;&lt; myvector.capacity() &lt;&lt; <kbd>'\n'</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Possible output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>1. capacity of myvector: 100
2. capacity of myvector: 100
3. capacity of myvector: 10
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
At most, linear in <a href="/vector::size">container size</a>.<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
If a reallocation happens, all iterators, pointers and references related to the container are invalidated.<br>
Otherwise, no changes.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The container is modified.<br>
If a reallocation happens, all contained elements are modified.<br>
Otherwise, no contained elements are accessed.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
If the type of the elements is either copyable or no-throw moveable, there are no changes in the container in case of exception (strong guarantee).<br>
Otherwise, if an exception is thrown, the container is left with a valid state (basic guarantee).<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/vector/vector/capacity/"><b>vector::capacity</b></a></dt><dd>Return size of allocated storage capacity <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/vector/vector/reserve/"><b>vector::reserve</b></a></dt><dd>Request a change in capacity <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/vector/vector/resize/"><b>vector::resize</b></a></dt><dd>Change size <span class="typ">(public member function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
