<div id="I_content">
<div class="C_doc">
<div id="I_type">function</div>
<div id="I_file">&lt;cstdio&gt;</div>
<h1>fflush</h1>
<div class="C_prototype"><pre>int fflush ( FILE * stream );</pre></div><div id="I_description">Flush stream</div>
<section id="description">
If the given <i>stream</i> was open for writing (or if it was open for updating and the last i/o operation was an output operation) any unwritten data in its output buffer is written to the file.<br>
<br>
If <i>stream</i> is a null pointer, all such streams are flushed.<br>
<br>
In all other cases, the behavior depends on the specific library implementation. In some implementations, flushing a stream open for reading causes its input buffer to be cleared (but this is not portable expected behavior).<br>
<br>
The stream remains open after this call.<br>
<br>
When a file is closed, either because of a call to <a href="/fclose">fclose</a> or because the program terminates, all the buffers associated with it are automatically flushed.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>stream</dt>
<dd>Pointer to a <a href="/FILE">FILE</a> object that specifies a buffered stream.</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
A zero value indicates success.<br>
If an error occurs, <a href="/EOF">EOF</a> is returned and the error indicator is set (see <a href="/ferror">ferror</a>).<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
In files open for update (i.e., open for both reading and writing), the stream shall be flushed after an output operation before performing an input operation. This can be done either by repositioning (<a href="/fseek">fseek</a>, <a href="/fsetpos">fsetpos</a>, <a href="/rewind">rewind</a>) or by calling explicitly <tt>fflush</tt>, like in this example:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br></code></pre></td>
<td class="source"><pre><code><cite>/* fflush example */</cite>
<dfn>#include &lt;stdio.h&gt;</dfn>
<var>char</var> mybuffer[80];
<var>int</var> main()
{
   FILE * pFile;
   pFile = fopen (<kbd>"example.txt"</kbd>,<kbd>"r+"</kbd>);
   <var>if</var> (pFile == NULL) perror (<kbd>"Error opening file"</kbd>);
   <var>else</var> {
     fputs (<kbd>"test"</kbd>,pFile);
     fflush (pFile);    <cite>// flushing or repositioning required</cite>
     fgets (mybuffer,80,pFile);
     puts (mybuffer);
     fclose (pFile);
     <var>return</var> 0;
  }
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/cstdio/fclose/"><b>fclose</b></a></dt><dd>Close file <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cstdio/fopen/"><b>fopen</b></a></dt><dd>Open file <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cstdio/setbuf/"><b>setbuf</b></a></dt><dd>Set stream buffer <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cstdio/setvbuf/"><b>setvbuf</b></a></dt><dd>Change stream buffering <span class="typ">(function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
