<div id="I_content">
<div class="C_doc">
<div id="I_type">header</div>
<h1>&lt;cmath&gt; (math.h)</h1>
<div id="I_description">C numerics library</div>
<section id="description">
Header <code>&lt;cmath&gt;</code> declares a set of functions to compute common mathematical operations and transformations:<br>
</section>
<br>
<section id="functions">
<h3>Functions</h3>
<br>
<h4>Trigonometric functions</h4>
<dl class="links"><dt><a href= "/reference/cmath/cos/"><b>cos</b></a></dt><dd>Compute cosine <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/sin/"><b>sin</b></a></dt><dd>Compute sine <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/tan/"><b>tan</b></a></dt><dd>Compute tangent <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/acos/"><b>acos</b></a></dt><dd>Compute arc cosine <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/asin/"><b>asin</b></a></dt><dd>Compute arc sine <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/atan/"><b>atan</b></a></dt><dd>Compute arc tangent <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/atan2/"><b>atan2</b></a></dt><dd>Compute arc tangent with two parameters <span class="typ">(function)</span></dd></dl>
<br>
<h4>Hyperbolic functions</h4>
<dl class="links"><dt><a href= "/reference/cmath/cosh/"><b>cosh</b></a></dt><dd>Compute hyperbolic cosine <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/sinh/"><b>sinh</b></a></dt><dd>Compute hyperbolic sine <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/tanh/"><b>tanh</b></a></dt><dd>Compute hyperbolic tangent <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/acosh/"><b>acosh <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Compute area hyperbolic cosine <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/asinh/"><b>asinh <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Compute area hyperbolic sine <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/atanh/"><b>atanh <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Compute area hyperbolic tangent <span class="typ">(function)</span></dd></dl>
<br>
<h4>Exponential and logarithmic functions</h4>
<dl class="links"><dt><a href= "/reference/cmath/exp/"><b>exp</b></a></dt><dd>Compute exponential function <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/frexp/"><b>frexp</b></a></dt><dd>Get significand and exponent <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/ldexp/"><b>ldexp</b></a></dt><dd>Generate value from significand and exponent <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/log/"><b>log</b></a></dt><dd>Compute natural logarithm <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/log10/"><b>log10</b></a></dt><dd>Compute common logarithm <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/modf/"><b>modf</b></a></dt><dd>Break into fractional and integral parts <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/exp2/"><b>exp2 <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Compute binary exponential function <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/expm1/"><b>expm1 <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Compute exponential minus one <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/ilogb/"><b>ilogb <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Integer binary logarithm <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/log1p/"><b>log1p <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Compute logarithm plus one <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/log2/"><b>log2 <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Compute binary logarithm <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/logb/"><b>logb <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Compute floating-point base logarithm <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/scalbn/"><b>scalbn <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Scale significand using floating-point base exponent <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/scalbln/"><b>scalbln <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Scale significand using floating-point base exponent (long) <span class="typ">(function)</span></dd></dl>
<br>
<h4>Power functions</h4>
<dl class="links"><dt><a href= "/reference/cmath/pow/"><b>pow</b></a></dt><dd>Raise to power <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/sqrt/"><b>sqrt</b></a></dt><dd>Compute square root <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/cbrt/"><b>cbrt <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Compute cubic root <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/hypot/"><b>hypot <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Compute hypotenuse <span class="typ">(function)</span></dd></dl>
<br>
<h4>Error and gamma functions</h4>
<dl class="links"><dt><a href= "/reference/cmath/erf/"><b>erf <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Compute error function <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/erfc/"><b>erfc <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Compute complementary error function <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/tgamma/"><b>tgamma <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Compute gamma function <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/lgamma/"><b>lgamma <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Compute log-gamma function <span class="typ">(function)</span></dd></dl>
<br>
<h4>Rounding and remainder functions</h4>
<dl class="links"><dt><a href= "/reference/cmath/ceil/"><b>ceil</b></a></dt><dd>Round up value <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/floor/"><b>floor</b></a></dt><dd>Round down value <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/fmod/"><b>fmod</b></a></dt><dd>Compute remainder of division <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/trunc/"><b>trunc <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Truncate value <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/round/"><b>round <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Round to nearest <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/lround/"><b>lround <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Round to nearest and cast to long integer <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/llround/"><b>llround <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Round to nearest and cast to long long integer <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/rint/"><b>rint <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Round to integral value <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/lrint/"><b>lrint <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Round and cast to long integer <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/llrint/"><b>llrint <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Round and cast to long long integer <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/nearbyint/"><b>nearbyint <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Round to nearby integral value <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/remainder/"><b>remainder <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Compute remainder (IEC 60559) <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/remquo/"><b>remquo <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Compute remainder and quotient <span class="typ">(function)</span></dd></dl>
<br>
<h4>Floating-point manipulation functions</h4>
<dl class="links"><dt><a href= "/reference/cmath/copysign/"><b>copysign <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Copy sign <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/nan-function/"><b>nan <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Generate quiet NaN <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/nextafter/"><b>nextafter <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Next representable value <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/nexttoward/"><b>nexttoward <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Next representable value toward precise value <span class="typ">(function)</span></dd></dl>
<br>
<h4>Minimum, maximum, difference functions</h4>
<dl class="links"><dt><a href= "/reference/cmath/fdim/"><b>fdim <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Positive difference <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/fmax/"><b>fmax <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Maximum value <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/fmin/"><b>fmin <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Minimum value <span class="typ">(function)</span></dd></dl>
<br>
<h4>Other functions</h4>
<dl class="links"><dt><a href= "/reference/cmath/fabs/"><b>fabs</b></a></dt><dd>Compute absolute value <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/abs/"><b>abs</b></a></dt><dd>Compute absolute value <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/fma/"><b>fma <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Multiply-add <span class="typ">(function)</span></dd></dl>
</section>
<br>
<section id="macros">
<h3>Macros / Functions</h3>
These are implemented as macros in C and as functions in C++:<br>
<h4>Classification macro / functions</h4>
<dl class="links"><dt><a href= "/reference/cmath/fpclassify/"><b>fpclassify <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Classify floating-point value <span class="typ">(macro/function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/isfinite/"><b>isfinite <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Is finite value <span class="typ">(macro)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/isinf/"><b>isinf <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Is infinity <span class="typ">(macro/function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/isnan/"><b>isnan <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Is Not-A-Number <span class="typ">(macro/function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/isnormal/"><b>isnormal <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Is normal <span class="typ">(macro/function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/signbit/"><b>signbit <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Sign bit <span class="typ">(macro/function)</span></dd></dl>
<br>
<h4>Comparison macro / functions</h4>
<dl class="links"><dt><a href= "/reference/cmath/isgreater/"><b>isgreater <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Is greater <span class="typ">(macro)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/isgreaterequal/"><b>isgreaterequal <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Is greater or equal <span class="typ">(macro)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/isless/"><b>isless <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Is less <span class="typ">(macro)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/islessequal/"><b>islessequal <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Is less or equal <span class="typ">(macro)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/islessgreater/"><b>islessgreater <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Is less or greater <span class="typ">(macro)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/isunordered/"><b>isunordered <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Is unordered <span class="typ">(macro)</span></dd></dl>
</section>
<br>
<section id="constants">
<h3>Macro constants</h3>
<dl class="links"><dt><a href= "/reference/cmath/math_errhandling/"><b>math_errhandling <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Error handling <span class="typ">(macro)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/INFINITY/"><b>INFINITY <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Infinity <span class="typ">(constant)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/NAN/"><b>NAN</b></a></dt><dd>Not-A-Number <span class="typ">(constant)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/HUGE_VAL/"><b>HUGE_VAL</b></a></dt><dd>Huge value <span class="typ">(constant)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/HUGE_VALF/"><b>HUGE_VALF <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Huge float value</dd></dl><dl class="links"><dt><a href= "/reference/cmath/HUGE_VALL/"><b>HUGE_VALL <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Huge long double value <span class="typ">(constant)</span></dd></dl>
<br>
This header also defines the following macro constants (since C99/C++11):<br>
<table class="boxed">
<tr><th>macro</th><th>type</th><th>description</th></tr>
<tr class="cpp11"><td><samp><a href="/MATH_ERRNO">MATH_ERRNO</a></samp> <br>
<samp><a href="/MATH_ERREXCEPT">MATH_ERREXCEPT</a></samp></td><td><code>int</code></td><td>Bitmask value with the possible values <samp><a href="/math_errhandling">math_errhandling</a></samp> can take.</td></tr>
<tr class="cpp11"><td><samp><a href="/FP_FAST_FMA">FP_FAST_FMA</a></samp> <br>
<samp><a href="/FP_FAST_FMAF">FP_FAST_FMAF</a></samp> <br>
<samp><a href="/FP_FAST_FMAL">FP_FAST_FMAL</a></samp></td><td><code>int</code><td>Each, if defined, identifies for which type <samp><a href="/fma">fma</a></samp> is at least as efficient as <code>x*y+z</code>.</td></tr>
<tr class="cpp11"><td><samp><a href="/FP_INFINITE">FP_INFINITE</a></samp> <br>
<samp><a href="/FP_NAN">FP_NAN</a></samp> <br>
<samp><a href="/FP_NORMAL">FP_NORMAL</a></samp> <br>
<samp><a href="/FP_SUBNORMAL">FP_SUBNORMAL</a></samp> <br>
<samp><a href="/FP_ZERO">FP_ZERO</a></samp></td><td><code>int</code></td><td>The possible values returned by <samp><a href="/fpclassify">fpclassify</a></samp>.</td></tr>
<tr class="cpp11"><td><samp><a href="/FP_ILOGB0">FP_ILOGB0</a></samp> <br>
<samp><a href="/FP_ILOGBNAN">FP_ILOGBNAN</a></samp></td><td><code>int</code></td><td>Special values the <samp><a href="/ilogb">ilogb</a></samp> function may return.</td></tr>
</table>
</section>
<br>
<section id="types">
<h3>Types</h3>
<dl class="links"><dt><a href= "/reference/cmath/double_t/"><b>double_t <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Floating-point type <span class="typ">(type)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/float_t/"><b>float_t</b></a></dt><dd>Floating-point type <span class="typ">(type)</span></dd></dl>
<div id="CH_bb"></div></div></div>
