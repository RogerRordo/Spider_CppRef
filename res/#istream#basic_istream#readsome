<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;istream&gt; &lt;iostream&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/istream/basic_istream/">basic_istream</a>::readsome</h1>
<div class="C_prototype"><pre>streamsize readsome (char_type* s, streamsize n);</pre></div><div id="I_description">Read data available in buffer</div>
<section id="description">
Extracts up to <var>n</var> characters from the stream and stores them in the array pointed by <var>s</var>, stopping as soon as the internal buffer kept by the <i><a href="/basic_streambuf">associated stream buffer object</a></i> (if any) runs out of characters, even if the <i>end-of-file</i> has not yet been reached.<br>
<br>
The function is meant to be used to read data from certain types of asynchronous sources that may eventually wait for more characters, since it stops extracting characters as soon as the internal buffer is exhausted, avoiding potential delays.<br>
<br>
Note that this function relies on internals of the particular <i><a href="/basic_streambuf">stream buffer</a></i> object associated to the stream whose behavior is mostly implementation-defined for standard classes.<br>
<br>
Internally, the function accesses the input sequence by first constructing a <samp><a href="/basic_istream::sentry">sentry</a></samp> object (with <var>noskipws</var> set to <code>true</code>). Then (if <samp><a href="/basic_ios::good">good</a></samp>), it checks how many characters are currently available at the associated <i><a href="/basic_streambuf">stream buffer</a></i> object by calling its member function <samp><a href="/basic_streambuf::in_avail">in_avail</a></samp> and extracts up to that many characters by calling <samp><a href="/basic_streambuf::sbumpc">sbumpc</a></samp> (or <samp><a href="/basic_streambuf::sgetc">sgetc</a></samp>). Finally, it destroys the <samp><a href="/basic_istream::sentry">sentry</a></samp> object before returning.<br>
<br>
The number of characters successfully read and stored by this function can be accessed by calling member <samp><a href="/basic_istream::gcount">gcount</a></samp>.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>s</dt>
<dd>Pointer to an array where the extracted characters are stored.<br>
Member type <samp>char_type</samp> is the type of characters used by the stream (i.e., its first class template parameter, <samp>charT</samp>).<br>
</dd>
<dt>n</dt>
<dd>Maximum number of characters to extract.<br>
<samp><a href="/streamsize">streamsize</a></samp> is a signed integral type.<br>
</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
The number of characters stored.<br>
<samp><a href="/streamsize">streamsize</a></samp> is a signed integral type.<br>
<br>
Errors are signaled by modifying the <i><a href="/basic_ios::rdstate">internal state flags</a></i>:<br>
<table class="boxed">
<tr><th>flag</th><th>error</th></tr>
<tr><td><samp><a href="/ios_base::eofbit">eofbit</a></samp></td><td>The input sequence has no characters available (as reported by <code><a href="/basic_ios::rdbuf">rdbuf()</a>-&gt;<a href="/basic_streambuf::in_avail">in_avail()</a></code> returning <code>-1</code>).</td></tr>
<tr><td><samp><a href="/ios_base::failbit">failbit</a></samp></td><td>The construction of <samp><a href="/basic_istream::sentry">sentry</a></samp> failed (such as when the <i><a href="/basic_ios::rdstate">stream state</a></i> was not <samp><a href="/basic_ios::good">good</a></samp> before the call).</td></tr>
<tr><td><samp><a href="/ios_base::badbit">badbit</a></samp></td><td>Error on stream (such as when this function catches an exception thrown by an internal operation).<br>
When set, the integrity of the stream may have been affected.</td></tr>
</table>
Multiple flags may be set by a single operation.<br>
<br>
If the operation sets an <i><a href="/basic_ios::rdstate">internal state flag</a></i> that was registered with member <samp><a href="/basic_ios::exceptions">exceptions</a></samp>, the function throws an exception of member type <samp><a href="/ios_base::failure">failure</a></samp>.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
Modifies the elements in the array pointed by <var>s</var> and the stream object.<br>
Concurrent access to the same stream object may cause data races, except for the standard stream objects <samp><a href="/cin">cin</a></samp> and <samp><a href="/wcin">wcin</a></samp> when these are <i><a href="/ios_base::sync_with_stdio">synchronized with stdio</a></i> (in this case, no data races are initiated, although no guarantees are given on the order in which extracted characters are attributed to threads).<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
<b>Basic guarantee:</b> if an exception is thrown, the object is in a valid state.<br>
It throws an exception of member type <samp><a href="/ios_base::failure">failure</a></samp> if the resulting <i>error state flag</i> is not <samp><a href="/ios_base::goodbit">goodbit</a></samp> and member <samp><a href="/basic_ios::exceptions">exceptions</a></samp> was set to throw for that state.<br>
Any exception thrown by an internal operation is caught and handled by the function, setting <samp><a href="/ios_base::badbit">badbit</a></samp>. If <samp><a href="/ios_base::badbit">badbit</a></samp> was set on the last call to <samp><a href="/basic_ios::exceptions">exceptions</a></samp>, the function rethrows the caught exception.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/istream/basic_istream/read/"><b>basic_istream::read</b></a></dt><dd>Read block of data <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/ostream/basic_ostream/write/"><b>basic_ostream::write</b></a></dt><dd>Write block of data <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/istream/basic_istream/operator>>/"><b>basic_istream::operator&gt;&gt;</b></a></dt><dd>Extract formatted input <span class="typ">(public member function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
