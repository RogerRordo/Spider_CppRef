<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;ios&gt; &lt;iostream&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/ios/ios/">ios</a>::clear</h1>
<div class="C_prototype"><pre>void clear (iostate state = goodbit);</pre></div><div id="I_description">Set error state flags</div>
<section id="description">
Sets a new value for the stream's internal <i>error state flags</i>.<br>
<br>
The current value of the flags is overwritten: All bits are replaced by those in <var>state</var>; If <var>state</var> is <samp>goodbit</samp> (which is zero) all error flags are cleared.<br>
<br>
In the case that no <i><a href="/ios::rdbuf">stream buffer</a></i> is associated with the stream when this function is called, the <samp>badbit</samp> flag is automatically set (no matter the value for that bit passed in argument <var>state</var>).<br>
<br>
Note that changing the <var>state</var> may throw an exception, depending on the latest settings passed to member <samp><a href="/ios::exceptions">exceptions</a></samp>.<br>
<br>
The current state can be obtained with member function <a href="/ios::rdstate">rdstate</a>.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>state</dt>
<dd>An object of type <a href="/ios_base::iostate">ios_base::iostate</a> that can take as value any combination of the following state flag member constants:<br>
<br>
<table class="boxed">
<tr><th rowspan="2"><samp><a href="/ios_base::iostate">iostate</a></samp> value<br>
(member constant)</th><th rowspan="2">indicates</th><th colspan="5"><samp></samp>functions to check state flags</th></tr>
<tr><th><samp><a href="/ios::good">good()</a></samp></th><th><samp><a href="/ios::eof">eof()</a></samp></th><th><samp><a href="/ios::fail">fail()</a></samp></th><th><samp><a href="/ios::bad">bad()</a></samp></th><th><samp><a href="/ios::rdstate">rdstate()</a></samp></th></tr>
<tr><th><samp>goodbit</samp></th><td>No errors (zero value <samp><a href="/ios_base::iostate">iostate</a></samp>)</td><td class="yes"><code>true</code></td><td class="no"><code>false</code></td><td class="no"><code>false</code></td><td class="no"><code>false</code></td><td><samp>goodbit</samp></td></tr>
<tr><th><samp>eofbit</samp></th><td>End-of-File reached on input operation</td><td class="no"><code>false</code></td><td class="yes"><code>true</code></td><td class="no"><code>false</code></td><td class="no"><code>false</code></td><td><samp>eofbit</samp></td></tr>
<tr><th><samp>failbit</samp></th><td>Logical error on i/o operation</td><td class="no"><code>false</code></td><td class="no"><code>false</code></td><td class="yes"><code>true</code></td><td class="no"><code>false</code></td><td><samp>failbit</samp></td></tr>
<tr><th><samp>badbit</samp></th><td>Read/writing error on i/o operation</td><td class="no"><code>false</code></td><td class="no"><code>false</code></td><td class="yes"><code>true</code></td><td class="yes"><code>true</code></td><td><samp>badbit</samp></td></tr>
</table>
<samp>eofbit</samp>, <samp>failbit</samp> and <samp>badbit</samp> are member constants with implementation-defined values that can be combined (as if with the bitwise OR operator).<br>
<samp>goodbit</samp> is zero, indicating that none of the other bits is set.</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
none <br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br></code></pre></td>
<td class="source"><pre><code><cite>// clearing errors</cite>
<dfn>#include &lt;iostream&gt;     </dfn><cite>// std::cout</cite>
<dfn>#include &lt;fstream&gt;      </dfn><cite>// std::fstream</cite>

<var>int</var> main () {
  <var>char</var> buffer [80];
  std::fstream myfile;

  myfile.open (<kbd>"test.txt"</kbd>,std::fstream::in);

  myfile &lt;&lt; <kbd>"test"</kbd>;
  <var>if</var> (myfile.fail())
  {
    std::cout &lt;&lt; <kbd>"Error writing to test.txt\n"</kbd>;
    myfile.clear();
  }

  myfile.getline (buffer,80);
  std::cout &lt;&lt; buffer &lt;&lt; <kbd>" successfully read from file.\n"</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
In this example, <code>myfile</code> is open for input operations, but we perform an output operation on it, so <code>failbit</code> is set. The example calls then <samp>clear</samp> in order to remove the flag and allow further operations like <samp><a href="/istream::getline">getline</a></samp> to be attempted on <code>myfile</code>.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
Modifies the stream object.<br>
Concurrent access to the same stream object may cause data races.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
<b>Basic guarantee:</b> if an exception is thrown, the stream is in a valid state.<br>
It throws an exception of member type <samp><a href="/ios_base::failure">failure</a></samp> if the resulting <i>error state flag</i> is not <samp>goodbit</samp> and member <samp><a href="/ios::exceptions">exceptions</a></samp> was set throw for that state.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/ios/ios/fail/"><b>ios::fail</b></a></dt><dd>Check whether either failbit or badbit is set <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/ios/ios/good/"><b>ios::good</b></a></dt><dd>Check whether state of stream is good <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/ios/ios/bad/"><b>ios::bad</b></a></dt><dd>Check whether badbit is set <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/ios/ios/eof/"><b>ios::eof</b></a></dt><dd>Check whether eofbit is set <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/ios/ios/rdstate/"><b>ios::rdstate</b></a></dt><dd>Get error state flags <span class="typ">(public member function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
