<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;string&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/string/basic_string/">basic_string</a>::swap</h1>
<div class="C_prototype"><pre>void swap (basic_string&amp; str);</pre></div><div id="I_description">Swap string values</div>
<section id="description">
Exchanges the content of the container by the content of <i>str</i>, which is another <a href="/basic_string">basic_string</a> object of the same type. <a href="/basic_string::length">Lengths</a> may differ.<br>
<br>
After the call to this member function, the value of this object is the value <i>str</i> had before the call, and the value of <i>str</i> is the value this object had before the call.<br>
<br>
Notice that a non-member function exists with the same name, <a href="/basic_string:swap">swap</a>, overloading that algorithm with an optimization that behaves like this member function.<br>
<br>
<div class="C_SwitchCases">
<div title="C++98">
No specifics on <a href="/basic_string::get_allocator">allocators</a>.<br>
</div>
<div title="C++11">
Whether the container <a href="/basic_string::get_allocator">allocators</a> are also swapped is not defined, unless in the case the appropriate <a href="/allocator_traits">allocator traits</a> indicate explicitly that they shall <a href="/allocator_traits#types">propagate</a>.<br>
</div>
</div>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>str</dt>
<dd>Another <a href="/basic_string">basic_string</a> object of the same type (i.e., instantiated with the same template parameters, <tt>charT</tt>, <tt>traits</tt> and <tt>Alloc</tt>), whose value is swapped with that of this <a href="/basic_string">basic_string</a>.</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
none<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br></code></pre></td>
<td class="source"><pre><code><cite>// swap strings</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>

main ()
{
  std::string buyer (<kbd>"money"</kbd>);
  std::string seller (<kbd>"goods"</kbd>);

  std::cout &lt;&lt; <kbd>"Before the swap, buyer has "</kbd> &lt;&lt; buyer;
  std::cout &lt;&lt; <kbd>" and seller has "</kbd> &lt;&lt; seller &lt;&lt; <kbd>'\n'</kbd>;

  seller.swap (buyer);

  std::cout &lt;&lt; <kbd>" After the swap, buyer has "</kbd> &lt;&lt; buyer;
  std::cout &lt;&lt; <kbd>" and seller has "</kbd> &lt;&lt; seller &lt;&lt; <kbd>'\n'</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>Before the swap, buyer has money and seller has goods
 After the swap, buyer has goods and seller has money
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Constant.<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
Any iterators, pointers and references related to this object and to <i>str</i> may be invalidated.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
Both the object and <i>str</i> are modified.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
If the allocators in both <a href="/basic_string">strings</a> compare equal, or if their <a href="/allocator_traits">allocator traits</a> indicate that the allocators shall <a href="/allocator_traits#types">propagate</a>, the function never throws exceptions (no-throw guarantee).<br>
Otherwise, it causes <i>undefined behavior</i>.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/string/basic_string/swap-free/"><b>swap (basic_string)</b></a></dt><dd>Exchanges the values of two strings <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/swap_ranges/"><b>swap_ranges</b></a></dt><dd>Exchange values of two ranges <span class="typ">(function template)</span></dd></dl>
<div id="CH_bb"></div></div></div>
