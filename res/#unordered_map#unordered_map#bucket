<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;unordered_map&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/unordered_map/unordered_map/">unordered_map</a>::bucket<span class="C_ico cpp11warning" title="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it." alt="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it."></span></h1>
<div class="C_prototype"><pre>size_type bucket ( const key_type&amp; k ) const;</pre></div><div id="I_description">Locate element's bucket</div>
<section id="description">
Returns the bucket number where the element with key <i>k</i> is located.<br>
<br>
A bucket is a slot in the container's internal hash table to which elements are assigned based on the hash value of their key. Buckets are numbered from <tt>0</tt> to <tt>(<a href="/unordered_map::bucket_count">bucket_count</a>-1)</tt>.<br>
<br>
Individual elements in a bucket can be accessed by means of the range iterators returned by <a href="/unordered_map::begin">unordered_map::begin</a> and <a href="/unordered_map::end">unordered_map::end</a>.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>k</dt>
<dd>Key whose bucket is to be located.<br>
Member type <tt>key_type</tt> is the type of the keys for the elements in the container, defined in <a href="/unordered_map">unordered_map</a> as an alias of its first template parameter (<tt>Key</tt>).</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
The order number of the bucket corresponding to <i>k</i>.<br>
<br>
Member type <tt>size_type</tt> is an unsigned integral type.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br></code></pre></td>
<td class="source"><pre><code><cite>// unordered_map::bucket</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>
<dfn>#include &lt;unordered_map&gt;</dfn>

<var>int</var> main ()
{
  std::unordered_map&lt;std::string,std::string&gt; mymap = {
    {<kbd>"us"</kbd>,<kbd>"United States"</kbd>},
    {<kbd>"uk"</kbd>,<kbd>"United Kingdom"</kbd>},
    {<kbd>"fr"</kbd>,<kbd>"France"</kbd>},
    {<kbd>"de"</kbd>,<kbd>"Germany"</kbd>}
  };

  <var>for</var> (<var>auto</var>&amp; x: mymap) {
    std::cout &lt;&lt; <kbd>"Element ["</kbd> &lt;&lt; x.first &lt;&lt; <kbd>":"</kbd> &lt;&lt; x.second &lt;&lt; <kbd>"]"</kbd>;
    std::cout &lt;&lt; <kbd>" is in bucket #"</kbd> &lt;&lt; mymap.bucket (x.first) &lt;&lt; std::endl;
  }

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Possible output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>Element [us:United States] is in bucket #1
Element [de:Germany] is in bucket #2
Element [fr:France] is in bucket #2
Element [uk:United Kingdom] is in bucket #4
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Constant.<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
No changes.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/unordered_map/unordered_map/find/"><b>unordered_map::find</b></a></dt><dd>Get iterator to element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_map/unordered_map/bucket_size/"><b>unordered_map::bucket_size</b></a></dt><dd>Return bucket size <span class="typ">(public member type)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_map/unordered_map/bucket_count/"><b>unordered_map::bucket_count</b></a></dt><dd>Return number of buckets <span class="typ">(public member function)</span></dd></dl>
</section>
<div id="CH_bb"></div></div></div>
