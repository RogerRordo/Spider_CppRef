<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;map&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/map/multimap/">multimap</a>::count</h1>
<div class="C_prototype"><pre>size_type count (const key_type&amp; k) const;</pre></div><div id="I_description">Count elements with a specific key</div>
<section id="description">
Searches the container for elements with a key equivalent to <i>k</i> and returns the number of matches.<br>
<br>
Two <i>keys</i> are considered equivalent if the container's <a href="/map::key_comp">comparison object</a> returns <tt>false</tt> reflexively (i.e., no matter the order in which the keys are passed as arguments).<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>k</dt>
<dd>Key to search for.<br>
Member type <tt>key_type</tt> is the type of the element keys in the container, defined in <a href="/map">map</a> as an alias of its first template parameter (<tt>Key</tt>).</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
The number of elements in the container contains that have a key equivalent to <i>k</i>.<br>
<br>
Member type <tt>size_type</tt> is an unsigned integral type.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br></code></pre></td>
<td class="source"><pre><code><cite>// multimap::count</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;map&gt;</dfn>

<var>int</var> main ()
{
  std::multimap&lt;<var>char</var>,<var>int</var>&gt; mymm;

  mymm.insert(std::make_pair(<kbd>'x'</kbd>,50));
  mymm.insert(std::make_pair(<kbd>'y'</kbd>,100));
  mymm.insert(std::make_pair(<kbd>'y'</kbd>,150));
  mymm.insert(std::make_pair(<kbd>'y'</kbd>,200));
  mymm.insert(std::make_pair(<kbd>'z'</kbd>,250));
  mymm.insert(std::make_pair(<kbd>'z'</kbd>,300));

  <var>for</var> (<var>char</var> c=<kbd>'x'</kbd>; c&lt;=<kbd>'z'</kbd>; c++)
  {
    std::cout &lt;&lt; <kbd>"There are "</kbd> &lt;&lt; mymm.count(c) &lt;&lt; <kbd>" elements with key "</kbd> &lt;&lt; c &lt;&lt; <kbd>":"</kbd>;
    std::multimap&lt;<var>char</var>,<var>int</var>&gt;::iterator it;
    <var>for</var> (it=mymm.equal_range(c).first; it!=mymm.equal_range(c).second; ++it)
      std::cout &lt;&lt; <kbd>' '</kbd> &lt;&lt; (*it).second;
    std::cout &lt;&lt; <kbd>'\n'</kbd>;
  }

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>
There are 1 elements with key x: 50
There are 3 elements with key y: 100 150 200
There are 2 elements with key z: 250 300
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Logarithmic in <a href="/multimap::size">size</a>, plus linear in the number of matches.<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
No changes.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The container is accessed.<br>
No mapped values are accessed: concurrently accessing or modifying elements is safe.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
<b>Strong guarantee:</b> if an exception is thrown, there are no changes in the container.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/map/multimap/find/"><b>multimap::find</b></a></dt><dd>Get iterator to element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/map/multimap/equal_range/"><b>multimap::equal_range</b></a></dt><dd>Get range of equal elements <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/map/multimap/size/"><b>multimap::size</b></a></dt><dd>Return container size <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/map/multimap/lower_bound/"><b>multimap::lower_bound</b></a></dt><dd>Return iterator to lower bound <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/map/multimap/upper_bound/"><b>multimap::upper_bound</b></a></dt><dd>Return iterator to upper bound <span class="typ">(public member function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
