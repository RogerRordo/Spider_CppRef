<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;set&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/set/set/">set</a>::rbegin</h1>
<div class="C_prototype"><div class="C_SwitchCases">
<div title="C++98">
<pre>      reverse_iterator rbegin();const_reverse_iterator rbegin() const;</pre></div>
<div title="C++11" class="on">
<pre>      reverse_iterator rbegin() noexcept;const_reverse_iterator rbegin() const noexcept;</pre></div>
</div>
</div><div id="I_description">Return reverse iterator to reverse beginning</div>
<section id="description">
Returns a <i>reverse iterator</i> pointing to the last element in the container (i.e., its <i>reverse beginning</i>).<br>
<br>
<dfn>Reverse iterators</dfn> iterate backwards: increasing them moves them towards the beginning of the container.<br>
<br>
<tt>rbegin</tt> points to the element preceding the one that would be pointed to by member <a href="/set::end">end</a>.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
none<br>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
A reverse iterator to the <i>reverse beginning</i> of the sequence container.<br>
<br>
If the <a href="/set">set</a> object is const-qualified, the function returns a <tt>const_reverse_iterator</tt>. Otherwise, it returns a <tt>reverse_iterator</tt>.<br>
<br>
Member types <tt>reverse_iterator</tt> and <tt>const_reverse_iterator</tt> are reverse <a href="/BidirectionalIterator">bidirectional iterator</a> types pointing to elements. See <a href="/set#types">set member types</a>.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br></code></pre></td>
<td class="source"><pre><code><cite>// set::rbegin/rend</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;set&gt;</dfn>

<var>int</var> main ()
{
  <var>int</var> myints[] = {21,64,17,78,49};
  std::set&lt;<var>int</var>&gt; myset (myints,myints+5);

  std::set&lt;<var>int</var>&gt;::reverse_iterator rit;

  std::cout &lt;&lt; <kbd>"myset contains:"</kbd>;
  <var>for</var> (rit=myset.rbegin(); rit != myset.rend(); ++rit)
    std::cout &lt;&lt; <kbd>' '</kbd> &lt;&lt; *rit;

  std::cout &lt;&lt; <kbd>'\n'</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>myset contains: 78 64 49 21 17
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Constant.<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
No changes.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The container is accessed (neither the const nor the non-const versions modify the container).<br>
Concurrently accessing the elements of a <a href="/set">set</a> is safe.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
<b>No-throw guarantee:</b> this member function never throws exceptions.<br>
The copy construction or assignment of the returned iterator is also guaranteed to never throw.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/set/set/rend/"><b>set::rend</b></a></dt><dd>Return reverse iterator to reverse end <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/set/set/begin/"><b>set::begin</b></a></dt><dd>Return iterator to beginning <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/set/set/end/"><b>set::end</b></a></dt><dd>Return iterator to end <span class="typ">(public member function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
