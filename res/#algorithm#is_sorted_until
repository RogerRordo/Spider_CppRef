<div id="I_content">
<div class="C_doc">
<div id="I_type">function template</div>
<div id="I_file">&lt;algorithm&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span>is_sorted_until<span class="C_ico cpp11warning" title="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it." alt="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it."></span></h1>
<div class="C_prototype"><table><tr class="odd"><th>default (1)</th><td><pre>template &lt;class ForwardIterator&gt;  ForwardIterator is_sorted_until (ForwardIterator first, ForwardIterator last);</pre></td></tr><tr class="even"><th>custom (2)</th><td><pre>template &lt;class ForwardIterator, class Compare&gt;  ForwardIterator is_sorted_until (ForwardIterator first, ForwardIterator last,                                   Compare comp);</pre></td></tr></table></div><div id="I_description">Find first unsorted element in range</div>
<section id="description">
Returns an iterator to the first element in the range <code>[first,last)</code> which does not follow an ascending order.<br>
<br>
The range between <var>first</var> and the iterator returned <a href="/is_sorted">is sorted</a>.<br>
<br>
If the entire range is sorted, the function returns <var>last</var>.<br>
<br>
The elements are compared using <code>operator&lt;</code> for the first version, and <var>comp</var> for the second.<br>
<br>
The behavior of this function template is equivalent to:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br></code></pre></td>
<td class="source"><pre><code><var>template</var> &lt;<var>class</var> ForwardIterator&gt;
  ForwardIterator is_sorted_until (ForwardIterator first, ForwardIterator last)
{
  <var>if</var> (first==last) <var>return</var> first;
  ForwardIterator next = first;
  <var>while</var> (++next!=last) {
    <var>if</var> (*next&lt;*first) <var>return</var> next;
    ++first;
  }
  <var>return</var> last;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>first, last</dt>
<dd><a href="/ForwardIterator">Forward iterators</a> to the initial and final positions in a sequence. The range checked is <code>[first,last)</code>, which contains all the elements between <var>first</var> and <var>last</var>, including the element pointed by <var>first</var> but not the element pointed by <var>last</var>.</dd>
<dt>comp</dt>
<dd>Binary function that accepts two elements in the range as arguments, and returns a value convertible to <code>bool</code>. The value returned indicates whether the element passed as first argument is considered to go before the second in the specific <i>strict weak ordering</i> it defines.<br>
The function shall not modify any of its arguments.<br>
This can either be a function pointer or a function object.<br>
</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
An iterator to the first element in the range which does not follow an ascending order, or <var>last</var> if all elements are sorted or if the range contains less than two elements.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br></code></pre></td>
<td class="source"><pre><code><cite>// is_sorted_until example</cite>
<dfn>#include &lt;iostream&gt;     </dfn><cite>// std::cout</cite>
<dfn>#include &lt;algorithm&gt;    </dfn><cite>// std::is_sorted_until, std::prev_permutation</cite>
<dfn>#include &lt;array&gt;        </dfn><cite>// std::array</cite>

<var>int</var> main () {
  std::array&lt;<var>int</var>,4&gt; foo {2,4,1,3};
  std::array&lt;<var>int</var>,4&gt;::iterator it;

  <var>do</var> {
    <cite>// try a new permutation:</cite>
    std::prev_permutation(foo.begin(),foo.end());

    <cite>// print range:</cite>
    std::cout &lt;&lt; <kbd>"foo:"</kbd>;
    <var>for</var> (<var>int</var>&amp; x:foo) std::cout &lt;&lt; <kbd>' '</kbd> &lt;&lt; x;
    it=std::is_sorted_until(foo.begin(),foo.end());
    std::cout &lt;&lt; <kbd>" ("</kbd> &lt;&lt; (it-foo.begin()) &lt;&lt; <kbd>" elements sorted)\n"</kbd>;

  } <var>while</var> (it!=foo.end());

  std::cout &lt;&lt; <kbd>"the range is sorted!\n"</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>foo: 2 3 4 1 (3 elements sorted)
foo: 2 3 1 4 (2 elements sorted)
foo: 2 1 4 3 (1 elements sorted)
foo: 2 1 3 4 (1 elements sorted)
foo: 1 4 3 2 (2 elements sorted)
foo: 1 4 2 3 (2 elements sorted)
foo: 1 3 4 2 (3 elements sorted)
foo: 1 3 2 4 (2 elements sorted)
foo: 1 2 4 3 (3 elements sorted)
foo: 1 2 3 4 (4 elements sorted)
the range is sorted!
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Up to linear in the <a href="/distance">distance</a> between <var>first</var> and <var>last</var>: Calls <var>comp</var> for each element until a mismatch is found.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
Some (or all) of the objects in the range <code>[first,last)</code> are accessed (once at most).<br>
</section>
<br>
<section id="exceptions">
<h3>Exceptions</h3>
Throws if either <var>comp</var> or an operation on an iterator throws.<br>
Note that invalid parameters cause <i>undefined behavior</i>.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/algorithm/is_sorted/"><b>is_sorted</b></a></dt><dd>Check whether range is sorted <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/sort/"><b>sort</b></a></dt><dd>Sort elements in range <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/find_if/"><b>find_if</b></a></dt><dd>Find element in range <span class="typ">(function template)</span></dd></dl>
<div id="CH_bb"></div></div></div>
