<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;vector&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/vector/vector/">vector</a>::operator=</h1>
<div class="C_prototype"><div class="C_SwitchCases">
<div title="C++98">
<table><tr class="odd"><th>copy (1)</th><td><pre> vector&amp; operator= (const vector&amp; x);</pre></td></tr></table></div>
<div title="C++11" class="on">
<table><tr class="even"><th>copy (1)</th><td><pre>vector&amp; operator= (const vector&amp; x);</pre></td></tr><tr class="odd"><th>move (2)</th><td><pre>vector&amp; operator= (vector&amp;&amp; x);</pre></td></tr><tr class="even"><th>initializer list (3)</th><td><pre>vector&amp; operator= (initializer_list&lt;value_type&gt; il);</pre></td></tr></table></div>
</div>
</div><div id="I_description">Assign content</div>
<section id="description">
Assigns new contents to the container, replacing its current contents, and modifying its <a href="/vector::size">size</a> accordingly.<br>
<br>
<div class="C_SwitchCases">
<div title="C++98">
Copies all the elements from <i>x</i> into the container.<br>
<br>
The container preserves its <a href="/vector::get_allocator">current allocator</a>, which is used to allocate storage in case of reallocation.<br>
</div>
<div title="C++11">
The <i>copy assignment</i> (1) copies all the elements from <i>x</i> into the container (with <i>x</i> preserving its contents).<br>
<br>
The <i>move assignment</i> (2) moves the elements of <i>x</i> into the container (<i>x</i> is left in an unspecified but valid state).<br>
<br>
The <i>initializer list assignment</i> (3) copies the elements of <i>il</i> into the container.<br>
<br>
The container preserves its <a href="/vector::get_allocator">current allocator</a>, except if the <a href="/allocator_traits">allocator traits</a> indicate that <i>x</i>'s allocator should <a href="/allocator_traits#types">propagate</a>. This <a href="/vector::get_allocator">allocator</a> is used (through its <a href="/allocator_traits">traits</a>) to <a href="/allocator_traits::allocate">allocate</a> and <a href="/allocator_traits::deallocate">deallocate</a> storage if a reallocation happens, and to <a href="/allocator_traits::construct">construct</a> or <a href="/allocator_traits::destroy">destroy</a> elements, if needed.<br>
</div>
</div>
<br>
Any elements held in the container before the call are either <i>assigned to</i> or <i>destroyed</i>.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>x</dt>
<dd>A <a href="/vector">vector</a> object of the same type (i.e., with the same template parameters, <tt>T</tt> and <tt>Alloc</tt>).</dd>
<dt>il</dt>
<dd>An <a href="/initializer_list">initializer_list</a> object. The compiler will automatically construct such objects from <i>initializer list</i> declarators.<br>
Member type <tt>value_type</tt> is the type of the elements in the container, defined in <a href="/vector">vector</a> as an alias of its first template parameter (<tt>T</tt>).</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
<tt>*this</tt>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br></code></pre></td>
<td class="source"><pre><code><cite>// vector assignment</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;vector&gt;</dfn>

<var>int</var> main ()
{
  std::vector&lt;<var>int</var>&gt; foo (3,0);
  std::vector&lt;<var>int</var>&gt; bar (5,0);

  bar = foo;
  foo = std::vector&lt;<var>int</var>&gt;();

  std::cout &lt;&lt; <kbd>"Size of foo: "</kbd> &lt;&lt; <var>int</var>(foo.size()) &lt;&lt; <kbd>'\n'</kbd>;
  std::cout &lt;&lt; <kbd>"Size of bar: "</kbd> &lt;&lt; <var>int</var>(bar.size()) &lt;&lt; <kbd>'\n'</kbd>;
  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>Size of foo: 0
Size of bar: 3
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Linear in <a href="/vector::size">size</a>.<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
All iterators, references and pointers related to this container before the call are invalidated.<br>
<br>
In the <i>move assignment</i>, iterators, pointers and references referring to elements in <i>x</i> are also invalidated.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
All copied elements are accessed.<br>
The <i>move assignment (2)</i> modifies <i>x</i>.<br>
The container and all its elements are modified.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
<b>Basic guarantee:</b> if an exception is thrown, the container is in a valid state.<br>
If <a href="/allocator_traits::construct">allocator_traits::construct</a> is not supported with the appropriate arguments for the element constructions, or if <tt>value_type</tt> is not <a href="/is_copy_assignable">copy assignable</a> (or <a href="/is_move_assignable">move assignable</a> for <i>(2)</i>), it causes <i>undefined behavior</i>.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/vector/vector/assign/"><b>vector::assign</b></a></dt><dd>Assign vector content <span class="typ">(public member function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
