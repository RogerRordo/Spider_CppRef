<div id="I_content">
<div class="C_doc">
<div id="I_type">function</div>
<div id="I_file">&lt;cstdlib&gt;</div>
<h1>getenv</h1>
<div class="C_prototype"><pre>char* getenv (const char* name);</pre></div><div id="I_description">Get environment string</div>
<section id="description">
Retrieves a C-string containing the value of the environment variable whose <var>name</var> is specified as argument. If the requested variable is not part of the environment list, the function returns a null pointer.<br>
<br>
The pointer returned points to an internal memory block, whose content or validity may be altered by further calls to <samp>getenv</samp> (but not by other library functions).<br>
<br>
The string pointed by the pointer returned by this function shall not be modified by the program. Some systems and library implementations may allow to change environmental variables with specific functions (<samp>putenv</samp>, <tt>setenv</tt>...), but such functionality is non-portable.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>name</dt>
<dd>C-string containing the name of the requested variable.<br>
Depending on the platform, this may either be case sensitive or not.<br>
</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
A C-string with the value of the requested environment variable, or a <i>null pointer</i> if such environment variable does not exist.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br></code></pre></td>
<td class="source"><pre><code><cite>/* getenv example: getting path */</cite>
<dfn>#include &lt;stdio.h&gt;      </dfn><cite>/* printf */</cite><dfn></dfn>
<dfn>#include &lt;stdlib.h&gt;     </dfn><cite>/* getenv */</cite><dfn></dfn>

<var>int</var> main ()
{
  <var>char</var>* pPath;
  pPath = getenv (<kbd>"PATH"</kbd>);
  <var>if</var> (pPath!=NULL)
    printf (<kbd>"The current path is: %s"</kbd>,pPath);
  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
The example above prints the PATH environment variable, if such a variable exists in the hosting environment.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
Concurrently calling this function is safe, provided that the environment remains unchanged.<br>
</section>
<br>
<section id="exceptions">
<h3>Exceptions (C++)</h3>
<b>No-throw guarantee:</b> this function never throws exceptions.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/cstdlib/system/"><b>system</b></a></dt><dd>Execute system command <span class="typ">(function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
