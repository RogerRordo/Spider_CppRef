<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;deque&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/deque/deque/">deque</a>::back</h1>
<div class="C_prototype"><pre>      reference back();const_reference back() const;</pre></div><div id="I_description">Access last element</div>
<section id="description">
Returns a reference to the last element in the container.<br>
<br>
Unlike member <a href="/deque::end">deque::end</a>, which returns an iterator just past this element, this function returns a direct reference.<br>
<br>
Calling this function on an <a href="/deque::empty">empty</a> container causes undefined behavior.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
none<br>
</section>
<br>
<section id="return">
<h3>Return value</h3>
A reference to the last element in the <a href="/deque">deque</a> container.<br>
<br>
If the <a href="/deque">deque</a> object is const-qualified, the function returns a <tt>const_reference</tt>. Otherwise, it returns a <tt>reference</tt>.<br>
<br>
Member types <tt>reference</tt> and <tt>const_reference</tt> are the reference types to the elements of the container (see <a href="/deque#types">deque member types</a>).<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br></code></pre></td>
<td class="source"><pre><code><cite>// deque::back</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;deque&gt;</dfn>

<var>int</var> main ()
{
  std::deque&lt;<var>int</var>&gt; mydeque;

  mydeque.push_back(10);

  <var>while</var> (mydeque.back() != 0)
    mydeque.push_back ( mydeque.back() -1 );

  std::cout &lt;&lt; <kbd>"mydeque contains:"</kbd>;

  <var>for</var> (std::deque&lt;<var>int</var>&gt;::iterator it = mydeque.begin(); it!=mydeque.end(); ++it)
    std::cout &lt;&lt; <kbd>' '</kbd> &lt;&lt; *it;

  std::cout &lt;&lt; <kbd>'\n'</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>mydeque contains: 10 9 8 7 6 5 4 3 2 1 0
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Constant.<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
No changes.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The container is accessed (neither the const nor the non-const versions modify the container).<br>
The last element is potentially accessed or modified by the caller. Concurrently accessing or modifying other elements is safe.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
If the container is not <a href="/vector::empty">empty</a>, the function never throws exceptions (no-throw guarantee).<br>
Otherwise, it causes <i>undefined behavior</i>.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/deque/deque/front/"><b>deque::front</b></a></dt><dd>Access first element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/deque/deque/end/"><b>deque::end</b></a></dt><dd>Return iterator to end <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/deque/deque/push_back/"><b>deque::push_back</b></a></dt><dd>Add element at the end <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/deque/deque/pop_back/"><b>deque::pop_back</b></a></dt><dd>Delete last element <span class="typ">(public member function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
