<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;deque&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/deque/deque/">deque</a>::push_front</h1>
<div class="C_prototype"><div class="C_SwitchCases">
<div title="C++98">
<pre>void push_front (const value_type&amp; val);</pre></div>
<div title="C++11" class="on">
<pre>void push_front (const value_type&amp; val);void push_front (value_type&amp;&amp; val);</pre></div>
</div>
</div><div id="I_description">Insert element at beginning</div>
<section id="description">
Inserts a new element at the beginning of the <a href="/deque">deque</a> container, right before its current first element. The content of <i>val</i> is copied (or moved) to the inserted element.<br>
<br>
This effectively increases the container <a href="/deque::size">size</a> by one.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>val</dt>
<dd>Value to be copied (or moved) to the inserted element.<br>
Member type <tt>value_type</tt> is the type of the elements in the container, defined in <a href="/deque">deque</a> as an alias of its first template parameter (<tt>T</tt>).</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
none<br>
<br>
The storage for the new elements is allocated using the container's <a href="/deque::get_allocator">allocator</a>, which may throw exceptions on failure (for the default <a href="/allocator">allocator</a>, <tt>bad_alloc</tt> is thrown if the allocation request does not succeed).<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br></code></pre></td>
<td class="source"><pre><code><cite>// deque::push_front</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;deque&gt;</dfn>

<var>int</var> main ()
{
  std::deque&lt;<var>int</var>&gt; mydeque (2,100);     <cite>// two ints with a value of 100</cite>
  mydeque.push_front (200);
  mydeque.push_front (300);

  std::cout &lt;&lt; <kbd>"mydeque contains:"</kbd>;
  <var>for</var> (std::deque&lt;<var>int</var>&gt;::iterator it = mydeque.begin(); it != mydeque.end(); ++it)
    std::cout &lt;&lt; <kbd>' '</kbd> &lt;&lt; *it;
  std::cout &lt;&lt; <kbd>'\n'</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>300 200 100 100 
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Constant.<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
All iterators related to this container are invalidated. Pointers and references to elements in the container remain valid, referring to the same elements they were referring to before the call.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The container is modified.<br>
No existing elements are accessed (although see <i>iterator validity</i> above).<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
<b>Strong guarantee:</b> if an exception is thrown, there are no changes in the container.<br>
If <a href="/allocator_traits::construct">allocator_traits::construct</a> is not supported with <i>val</i> as argument, it causes <i>undefined behavior</i>.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/deque/deque/push_back/"><b>deque::push_back</b></a></dt><dd>Add element at the end <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/deque/deque/pop_front/"><b>deque::pop_front</b></a></dt><dd>Delete first element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/deque/deque/insert/"><b>deque::insert</b></a></dt><dd>Insert elements <span class="typ">(public member function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
