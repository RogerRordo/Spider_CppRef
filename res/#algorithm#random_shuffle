<div id="I_content">
<div class="C_doc">
<div id="I_type">function template</div>
<div id="I_file">&lt;algorithm&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span>random_shuffle</h1>
<div class="C_prototype"><div class="C_SwitchCases">
<div title="C++98">
<table><tr class="odd"><th>generator by default (1)</th><td><pre>template &lt;class RandomAccessIterator&gt;  void random_shuffle (RandomAccessIterator first, RandomAccessIterator last);</pre></td></tr><tr class="even"><th>specific generator (2)</th><td><pre>template &lt;class RandomAccessIterator, class RandomNumberGenerator&gt;  void random_shuffle (RandomAccessIterator first, RandomAccessIterator last,                       RandomNumberGenerator&amp; gen);</pre></td></tr></table></div>
<div title="C++11" class="on">
<table><tr class="odd"><th>generator by default (1)</th><td><pre>template &lt;class RandomAccessIterator&gt;  void random_shuffle (RandomAccessIterator first, RandomAccessIterator last);</pre></td></tr><tr class="even"><th>specific generator (2)</th><td><pre>template &lt;class RandomAccessIterator, class RandomNumberGenerator&gt;  void random_shuffle (RandomAccessIterator first, RandomAccessIterator last,                       RandomNumberGenerator&amp;&amp; gen);</pre></td></tr></table></div>
</div>
</div><div id="I_description">Randomly rearrange elements in range</div>
<section id="description">
Rearranges the elements in the range <code>[first,last)</code> randomly.<br>
<br>
The function swaps the value of each element with that of some other randomly picked element. When provided, the function <var>gen</var> determines which element is picked in every case. Otherwise, the function uses some unspecified source of randomness.<br>
<br>
To specify a <i>uniform random generator</i> as those defined in <code><a href="/&lt;random&gt;">&lt;random&gt;</a></code>, see <samp><a href="/shuffle">shuffle</a></samp>.<br>
<br>
The behavior of this function template <i>(2)</i> is equivalent to:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br></code></pre></td>
<td class="source"><pre><code><var>template</var> &lt;<var>class</var> RandomAccessIterator, <var>class</var> RandomNumberGenerator&gt;
  <var>void</var> random_shuffle (RandomAccessIterator first, RandomAccessIterator last,
                       RandomNumberGenerator&amp; gen)
{
  iterator_traits&lt;RandomAccessIterator&gt;::difference_type i, n;
  n = (last-first);
  <var>for</var> (i=n-1; i&gt;0; --i) {
    swap (first[i],first[gen(i+1)]);
  }
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>first, last</dt>
<dd><a href="/RandomAccessIterator">Random-access iterators</a> to the initial and final positions of the sequence to be shuffled. The range used is <code>[first,last)</code>, which contains all the elements between <var>first</var> and <var>last</var>, including the element pointed by <var>first</var> but not the element pointed by <var>last</var>.</dd>
<dt>gen</dt>
<dd>Unary function taking one argument and returning a value, both convertible to/from the appropriate <a href="/iterator_traits::difference_type">difference type</a> used by the iterators. The function shall return a non-negative value less than its argument.<br>
This can either be a function pointer or a function object.</dd>
</dl>
<br>
<samp>RandomAccessIterator</samp> shall point to a type for which <samp><a href="/swap">swap</a></samp> is defined and swaps the value of its arguments.<br>
</section>
<br>
<section id="return">
<h3>Return value</h3>
none<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br></code></pre></td>
<td class="source"><pre><code><cite>// random_shuffle example</cite>
<dfn>#include &lt;iostream&gt;     </dfn><cite>// std::cout</cite>
<dfn>#include &lt;algorithm&gt;    </dfn><cite>// std::random_shuffle</cite>
<dfn>#include &lt;vector&gt;       </dfn><cite>// std::vector</cite>
<dfn>#include &lt;ctime&gt;        </dfn><cite>// std::time</cite>
<dfn>#include &lt;cstdlib&gt;      </dfn><cite>// std::rand, std::srand</cite>

<cite>// random generator function:</cite>
<var>int</var> myrandom (<var>int</var> i) { <var>return</var> std::rand()%i;}

<var>int</var> main () {
  std::srand ( <var>unsigned</var> ( std::time(0) ) );
  std::vector&lt;<var>int</var>&gt; myvector;

  <cite>// set some values:</cite>
  <var>for</var> (<var>int</var> i=1; i&lt;10; ++i) myvector.push_back(i); <cite>// 1 2 3 4 5 6 7 8 9</cite>

  <cite>// using built-in random generator:</cite>
  std::random_shuffle ( myvector.begin(), myvector.end() );

  <cite>// using myrandom:</cite>
  std::random_shuffle ( myvector.begin(), myvector.end(), myrandom);

  <cite>// print out content:</cite>
  std::cout &lt;&lt; <kbd>"myvector contains:"</kbd>;
  <var>for</var> (std::vector&lt;<var>int</var>&gt;::iterator it=myvector.begin(); it!=myvector.end(); ++it)
    std::cout &lt;&lt; <kbd>' '</kbd> &lt;&lt; *it;

  std::cout &lt;&lt; <kbd>'\n'</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Possible output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>myvector contains: 3 4 1 6 8 9 2 7 5
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Linear in the <a href="/distance">distance</a> between <var>first</var> and <var>last</var> minus one: Obtains random values and swaps elements.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The objects in the range <code>[first,last)</code> are modified.<br>
</section>
<br>
<section id="exceptions">
<h3>Exceptions</h3>
Throws if any of the random number generations, the element swaps or the operations on iterators throws.<br>
Note that invalid arguments cause <i>undefined behavior</i>.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/algorithm/rotate/"><b>rotate</b></a></dt><dd>Rotate left the elements in range <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/reverse/"><b>reverse</b></a></dt><dd>Reverse range <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/generate/"><b>generate</b></a></dt><dd>Generate values for range with function <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/utility/swap/"><b>swap</b></a></dt><dd>Exchange values of two objects <span class="typ">(function template)</span></dd></dl>
<div id="CH_bb"></div></div></div>
