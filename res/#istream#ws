<div id="I_content">
<div class="C_doc">
<div id="I_type">function</div>
<div id="I_file">&lt;istream&gt; &lt;iostream&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span>ws</h1>
<div class="C_prototype"><table><tr class="odd"><th>for istream</th><td><pre>istream&amp; ws (istream&amp; is);</pre></td></tr><tr class="even"><th>basic template</th><td><pre>template &lt;class charT, class traits&gt;basic_istream&lt;charT,traits&gt;&amp; ws (basic_istream&lt;charT,traits&gt;&amp; is);</pre></td></tr></table></div><div id="I_description">Extract whitespaces</div>
<section id="description">
Extracts as many whitespace characters as possible from the current position in the input sequence. The extraction stops as soon as a non-whitespace character is found. These extracted whitespace characters are discarded.<br>
<br>
Notice that <samp><a href="/basic_istream">basic_istream</a></samp> objects have the <samp>skipws</samp> flag set by default: This applies a similar effect before the formatted extraction operations (see <samp><a href="/basic_istream::operator&gt;&gt;">operator&gt;&gt;</a></samp>).<br>
<br>
<div class="C_SwitchCases">
<div title="C++98">
No specifications on the internal operations performed by this function.<br>
</div>
<div title="C++11">
Internally, the function accesses the input sequence <var>is</var> by first constructing a <samp><a href="/basic_istream::sentry">sentry</a></samp> object (with <var>noskipws</var> set to <code>true</code>). Then (if <samp><a href="/basic_ios::good">good</a></samp>), it extracts characters from <var>is</var>'s associated <i><a href="/basic_streambuf">stream buffer</a></i> object as if calling its member functions <samp><a href="/basic_streambuf::sbumpc">sbumpc</a></samp> or <samp><a href="/basic_streambuf::sgetc">sgetc</a></samp>, and finally destroys the <samp><a href="/basic_istream::sentry">sentry</a></samp> object before returning.<br>
</div>
</div>
<br>
Calling this function does not alter the value returned by <samp><a href="/basic_istream::gcount">gcount</a></samp>.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>is</dt>
<dd>Input stream object from where whitespaces are extracted.<br>
Because this function is a manipulator, it is designed to be used alone with no arguments in conjunction with the <i>extraction</i> (<code>&gt;&gt;</code>) operations on input streams (see example below).</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
Argument <var>is</var>.<br>
<br>
Errors are signaled by modifying the <i><a href="/basic_ios::rdstate">internal state flags</a></i> of <var>is</var>:<br>
<table class="boxed">
<tr><th>flag</th><th>error</th></tr>
<tr><td><samp><a href="/ios_base::eofbit">eofbit</a></samp></td><td>The function stopped extracting characters because the input sequence has no more characters available (<i>end-of-file</i> reached).</td></tr>
<tr><td><samp><a href="/ios_base::failbit">failbit</a></samp></td><td>The <i><a href="/basic_ios::rdstate">stream state</a></i> of <var>is</var> was not <samp><a href="/basic_ios::good">good</a></samp> before the call (applies to C++11 and other implementations constructing a <samp><a href="/basic_istream::sentry">sentry</a></samp> object)</td></tr>
<tr><td><samp><a href="/ios_base::badbit">badbit</a></samp></td><td>Error on stream (such as when this function catches an exception thrown by an internal operation).<br>
When set, the integrity of the stream may have been affected.</td></tr>
</table>
Multiple flags may be set on <var>is</var> by a single operation.<br>
<br>
If the operation sets an <i><a href="/basic_ios::rdstate">internal state flag</a></i> of <var>is</var> that was registered using its member <samp><a href="/basic_ios::exceptions">exceptions</a></samp>, the function throws an exception of member type <samp><a href="/ios_base::failure">failure</a></samp>.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br></code></pre></td>
<td class="source"><pre><code><cite>// ws manipulator example</cite>
<dfn>#include &lt;iostream&gt;     </dfn><cite>// std::cout, std::noskipws</cite>
<dfn>#include &lt;sstream&gt;      </dfn><cite>// std::istringstream, std::ws</cite>

<var>int</var> main () {
  <var>char</var> a[10], b[10];

  std::istringstream iss (<kbd>"one \n \t two"</kbd>);
  iss &gt;&gt; std::noskipws;
  iss &gt;&gt; a &gt;&gt; std::ws &gt;&gt; b;
  std::cout &lt;&lt; a &lt;&lt; <kbd>", "</kbd> &lt;&lt; b &lt;&lt; <kbd>'\n'</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
 <br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>one, two
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="access">
<h3>Data races</h3>
Modifies the stream object <var>is</var>.<br>
Concurrent access to the same stream object may cause data races, except for the standard stream objects <samp><a href="/cin">cin</a></samp> and <samp><a href="/wcin">wcin</a></samp> when these are <i><a href="/ios_base::sync_with_stdio">synchronized with stdio</a></i> (in this case, no data races are initiated, although no guarantees are given on the order in which extracted characters are attributed to threads).<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
<b>Basic guarantee:</b> if an exception is thrown, the object is in a valid state.<br>
It throws an exception of member type <samp><a href="/ios_base::failure">failure</a></samp> if the resulting <i>error state flag</i> of <var>is</var> is not <samp><a href="/ios_base::goodbit">goodbit</a></samp> and its member <samp><a href="/ios::exceptions">exceptions</a></samp> was set to throw for that state.<br>
Any exception thrown by an internal operation is caught and handled by the function, setting <var>is</var>'s <samp><a href="/ios_base::badbit">badbit</a></samp> flag. If <samp><a href="/ios_base::badbit">badbit</a></samp> was set on the last call to <samp><a href="/ios::exceptions">exceptions</a></samp> for <var>is</var>, the function rethrows the caught exception.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/ios/skipws/"><b>skipws</b></a></dt><dd>Skip whitespaces <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/ios/noskipws/"><b>noskipws</b></a></dt><dd>Do not skip whitespaces <span class="typ">(function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
