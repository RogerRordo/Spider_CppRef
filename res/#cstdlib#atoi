<div id="I_content">
<div class="C_doc">
<div id="I_type">function</div>
<div id="I_file">&lt;cstdlib&gt;</div>
<h1>atoi</h1>
<div class="C_prototype"><pre>int atoi (const char * str);</pre></div><div id="I_description">Convert string to integer</div>
<section id="description">
Parses the C-string <var>str</var> interpreting its content as an integral number, which is returned as a value of type <code>int</code>.<br>
<br>
The function first discards as many whitespace characters (as in <samp><a href="/isspace">isspace</a></samp>) as necessary until the first non-whitespace character is found. Then, starting from this character, takes an optional initial <i>plus</i> or <i>minus</i> sign followed by as many base-10 digits as possible, and interprets them as a numerical value.<br>
<br>
The string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function.<br>
<br>
If the first sequence of non-whitespace characters in <var>str</var> is not a valid integral number, or if no such sequence exists because either <var>str</var> is empty or it contains only whitespace characters, no conversion is performed and zero is returned.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>str</dt>
<dd>C-string beginning with the representation of an integral number.</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
On success, the function returns the converted integral number as an <code>int</code> value.<br>
If the converted value would be out of the range of representable values by an <code>int</code>, it causes <i>undefined behavior</i>. See <samp><a href="/strtol">strtol</a></samp> for a more robust cross-platform alternative when this is a possibility.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br></code></pre></td>
<td class="source"><pre><code><cite>/* atoi example */</cite>
<dfn>#include &lt;stdio.h&gt;      </dfn><cite>/* printf, fgets */</cite><dfn></dfn>
<dfn>#include &lt;stdlib.h&gt;     </dfn><cite>/* atoi */</cite><dfn></dfn>

<var>int</var> main ()
{
  <var>int</var> i;
  <var>char</var> buffer[256];
  printf (<kbd>"Enter a number: "</kbd>);
  fgets (buffer, 256, stdin);
  i = atoi (buffer);
  printf (<kbd>"The value entered is %d. Its double is %d.\n"</kbd>,i,i*2);
  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>
Enter a number: 73
The value entered is 73. Its double is 146.
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The array pointed by <var>str</var> is accessed.<br>
</section>
<br>
<section id="exceptions">
<h3>Exceptions (C++)</h3>
<b>No-throw guarantee:</b> this function never throws exceptions.<br>
<br>
If <var>str</var> does not point to a valid C-string, or if the converted value would be out of the range of values representable by an <code>int</code>, it causes <i>undefined behavior</i>.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/cstdlib/atol/"><b>atol</b></a></dt><dd>Convert string to long integer <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cstdlib/atof/"><b>atof</b></a></dt><dd>Convert string to double <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cstdlib/strtol/"><b>strtol</b></a></dt><dd>Convert string to long integer <span class="typ">(function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
