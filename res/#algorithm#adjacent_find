<div id="I_content">
<div class="C_doc">
<div id="I_type">function template</div>
<div id="I_file">&lt;algorithm&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span>adjacent_find</h1>
<div class="C_prototype"><table><tr class="odd"><th>equality (1)</th><td><pre>template &lt;class ForwardIterator&gt;   ForwardIterator adjacent_find (ForwardIterator first, ForwardIterator last);</pre></td></tr><tr class="even"><th>predicate (2)</th><td><pre>template &lt;class ForwardIterator, class BinaryPredicate&gt;   ForwardIterator adjacent_find (ForwardIterator first, ForwardIterator last,                                  BinaryPredicate pred);</pre></td></tr></table></div><div id="I_description">Find equal adjacent elements in range</div>
<section id="description">
Searches the range <code>[first,last)</code> for the first occurrence of two consecutive elements that match, and returns an iterator to the first of these two elements, or <var>last</var> if no such pair is found.<br>
<br>
Two elements match if they compare equal using <code>operator==</code> (or using <var>pred</var>, in version <i>(2)</i>).<br>
<br>
The behavior of this function template is equivalent to:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br></code></pre></td>
<td class="source"><pre><code><var>template</var> &lt;<var>class</var> ForwardIterator&gt;
   ForwardIterator adjacent_find (ForwardIterator first, ForwardIterator last)
{
  <var>if</var> (first != last)
  {
    ForwardIterator next=first; ++next;
    <var>while</var> (next != last) {
      <var>if</var> (*first == *next)     <cite>// or: if (pred(*first,*next)), for version (2)</cite>
        <var>return</var> first;
      ++first; ++next;
    }
  }
  <var>return</var> last;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>first, last</dt>
<dd><a href="/ForwardIterator">Forward iterators</a> to the initial and final positions of the searched sequence. The range used is <code>[first,last)</code>, which contains all the elements between <var>first</var> and <var>last</var>, including the element pointed by <var>first</var> but not the element pointed by <var>last</var>.</dd>
<dt>pred</dt>
<dd>Binary function that accepts two elements as arguments, and returns a value convertible to <code>bool</code>. The returned value indicates whether the elements are considered to match in the context of this function.<br>
The function shall not modify any of its arguments.<br>
This can either be a function pointer or a function object.</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
An iterator to the first element of the first pair of matching consecutive elements in the range <code>[first,last)</code>.<br>
If no such pair is found, the function returns <var>last</var>.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br></code></pre></td>
<td class="source"><pre><code><cite>// adjacent_find example</cite>
<dfn>#include &lt;iostream&gt;     </dfn><cite>// std::cout</cite>
<dfn>#include &lt;algorithm&gt;    </dfn><cite>// std::adjacent_find</cite>
<dfn>#include &lt;vector&gt;       </dfn><cite>// std::vector</cite>

<var>bool</var> myfunction (<var>int</var> i, <var>int</var> j) {
  <var>return</var> (i==j);
}

<var>int</var> main () {
  <var>int</var> myints[] = {5,20,5,30,30,20,10,10,20};
  std::vector&lt;<var>int</var>&gt; myvector (myints,myints+8);
  std::vector&lt;<var>int</var>&gt;::iterator it;

  <cite>// using default comparison:</cite>
  it = std::adjacent_find (myvector.begin(), myvector.end());

  <var>if</var> (it!=myvector.end())
    std::cout &lt;&lt; <kbd>"the first pair of repeated elements are: "</kbd> &lt;&lt; *it &lt;&lt; <kbd>'\n'</kbd>;

  <cite>//using predicate comparison:</cite>
  it = std::adjacent_find (++it, myvector.end(), myfunction);

  <var>if</var> (it!=myvector.end())
    std::cout &lt;&lt; <kbd>"the second pair of repeated elements are: "</kbd> &lt;&lt; *it &lt;&lt; <kbd>'\n'</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>the first pair of repeated elements are: 30
the second pair of repeated elements are: 10
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Up to linear in the <a href="/distance">distance</a> between <var>first</var> and <var>last</var>: Compares elements until a match is found.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
Some (or all) of the objects in the range <code>[first,last)</code> are accessed (once at most).<br>
</section>
<br>
<section id="exceptions">
<h3>Exceptions</h3>
Throws if any element comparison (or <var>pred</var>) throws or if any of the operations on iterators throws.<br>
Note that invalid arguments cause <i>undefined behavior</i>.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/algorithm/find/"><b>find</b></a></dt><dd>Find value in range <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/find_if/"><b>find_if</b></a></dt><dd>Find element in range <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/unique/"><b>unique</b></a></dt><dd>Remove consecutive duplicates in range <span class="typ">(function template)</span></dd></dl>
<div id="CH_bb"></div></div></div>
