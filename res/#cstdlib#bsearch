<div id="I_content">
<div class="C_doc">
<div id="I_type">function</div>
<div id="I_file">&lt;cstdlib&gt;</div>
<h1>bsearch</h1>
<div class="C_prototype"><pre>void* bsearch (const void* key, const void* base,               size_t num, size_t size,               int (*compar)(const void*,const void*));</pre></div><div id="I_description">Binary search in array</div>
<section id="description">
Searches the given <var>key</var> in the array pointed to by <var>base</var> (which is formed by <var>num</var> elements, each of <var>size</var> bytes), and returns a <code>void*</code> pointer to a matching element, if found.<br>
<br>
To perform the search, the function performs a series of calls to <var>compar</var> with <var>key</var> as first argument and elements of the array pointed to by <var>base</var> as second argument.<br>
<br>
Because this function may be optimized to use a non-linear search algorithm (presumably a binary search), the elements that compare less than <var>key</var> using <var>compar</var> should precede those that compare equal, and these should precede those that compare greater. This requirement is fulfilled by any array ordered with the same criteria used by <var>compar</var> (as if sorted with <samp><a href="/qsort">qsort</a></samp>).<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>key</dt>
<dd>Pointer to the object that serves as key for the search, type-casted to a <code>void*</code>.</dd>
<dt>base</dt>
<dd>Pointer to the first object of the array where the search is performed, type-casted to a <code>void*</code>.</dd>
<dt>num</dt>
<dd>Number of elements in the array pointed to by <var>base</var>.<br>
<samp><a href="/cstdlib:size_t">size_t</a></samp> is an unsigned integral type.</dd>
<dt>size</dt>
<dd>Size in bytes of each element in the array.<br>
<samp><a href="/cstdlib:size_t">size_t</a></samp> is an unsigned integral type.</dd>
<dt>compar</dt>
<dd>Pointer to a function that compares two elements.<br>
This function is called repeatedly by <samp>bsearch</samp> to compare <var>key</var> against individual elements in <var>base</var>. It shall follow the following prototype:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>&nbsp;</code></pre></td>
<td class="source"><pre><code><var>int</var> compar (<var>const</var> <var>void</var>* pkey, <var>const</var> <var>void</var>* pelem);</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
Taking two pointers as arguments: the first is always <var>key</var>, and the second points to an element of the array (both type-casted to <code>const void*</code>). The function shall return (in a stable and transitive manner):<br>
<table class="boxed">
<tr><th>return value</th><th>meaning</th></tr>
<tr><td><code>&lt;0</code></td><td>The element pointed to by <var>pkey</var> goes before the element pointed to by <var>pelem</var></td></tr>
<tr><td><code>0</code></td><td>The element pointed to by <var>pkey</var> is equivalent to the element pointed to by <var>pelem</var></td></tr>
<tr><td><code>&gt;0</code></td><td>The element pointed to by <var>pkey</var> goes after the element pointed to by <var>pelem</var></td></tr>
</table>
<br>
For types that can be compared using regular relational operators, a general <var>compar</var> function may look like:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br></code></pre></td>
<td class="source"><pre><code><var>int</var> compareMyType (<var>const</var> <var>void</var> * a, <var>const</var> <var>void</var> * b)
{
  <var>if</var> ( *(MyType*)a &lt;  *(MyType*)b ) <var>return</var> -1;
  <var>if</var> ( *(MyType*)a == *(MyType*)b ) <var>return</var> 0;
  <var>if</var> ( *(MyType*)a &gt;  *(MyType*)b ) <var>return</var> 1;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
A pointer to an entry in the array that matches the search <var>key</var>. If there are more than one matching elements (i.e., elements for which <var>compar</var> would return <code>0</code>), this may point to any of them (not necessarily the first one).<br>
If <var>key</var> is not found, a null pointer is returned. <br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br></code></pre></td>
<td class="source"><pre><code><cite>/* bsearch example */</cite>
<dfn>#include &lt;stdio.h&gt;      </dfn><cite>/* printf */</cite><dfn></dfn>
<dfn>#include &lt;stdlib.h&gt;     </dfn><cite>/* qsort, bsearch, NULL */</cite><dfn></dfn>

<var>int</var> compareints (<var>const</var> <var>void</var> * a, <var>const</var> <var>void</var> * b)
{
  <var>return</var> ( *(<var>int</var>*)a - *(<var>int</var>*)b );
}

<var>int</var> values[] = { 50, 20, 60, 40, 10, 30 };

<var>int</var> main ()
{
  <var>int</var> * pItem;
  <var>int</var> key = 40;
  qsort (values, 6, <var>sizeof</var> (<var>int</var>), compareints);
  pItem = (<var>int</var>*) bsearch (&amp;key, values, 6, <var>sizeof</var> (<var>int</var>), compareints);
  <var>if</var> (pItem!=NULL)
    printf (<kbd>"%d is in the array.\n"</kbd>,*pItem);
  <var>else</var>
    printf (<kbd>"%d is not in the array.\n"</kbd>,key);
  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
In the example, <samp>compareints</samp> compares the values pointed to by the two parameters as <code>int</code> values and returns the result of subtracting their pointed values, which gives <code>0</code> as result if they are equal, a positive result if the value pointed to by <var>a</var> is greater than the one pointed to by <var>b</var> or a negative result if the value pointed to by <var>b</var> is greater.<br>
<br>
In the main function the target array is sorted with <samp><a href="/qsort">qsort</a></samp> before calling <samp>bsearch</samp> to search for a value.<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>40 is in the array.
</samp></pre></td></tr></table></div>
<br>
For C strings, <samp><a href="/strcmp">strcmp</a></samp> can directly be used as the <var>compar</var> argument for <samp><a href="/bsearch">bsearch</a></samp>:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br></code></pre></td>
<td class="source"><pre><code><cite>/* bsearch example with strings */</cite>
<dfn>#include &lt;stdio.h&gt;      </dfn><cite>/* printf */</cite><dfn></dfn>
<dfn>#include &lt;stdlib.h&gt;     </dfn><cite>/* qsort, bsearch, NULL */</cite><dfn></dfn>
<dfn>#include &lt;string.h&gt;     </dfn><cite>/* strcmp */</cite><dfn></dfn>

<var>char</var> strvalues[][20] = {<kbd>"some"</kbd>,<kbd>"example"</kbd>,<kbd>"strings"</kbd>,<kbd>"here"</kbd>};

<var>int</var> main ()
{
  <var>char</var> * pItem;
  <var>char</var> key[20] = <kbd>"example"</kbd>;

  <cite>/* sort elements in array: */</cite>
  qsort (strvalues, 4, 20, (<var>int</var>(*)(<var>const</var> <var>void</var>*,<var>const</var> <var>void</var>*)) strcmp);

  <cite>/* search for the key: */</cite>
  pItem = (<var>char</var>*) bsearch (key, strvalues, 4, 20, (<var>int</var>(*)(<var>const</var> <var>void</var>*,<var>const</var> <var>void</var>*)) strcmp);

  <var>if</var> (pItem!=NULL)
    printf (<kbd>"%s is in the array.\n"</kbd>,pItem);
  <var>else</var>
    printf (<kbd>"%s is not in the array.\n"</kbd>,key);
  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>example is in the array.
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Unspecified, but binary searches are generally logarithmic in <var>num</var>, on average, calling <var>compar</var> approximately <code>log<sub>2</sub>(num)+2</code> times.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The function accesses the object pointed to by <var>key</var> and any number of the <var>num</var> elements in the array pointed to by <var>base</var>, but does not modify any of them.<br>
</section>
<br>
<section id="exceptions">
<h3>Exceptions (C++)</h3>
If <var>comp</var> does not throw exceptions, this function throws no exceptions (no-throw guarantee).<br>
<br>
If <var>key</var> does not point to an object <var>size</var> bytes long, or if <var>base</var> does not point to an array of at least <var>num</var> properly arranged elements of <var>size</var> bytes each, or if <var>comp</var> does not behave as described above, it causes <i>undefined behavior</i>.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/cstdlib/qsort/"><b>qsort</b></a></dt><dd>Sort elements of array <span class="typ">(function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
