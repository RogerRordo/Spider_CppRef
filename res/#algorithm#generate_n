<div id="I_content">
<div class="C_doc">
<div id="I_type">function template</div>
<div id="I_file">&lt;algorithm&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span>generate_n</h1>
<div class="C_prototype"><div class="C_SwitchCases">
<div title="C++98">
<pre>template &lt;class OutputIterator, class Size, class Generator&gt;  void generate_n (OutputIterator first, Size n, Generator gen);</pre></div>
<div title="C++11" class="on">
<pre>template &lt;class OutputIterator, class Size, class Generator&gt;  OutputIterator generate_n (OutputIterator first, Size n, Generator gen);</pre></div>
</div>
</div><div id="I_description">Generate values for sequence with function</div>
<section id="description">
Assigns the value returned by successive calls to <var>gen</var> to the first <var>n</var> elements of the sequence pointed by <var>first</var>.<br>
<br>
The behavior of this function template is equivalent to:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br></code></pre></td>
<td class="source"><pre><code><var>template</var> &lt;<var>class</var> OutputIterator, <var>class</var> Size, <var>class</var> Generator&gt;
  <var>void</var> generate_n ( OutputIterator first, Size n, Generator gen )
{
  <var>while</var> (n&gt;0) {
    *first = gen();
    ++first; --n;
  }
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>first</dt>
<dd>Output iterators to the initial positions in a sequence of at least <var>n</var> elements that support being assigned a value of the type returned by <var>gen</var>.</dd>
<dt>n</dt>
<dd>Number of values to generate.<br>
<div class="C_SwitchCases">
<div title="C++98">
This value shall not be negative.<br>
</div>
<div title="C++11">
If negative, the function does nothing.<br>
</div>
</div>
<samp>Size</samp> shall be (convertible to) an integral type.</dd>
<dt>gen</dt>
<dd>Generator function that is called with no arguments and returns some value of a type convertible to those pointed by the iterators.<br>
This can either be a function pointer or a function object.<br>
</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
<div class="C_SwitchCases">
<div title="C++98">
none<br>
</div>
<div title="C++11">
An iterator pointing to the element that follows the last element whose value has been generated.<br>
</div>
</div>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br></code></pre></td>
<td class="source"><pre><code><cite>// generate_n example</cite>
<dfn>#include &lt;iostream&gt;     </dfn><cite>// std::cout</cite>
<dfn>#include &lt;algorithm&gt;    </dfn><cite>// std::generate_n</cite>

<var>int</var> current = 0;
<var>int</var> UniqueNumber () { <var>return</var> ++current; }

<var>int</var> main () {
  <var>int</var> myarray[9];

  std::generate_n (myarray, 9, UniqueNumber);

  std::cout &lt;&lt; <kbd>"myarray contains:"</kbd>;
  <var>for</var> (<var>int</var> i=0; i&lt;9; ++i)
    std::cout &lt;&lt; <kbd>' '</kbd> &lt;&lt; myarray[i];
  std::cout &lt;&lt; <kbd>'\n'</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
A possible output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>myarray contains: 1 2 3 4 5 6 7 8 9
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Linear in <var>n</var>: Calls <var>gen</var> and performs an assignment for each element.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The <var>n</var> first objects at the range pointed by <var>first</var> are modified (each object is modified exactly once).<br>
</section>
<br>
<section id="exceptions">
<h3>Exceptions</h3>
Throws if any of <var>gen</var>, the element assignments or the operations on iterators throws.<br>
Note that invalid arguments cause <i>undefined behavior</i>.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/algorithm/generate/"><b>generate</b></a></dt><dd>Generate values for range with function <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/fill_n/"><b>fill_n</b></a></dt><dd>Fill sequence with value <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/for_each/"><b>for_each</b></a></dt><dd>Apply function to range <span class="typ">(function template)</span></dd></dl>
<div id="CH_bb"></div></div></div>
