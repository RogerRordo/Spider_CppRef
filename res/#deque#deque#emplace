<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;deque&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/deque/deque/">deque</a>::emplace<span class="C_ico cpp11warning" title="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it." alt="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it."></span></h1>
<div class="C_prototype"><pre>template &lt;class... Args&gt;  iterator emplace (const_iterator position, Args&amp;&amp;... args);</pre></div><div id="I_description">Construct and insert element</div>
<section id="description">
The container is extended by inserting a new element at <i>position</i>. This new element is constructed in place using <i>args</i> as the arguments for its construction.<br>
<br>
This effectively increases the container <a href="/deque::size">size</a> by one.<br>
<br>
Double-ended queues are designed to be efficient performing insertions (and removals) from either the end or the beginning of the sequence. Insertions on other positions are usually less efficient than in <a href="/list">list</a> or <a href="/forward_list">forward_list</a> containers. See <a href="/deque::emplace_front">emplace_front</a> and <a href="/deque::emplace_back">emplace_back</a> for member functions that extend the container directly at the beginning or at the end.<br>
<br>
The element is constructed in-place by calling <a href="/allocator_traits::construct">allocator_traits::construct</a> with <i>args</i> forwarded.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>position</dt>
<dd>Position in the container where the new element is inserted.<br>
Member type <tt>const_iterator</tt> is a <a href="/RandomAccessIterator">random access iterator</a> type that points to a constant element.</dd>
<dt>args</dt>
<dd>Arguments forwarded to construct the new element.</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
An iterator that points to the newly emplaced element.<br>
<br>
Member type <tt>iterator</tt> is a <a href="/RandomAccessIterator">random access iterator</a> type that points to an element.<br>
<br>
The storage for the new element is allocated using <tt>allocator_traits&lt;allocator_type&gt;::construct()</tt>, which may throw exceptions on failure (for the default <a href="/allocator">allocator</a>, <tt>bad_alloc</tt> is thrown if the allocation request does not succeed).<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br></code></pre></td>
<td class="source"><pre><code><cite>// deque::emplace</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;deque&gt;</dfn>

<var>int</var> main ()
{
  std::deque&lt;<var>int</var>&gt; mydeque = {10,20,30};

  <var>auto</var> it = mydeque.emplace ( mydeque.begin()+1, 100 );
  mydeque.emplace ( it, 200 );
  mydeque.emplace ( mydeque.end(), 300 );

  std::cout &lt;&lt; <kbd>"mydeque contains:"</kbd>;
  <var>for</var> (<var>auto</var>&amp; x: mydeque)
    std::cout &lt;&lt; <kbd>' '</kbd> &lt;&lt; x;
  std::cout &lt;&lt; <kbd>'\n'</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>mydeque contains: 10 200 100 20 30 300
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Depending on the particular library implemention, up to linear in the number of elements between <i>position</i> and one of the ends of the <a href="/deque">deque</a>.<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
If the insertion happens at the beginning or the end of the sequence, all iterators related to this container are invalidated, but pointers and references remain valid, referring to the same elements they were referring to before the call.<br>
If the insertion happens anywhere else in the <a href="/deque">deque</a>, all iterators, pointers and references related to this container are invalidated.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The container is modified.<br>
If the insertion happens at the beginning or the end of the sequence, no contained elements are accessed (although see <i>iterator validity</i> above).<br>
If it happens anywhere else, it is not safe to concurrently access elements.</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
If <i>position</i> is <a href="/deque::begin">begin</a> or <a href="/deque::end">end</a>, there are no changes in the container in case of exception (strong guarantee).<br>
Otherwise, the container is guaranteed to end in a valid state (basic guarantee).<br>
If <a href="/allocator_traits::construct">allocator_traits::construct</a> is not supported with the appropriate arguments, or if <i>position</i> is not valid, it causes <i>undefined behavior</i>.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/deque/deque/emplace_front/"><b>deque::emplace_front</b></a></dt><dd>Construct and insert element at beginning <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/deque/deque/emplace_back/"><b>deque::emplace_back</b></a></dt><dd>Construct and insert element at the end <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/deque/deque/insert/"><b>deque::insert</b></a></dt><dd>Insert elements <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/deque/deque/erase/"><b>deque::erase</b></a></dt><dd>Erase elements <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/deque/deque/assign/"><b>deque::assign</b></a></dt><dd>Assign container content <span class="typ">(public member function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
