<div id="I_content">
<div class="C_doc">
<div id="I_type">function</div>
<div id="I_file">&lt;cstdlib&gt;</div>
<h1>srand</h1>
<div class="C_prototype"><pre>void srand (unsigned int seed);</pre></div><div id="I_description">Initialize random number generator</div>
<section id="description">
The pseudo-random number generator is initialized using the argument passed as <var>seed</var>.<br>
<br>
For every different <var>seed</var> value used in a call to <samp>srand</samp>, the pseudo-random number generator can be expected to generate a different succession of results in the subsequent calls to <samp><a href="/rand">rand</a></samp>.<br>
<br>
Two different initializations with the same <var>seed</var> will generate the same succession of results in subsequent calls to <samp><a href="/rand">rand</a></samp>.<br>
<br>
If <var>seed</var> is set to <code>1</code>, the generator is reinitialized to its initial value and produces the same values as before any call to <samp><a href="/rand">rand</a></samp> or <samp>srand</samp>.<br>
<br>
In order to generate random-like numbers, <samp>srand</samp> is usually initialized to some distinctive runtime value, like the value returned by function <samp><a href="/time">time</a></samp> (declared in header <a href="/ctime">&lt;ctime&gt;</a>). This is distinctive enough for most trivial randomization needs.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>seed</dt>
<dd>An integer value to be used as seed by the pseudo-random number generator algorithm.</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
none <br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br></code></pre></td>
<td class="source"><pre><code><cite>/* srand example */</cite>
<dfn>#include &lt;stdio.h&gt;      </dfn><cite>/* printf, NULL */</cite><dfn></dfn>
<dfn>#include &lt;stdlib.h&gt;     </dfn><cite>/* srand, rand */</cite><dfn></dfn>
<dfn>#include &lt;time.h&gt;       </dfn><cite>/* time */</cite><dfn></dfn>

<var>int</var> main ()
{
  printf (<kbd>"First number: %d\n"</kbd>, rand()%100);
  srand (time(NULL));
  printf (<kbd>"Random number: %d\n"</kbd>, rand()%100);
  srand (1);
  printf (<kbd>"Again the first number: %d\n"</kbd>, rand()%100);

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Possible output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>
First number: 41
Random number: 13
Again the first number: 41
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The function accesses and modifies internal state objects, which may cause data races with concurrent calls to <samp><a href="/rand">rand</a></samp> or <samp>srand</samp>.<br>
<br>
Some libraries provide an alternative function of <samp><a href="/rand">rand</a></samp> that explicitly avoids this kind of data race: <samp>rand_r</samp> (non-portable).<br>
<br>
C++ library implementations are allowed to guarantee no <i>data races</i> for calling this function.<br>
</section>
<br>
<section id="exceptions">
<h3>Exceptions (C++)</h3>
<b>No-throw guarantee:</b> this function never throws exceptions.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/cstdlib/rand/"><b>rand</b></a></dt><dd>Generate random number <span class="typ">(function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
