<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;unordered_set&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/unordered_set/unordered_multiset/">unordered_multiset</a>::bucket<span class="C_ico cpp11warning" title="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it." alt="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it."></span></h1>
<div class="C_prototype"><pre>size_type bucket ( const key_type&amp; k ) const;</pre></div><div id="I_description">Locate element's bucket</div>
<section id="description">
Returns the bucket number where the elements with value <i>k</i> is located.<br>
<br>
A bucket is a slot in the container's internal hash table to which elements are assigned based on their hash value. Elements with the same value are located in the same bucket. Buckets are numbered from <tt>0</tt> to <tt>(<a href="/unordered_multiset::bucket_count">bucket_count</a>-1)</tt>.<br>
<br>
Individual elements in a bucket can be accessed by means of the range iterators returned by <a href="/unordered_multiset::begin">unordered_multiset::begin</a> and <a href="/unordered_multiset::end">unordered_multiset::end</a>.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>k</dt>
<dd>Value whose bucket is to be located.<br>
Member type <tt>key_type</tt> is the type of the elements in the container. In <a href="/unordered_set">unordered_set</a> containers it is the same as <tt>value_type</tt>, defined as an alias of the class's first template parameter (<tt>Key</tt>).</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
The order number of the bucket corresponding to <i>k</i>.<br>
<br>
Member type <tt>size_type</tt> is an unsigned integral type.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br></code></pre></td>
<td class="source"><pre><code><cite>// unordered_multiset::bucket</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>
<dfn>#include &lt;unordered_set&gt;</dfn>

<var>int</var> main ()
{
  std::unordered_multiset&lt;std::string&gt; myums =
  {<kbd>"water"</kbd>,<kbd>"sand"</kbd>,<kbd>"ice"</kbd>,<kbd>"water"</kbd>};

  <var>for</var> (<var>const</var> std::string&amp; x: myums) {
    std::cout &lt;&lt; x &lt;&lt; <kbd>" is in bucket #"</kbd> &lt;&lt; myums.bucket(x) &lt;&lt; std::endl;
  }

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Possible output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>ice is in bucket #0
sand is in bucket #2
water is in bucket #4
water is in bucket #4
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Constant.<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
No changes.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/unordered_set/unordered_multiset/find/"><b>unordered_multiset::find</b></a></dt><dd>Get iterator to element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_set/unordered_multiset/bucket_size/"><b>unordered_multiset::bucket_size</b></a></dt><dd>Return bucket size <span class="typ">(public member type)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_set/unordered_multiset/bucket_count/"><b>unordered_multiset::bucket_count</b></a></dt><dd>Return number of buckets <span class="typ">(public member function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
