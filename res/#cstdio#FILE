<div id="I_content">
<div class="C_doc">
<div id="I_type">type</div>
<div id="I_file">&lt;cstdio&gt;</div>
<h1>FILE</h1>
<div id="I_description">Object containing information to control a stream</div>
<section id="description">
Object type that identifies a stream and contains the information needed to control it, including a pointer to its buffer, its position indicator and all its state indicators.<br>
<br>
FILE objects are usually created by a call to either <a href="/fopen">fopen</a> or <a href="/tmpfile">tmpfile</a>, which both return a pointer to one of these objects.<br>
<br>
The content of a FILE object is not meant to be accessed from outside the functions of the <a href="/cstdio">&lt;cstdio&gt;</a> and <a href="/cwchar">&lt;cwchar&gt;</a> headers; In fact, portable programs shall only use them in the form of pointers to identify streams, since for some implementations, even the value of the pointer itself could be significant to identify the stream (i.e., the pointer to a copy of a <tt>FILE</tt> object could be interpreted differently than a pointer to the original).<br>
<br>
Its memory allocation is automatically managed: it is allocated by either <a href="/fopen">fopen</a> or <a href="/tmpfile">tmpfile</a>, and it is the responsibility of the library to free the resources once either the stream has been closed using <a href="/fclose">fclose</a> or the program terminates normally.<br>
<br>
On inclusion of the <a href="/cstdio">&lt;cstdio&gt;</a> header file, three objects of this type are automatically created, and pointers to them are declared: <a href="/stdin">stdin</a>, <a href="/stdout">stdout</a> and <a href="/stderr">stderr</a>, associated with the standard input stream, standard output stream and standard error stream, respectively.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br></code></pre></td>
<td class="source"><pre><code><cite>/* FEOF example */</cite>
<dfn>#include &lt;stdio.h&gt;</dfn>

<var>int</var> main()
{
   FILE * pFile;
   <var>char</var> buffer [100];

   pFile = fopen (<kbd>"myfile.txt"</kbd> , <kbd>"r"</kbd>);
   <var>if</var> (pFile == NULL) perror (<kbd>"Error opening file"</kbd>);
   <var>else</var>
   {
     <var>while</var> ( ! feof (pFile) )
     {
       <var>if</var> ( fgets (buffer , 100 , pFile) == NULL ) <var>break</var>;
       fputs (buffer , stdout);
     }
     fclose (pFile);
   }
   <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
This example reads the content of a text file called <tt>myfile.txt</tt> and sends it to the standard output stream.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/cstdio/fopen/"><b>fopen</b></a></dt><dd>Open file <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cstdio/fclose/"><b>fclose</b></a></dt><dd>Close file <span class="typ">(function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
