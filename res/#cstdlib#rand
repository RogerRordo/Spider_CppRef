<div id="I_content">
<div class="C_doc">
<div id="I_type">function</div>
<div id="I_file">&lt;cstdlib&gt;</div>
<h1>rand</h1>
<div class="C_prototype"><pre>int rand (void);</pre></div><div id="I_description">Generate random number</div>
<section id="description">
Returns a pseudo-random integral number in the range between <code>0</code> and <samp><a href="/RAND_MAX">RAND_MAX</a></samp>.<br>
<br>
This number is generated by an algorithm that returns a sequence of apparently  non-related numbers each time it is called. This algorithm uses a seed to generate the series, which should be initialized to some distinctive value using function <samp><a href="/srand">srand</a></samp>.<br>
<br>
<samp><a href="/RAND_MAX">RAND_MAX</a></samp> is a constant defined in <samp><a href="/cstdlib">&lt;cstdlib&gt;</a></samp>.<br>
<br>
A typical way to generate trivial pseudo-random numbers in a determined range using <samp>rand</samp> is to use the modulo of the returned value by the range span and add the initial value of the range:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br></code></pre></td>
<td class="source"><pre><code>v1 = rand() % 100;         <cite>// v1 in the range 0 to 99</cite>
v2 = rand() % 100 + 1;     <cite>// v2 in the range 1 to 100</cite>
v3 = rand() % 30 + 1985;   <cite>// v3 in the range 1985-2014 </cite></code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Notice though that this modulo operation does not generate uniformly distributed random numbers in the span (since in most cases this operation makes lower numbers slightly more likely).<br>
<br>
C++ supports a wide range of powerful tools to generate random and pseudo-random numbers (see <a href="/random">&lt;random&gt;</a> for more info).<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
(none) <br>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
An integer value between 0 and <a href="/RAND_MAX">RAND_MAX</a>.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br></code></pre></td>
<td class="source"><pre><code><cite>/* rand example: guess the number */</cite>
<dfn>#include &lt;stdio.h&gt;      </dfn><cite>/* printf, scanf, puts, NULL */</cite><dfn></dfn>
<dfn>#include &lt;stdlib.h&gt;     </dfn><cite>/* srand, rand */</cite><dfn></dfn>
<dfn>#include &lt;time.h&gt;       </dfn><cite>/* time */</cite><dfn></dfn>

<var>int</var> main ()
{
  <var>int</var> iSecret, iGuess;

  <cite>/* initialize random seed: */</cite>
  srand (time(NULL));

  <cite>/* generate secret number between 1 and 10: */</cite>
  iSecret = rand() % 10 + 1;

  <var>do</var> {
    printf (<kbd>"Guess the number (1 to 10): "</kbd>);
    scanf (<kbd>"%d"</kbd>,&amp;iGuess);
    <var>if</var> (iSecret&lt;iGuess) puts (<kbd>"The secret number is lower"</kbd>);
    <var>else</var> <var>if</var> (iSecret&gt;iGuess) puts (<kbd>"The secret number is higher"</kbd>);
  } <var>while</var> (iSecret!=iGuess);

  puts (<kbd>"Congratulations!"</kbd>);
  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
In this example, the random seed is initialized to a value representing the current time (calling <samp><a href="/time">time</a></samp>) to generate a different value every time the program is run.<br>
<br>
Possible output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>
Guess the number (1 to 10): 5
The secret number is higher
Guess the number (1 to 10): 8
The secret number is lower
Guess the number (1 to 10): 7
Congratulations!
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="compatibility">
<h3>Compatibility</h3>
In C, the generation algorithm used by <samp>rand</samp> is guaranteed to only be advanced by calls to this function. In C++, this constraint is relaxed, and a library implementation is allowed to advance the generator on other circumstances (such as calls to elements of <a href="/random">&lt;random&gt;</a>).<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The function accesses and modifies internal state objects, which may cause data races with concurrent calls to <samp>rand</samp> or <samp><a href="/srand">srand</a></samp>.<br>
<br>
Some libraries provide an alternative function that explicitly avoids this kind of data race: <samp>rand_r</samp> (non-portable).<br>
<br>
C++ library implementations are allowed to guarantee no <i>data races</i> for calling this function.<br>
</section>
<br>
<section id="exceptions">
<h3>Exceptions (C++)</h3>
<b>No-throw guarantee:</b> this function never throws exceptions.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/cstdlib/srand/"><b>srand</b></a></dt><dd>Initialize random number generator <span class="typ">(function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
