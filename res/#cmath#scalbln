<div id="I_content">
<div class="C_doc">
<div id="I_type">function</div>
<div id="I_file">&lt;cmath&gt; &lt;ctgmath&gt;</div>
<h1>scalbln<span class="C_ico cpp11warning" title="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it." alt="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it."></span></h1>
<div class="C_prototype"><div class="C_SwitchCases">
<div title="C99">
<pre>     double scalbln  (double x     , long int n);      float scalblnf (float x      , long int n);long double scalblnl (long double x, long int n);</pre></div>
<div title="C++11" class="on">
<pre>     double scalbln (double x     , long int n);      float scalbln (float x      , long int n);long double scalbln (long double x, long int n);     double scalbln (T x          , long int n); // additional overloads for integral types</pre></div>
</div>
</div><div id="I_description">Scale significand using floating-point base exponent (long)</div>
<section id="description">
Scales <var>x</var> by <samp><a href="/FLT_RADIX">FLT_RADIX</a></Samp> raised to the power of <var>n</var>, returning the result of computing:<br>
<br>
<code>scalbn(x,n)</code> = x * <samp><a href="/FLT_RADIX">FLT_RADIX</a></samp><sup><var>n</var></sup> <br>
<br>
Presumably, <var>x</var> and <var>n</var> are the components of a floating-point number in the system; In such a case, this function may be optimized to be more efficient than the theoretical operations to compute the value explicitly.<br>
<br>
There also exists another version of this function: <samp><a href="/scalbn">scalbn</a></samp>, which is identical, except that it takes an <code>int</code> as second argument.<br>
<br>
<div class="C_SwitchCases">
<div title="C99">
Header <samp><a href="/&lt;ctgmath&gt;">&lt;tgmath.h&gt;</a></samp> provides a type-generic macro version of this function.<br>
</div>
<div title="C++11">
<i>Additional overloads</i> are provided in this header (<code><a href="/&lt;cmath&gt;">&lt;cmath&gt;</a></code>) for the <a href="/is_integral">integral types</a>: These overloads effectively cast <var>x</var> to a <code>double</code> before calculations (defined for <samp>T</samp> being any <i><a href="/is_integral">integral type</a></i>).<br>
</div>
</div>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>Value representing the <i>significand</i>.&lt;/dd&gt;<br>
<dt>exp</dt>
<dd>Value of the <i>exponent</i>.</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
Returns <var>x</var> * <samp><a href="/FLT_RADIX">FLT_RADIX</a></samp><sup><var>n</var></sup>.<br>
If the magnitude of the result is too large to be represented by a value of the return type, the function returns <samp><a href="/HUGE_VAL">HUGE_VAL</a></samp> (or <samp><a href="/HUGE_VALF">HUGE_VALF</a></samp> or <samp><a href="/HUGE_VALL">HUGE_VALL</a></samp>) with the proper sign, and an overflow <i>range error</i> may occur (if too small, the function returns zero, and an underflow <i>range error</i> may occur).<br>
<br>
If a <i>range error</i> occurs:<br>
- And <samp><a href="/math_errhandling">math_errhandling</a></samp> has <samp><a href="/MATH_ERRNO">MATH_ERRNO</a></samp> set: the global variable <samp><a href="/errno">errno</a></samp> is set to <samp><a href="/ERANGE">ERANGE</a></samp>.<br>
- And <samp><a href="/math_errhandling">math_errhandling</a></samp> has <samp><a href="/MATH_ERREXCEPT">MATH_ERREXCEPT</a></samp> set: either <samp><a href="/FE_OVERFLOW">FE_OVERFLOW</a></samp> or <samp><a href="/FE_UNDERFLOW">FE_UNDERFLOW</a></samp> is raised.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br></code></pre></td>
<td class="source"><pre><code><cite>/* scalbln example */</cite>
<dfn>#include &lt;stdio.h&gt;      </dfn><cite>/* printf */</cite><dfn></dfn>
<dfn>#include &lt;float.h&gt;      </dfn><cite>/* FLT_RADIX */</cite><dfn></dfn>
<dfn>#include &lt;math.h&gt;       </dfn><cite>/* scalbn */</cite><dfn></dfn>

<var>int</var> main ()
{
  <var>double</var> param, result;
  <var>long</var> n;

  param = 1.50;
  n = 4L;
  result = scalbln (param , n);
  printf (<kbd>"%f * %d^%d = %f\n"</kbd>, param, FLT_RADIX, n, result);
  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>
1.500000 * 2^4 = 24.000000
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/cmath/scalbn/"><b>scalbn</b></a></dt><dd>Scale significand using floating-point base exponent <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/ldexp/"><b>ldexp</b></a></dt><dd>Generate value from significand and exponent <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/logb/"><b>logb</b></a></dt><dd>Compute floating-point base logarithm <span class="typ">(function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
