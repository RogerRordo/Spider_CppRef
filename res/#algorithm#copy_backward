<div id="I_content">
<div class="C_doc">
<div id="I_type">function template</div>
<div id="I_file">&lt;algorithm&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span>copy_backward</h1>
<div class="C_prototype"><pre>template &lt;class BidirectionalIterator1, class BidirectionalIterator2&gt;  BidirectionalIterator2 copy_backward (BidirectionalIterator1 first,                                        BidirectionalIterator1 last,                                        BidirectionalIterator2 result);</pre></div><div id="I_description">Copy range of elements backward</div>
<section id="description">
Copies the elements in the range <code>[first,last)</code> starting from the end into the range terminating at <var>result</var>.<br>
<br>
The function returns an iterator to the first element in the destination range.<br>
<br>
The resulting range has the elements in the exact same order as <code>[first,last)</code>. To reverse their order, see <samp><a href="/reverse_copy">reverse_copy</a></samp>.<br>
<br>
The function begins by copying <code>*(last-1)</code> into <code>*(result-1)</code>, and then follows backward by the elements preceding these, until <var>first</var> is reached (and including it).<br>
<br>
The ranges shall not overlap in such a way that <var>result</var> (which is the <i>past-the-end element</i> in the destination range) points to an element in the range <code>(first,last]</code>. For such cases, see <samp><a href="/copy">copy</a></samp>.<br>
<br>
The behavior of this function template is equivalent to:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br></code></pre></td>
<td class="source"><pre><code><var>template</var>&lt;<var>class</var> BidirectionalIterator1, <var>class</var> BidirectionalIterator2&gt;
  BidirectionalIterator2 copy_backward ( BidirectionalIterator1 first,
                                         BidirectionalIterator1 last,
                                         BidirectionalIterator2 result )
{
  <var>while</var> (last!=first) *(--result) = *(--last);
  <var>return</var> result;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>first, last</dt>
<dd><a href="/BidirectionalIterator">Bidirectional iterators</a> to the initial and final positions in a sequence to be copied. The range used is <code>[first,last)</code>, which contains all the elements between <var>first</var> and <var>last</var>, including the element pointed by <i>first</i> but not the element pointed by <var>last</var>.</dd>
<dt>result</dt>
<dd><a href="/BidirectionalIterator">Bidirectional iterator</a> to the <i>past-the-end</i> position in the destination sequence.<br>
This shall not point to any element in the range <code>(first,last]</code>.<br>
</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
An iterator to the first element of the destination sequence where elements have been copied.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br></code></pre></td>
<td class="source"><pre><code><cite>// copy_backward example</cite>
<dfn>#include &lt;iostream&gt;     </dfn><cite>// std::cout</cite>
<dfn>#include &lt;algorithm&gt;    </dfn><cite>// std::copy_backward</cite>
<dfn>#include &lt;vector&gt;       </dfn><cite>// std::vector</cite>

<var>int</var> main () {
  std::vector&lt;<var>int</var>&gt; myvector;

  <cite>// set some values:</cite>
  <var>for</var> (<var>int</var> i=1; i&lt;=5; i++)
    myvector.push_back(i*10);          <cite>// myvector: 10 20 30 40 50</cite>

  myvector.resize(myvector.size()+3);  <cite>// allocate space for 3 more elements</cite>

  std::copy_backward ( myvector.begin(), myvector.begin()+5, myvector.end() );

  std::cout &lt;&lt; <kbd>"myvector contains:"</kbd>;
  <var>for</var> (std::vector&lt;<var>int</var>&gt;::iterator it=myvector.begin(); it!=myvector.end(); ++it)
    std::cout &lt;&lt; <kbd>' '</kbd> &lt;&lt; *it;
  std::cout &lt;&lt; <kbd>'\n'</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>myvector contains: 10 20 30 10 20 30 40 50</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Linear in the <a href="/distance">distance</a> between <var>first</var> and <var>last</var>: Performs an assignment operation for each element in the range.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The objects in the range <code>[first,last)</code> are accessed (each object is accessed exactly once).<br>
The objects in the range between the returned value and <var>result</var> are modified (each object is modified exactly once).<br>
</section>
<br>
<section id="exceptions">
<h3>Exceptions</h3>
Throws if either an element assignment or an operation on iterators throws.<br>
Note that invalid arguments cause <i>undefined behavior</i>.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/algorithm/reverse_copy/"><b>reverse_copy</b></a></dt><dd>Copy range reversed <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/copy/"><b>copy</b></a></dt><dd>Copy range of elements <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/fill/"><b>fill</b></a></dt><dd>Fill range with value <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/replace/"><b>replace</b></a></dt><dd>Replace value in range <span class="typ">(function template)</span></dd></dl>
<div id="CH_bb"></div></div></div>
