<div id="I_content">
<div class="C_doc">
<div id="I_type">function template</div>
<div id="I_file">&lt;algorithm&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span>reverse_copy</h1>
<div class="C_prototype"><pre>template &lt;class BidirectionalIterator, class OutputIterator&gt;  OutputIterator reverse_copy (BidirectionalIterator first,                               BidirectionalIterator last, OutputIterator result);</pre></div><div id="I_description">Copy range reversed</div>
<section id="description">
Copies the elements in the range <code>[first,last)</code> to the range beginning at <var>result</var>, but in reverse order.<br>
<br>
The behavior of this function template is equivalent to:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br></code></pre></td>
<td class="source"><pre><code><var>template</var> &lt;<var>class</var> BidirectionalIterator, <var>class</var> OutputIterator&gt;
  OutputIterator reverse_copy (BidirectionalIterator first,
                               BidirectionalIterator last, OutputIterator result)
{
  <var>while</var> (first!=last) {
    --last;
    *result = *last;
    ++result;
  }
  <var>return</var> result;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>first, last</dt>
<dd><a href="/BidirectionalIterator">Bidirectional iterators</a> to the initial and final positions of the sequence to be copied. The range used is <code>[first,last)</code>, which contains all the elements between <var>first</var> and <var>last</var>, including the element pointed by <var>first</var> but not the element pointed by <var>last</var>.</dd>
<dt>result</dt>
<dd><a href="/OutputIterator">Output iterator</a> to the initial position of the range where the reversed range is stored.<br>
The pointed type shall support being assigned the value of an element in the range <code>[first,last)</code>.</dd>
</dl>
<br>
The ranges shall not overlap.<br>
</section>
<br>
<section id="return">
<h3>Return value</h3>
An output iterator pointing to the end of the copied range, which contains the same elements in reverse order.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br></code></pre></td>
<td class="source"><pre><code><cite>// reverse_copy example</cite>
<dfn>#include &lt;iostream&gt;     </dfn><cite>// std::cout</cite>
<dfn>#include &lt;algorithm&gt;    </dfn><cite>// std::reverse_copy</cite>
<dfn>#include &lt;vector&gt;       </dfn><cite>// std::vector</cite>

<var>int</var> main () {
  <var>int</var> myints[] ={1,2,3,4,5,6,7,8,9};
  std::vector&lt;<var>int</var>&gt; myvector;

  myvector.resize(9);    <cite>// allocate space</cite>

  std::reverse_copy (myints, myints+9, myvector.begin());

  <cite>// print out content:</cite>
  std::cout &lt;&lt; <kbd>"myvector contains:"</kbd>;
  <var>for</var> (std::vector&lt;<var>int</var>&gt;::iterator it=myvector.begin(); it!=myvector.end(); ++it)
    std::cout &lt;&lt; <kbd>' '</kbd> &lt;&lt; *it;

  std::cout &lt;&lt; <kbd>'\n'</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>myvector contains: 9 8 7 6 5 4 3 2 1
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Linear in the <a href="/distance">distance</a> between <var>first</var> and <var>last</var>: Performs an assignment for each element.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The objects in the range <code>[first,last)</code> are accessed.<br>
The objects in the range between <var>result</var> and the returned value are modified.<br>
Each object is accessed exactly once.<br>
</section>
<br>
<section id="exceptions">
<h3>Exceptions</h3>
Throws if either an element assignment or an operation on an iterator throws.<br>
Note that invalid arguments cause <i>undefined behavior</i>.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/algorithm/reverse/"><b>reverse</b></a></dt><dd>Reverse range <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/rotate_copy/"><b>rotate_copy</b></a></dt><dd>Copy range rotated left <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/copy/"><b>copy</b></a></dt><dd>Copy range of elements <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/copy_backward/"><b>copy_backward</b></a></dt><dd>Copy range of elements backward <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/utility/swap/"><b>swap</b></a></dt><dd>Exchange values of two objects <span class="typ">(function template)</span></dd></dl>
<div id="CH_bb"></div></div></div>
