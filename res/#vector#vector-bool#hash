<div id="I_content">
<div class="C_doc">
<div id="I_type">class template specialization</div>
<div id="I_file">&lt;vector&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span>hash&lt;vector&lt;bool&gt;&gt;<span class="C_ico cpp11warning" title="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it." alt="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it."></span></h1>
<div class="C_prototype"><pre>template &lt;class T&gt; struct hash;                             // unspecializedtemplate &lt;class Alloc&gt; struct hash &lt;vector&lt;bool,Alloc&gt;&gt;;    // vector&lt;bool&gt;</pre></div><div id="I_description">Hash for vector<bool></div>
<section id="description">
Unary function object class that defines the <a href="/hash">hash</a> specialization for <a href="/vector&lt;bool&gt;">vector&lt;bool&gt;</a>.<br>
<br>
The functional call returns a hash value based on the entire vector: A hash value is a value that depends solely on its argument, returning always the same value for the same argument (for a given program execution). The value returned shall have a small likelihood of being the same as the one returned for a different argument (with chances of collision approaching <tt>1/<a href="/numeric_limits">numeric_limits</a>&lt;size_t&gt;::max</tt>).<br>
<br>
This allows the use of <a href="/vector&lt;bool&gt;">vector&lt;bool&gt;</a> objects as keys for <i>unordered containers</i> (like <a href="/unordered_set">unordered_set</a> or <a href="/unordered_map">unordered_map</a>).<br>
<br>
See <a href="/hash">hash</a> for additional information.<br>
</section>
<br>
<section id="functions">
<h3>Member functions</h3>
<dl>
<dt>operator()</dt>
<dd>Returns a hash value for its argument, as a value of type <a href="/size_t">size_t</a>.<br>
<a href="/size_t">size_t</a> is an unsigned integral type.</dd>
</dl>
</section>
<div id="CH_bb"></div></div></div>
