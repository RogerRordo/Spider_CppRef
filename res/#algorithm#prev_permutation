<div id="I_content">
<div class="C_doc">
<div id="I_type">function template</div>
<div id="I_file">&lt;algorithm&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span>prev_permutation</h1>
<div class="C_prototype"><table><tr class="odd"><th>default (1)</th><td><pre>template &lt;class BidirectionalIterator&gt;  bool prev_permutation (BidirectionalIterator first,                         BidirectionalIterator last );</pre></td></tr><tr class="even"><th>custom (2)</th><td><pre>template &lt;class BidirectionalIterator, class Compare&gt;  bool prev_permutation (BidirectionalIterator first,                         BidirectionalIterator last, Compare comp);</pre></td></tr></table></div><div id="I_description">Transform range to previous permutation</div>
<section id="description">
Rearranges the elements in the range <code>[first,last)</code> into the previous <i><a href="/lexicographical_compare">lexicographically</a>-ordered</i> permutation.<br>
<br>
A <dfn>permutation</dfn> is each one of the <code>N!</code> possible arrangements the elements can take (where <var>N</var> is the number of elements in the range). Different permutations can be ordered according to how they compare <i><a href="/lexicographical_compare">lexicographicaly</a></i> to each other; The first such-sorted possible permutation (the one that would compare <i>lexicographically smaller</i> to all other permutations) is the one which has all its elements sorted in ascending order, and the largest has all its elements sorted in descending order.<br>
<br>
The comparisons of individual elements are performed using either <code>operator&lt;</code> for the first version, or <var>comp</var> for the second.<br>
<br>
If the function can determine the previous permutation, it rearranges the elements as such and returns <code>true</code>. If that was not possible (because it is already at the lowest possible permutation), it rearranges the elements according to the last permutation (sorted in descending order) and returns <code>false</code>.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>first, last</dt>
<dd><a href="/BidirectionalIterator">Bidirectional iterators</a> to the initial and final positions of the sequence. The range used is <code>[first,last)</code>, which contains all the elements between <var>first</var> and <var>last</var>, including the element pointed by <var>first</var> but not the element pointed by <var>last</var>.<br>
<samp>BidirectionalIterator</samp> shall point to a type for which <samp><a href="/swap">swap</a></samp> is properly defined.<br>
</dd>
<dt>comp</dt>
<dd>Binary function that accepts two arguments of the type pointed by <samp>BidirectionalIterator</samp>, and returns a value convertible to <code>bool</code>. The value returned indicates whether the first argument is considered to go before the second in the specific <i>strict weak ordering</i> it defines.<br>
The function shall not modify any of its arguments.<br>
This can either be a function pointer or a function object.<br>
</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
<code>true</code> if the function could rearrange the object as a lexicographicaly smaller permutation.<br>
Otherwise, the function returns <code>false</code> to indicate that the arrangement is not less than the previous, but the largest possible (sorted in descending order).<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br></code></pre></td>
<td class="source"><pre><code><cite>// next_permutation example</cite>
<dfn>#include &lt;iostream&gt;     </dfn><cite>// std::cout</cite>
<dfn>#include &lt;algorithm&gt;    </dfn><cite>// std::next_permutation, std::sort, std::reverse</cite>

<var>int</var> main () {
  <var>int</var> myints[] = {1,2,3};

  std::sort (myints,myints+3);
  std::reverse (myints,myints+3);

  std::cout &lt;&lt; <kbd>"The 3! possible permutations with 3 elements:\n"</kbd>;
  <var>do</var> {
    std::cout &lt;&lt; myints[0] &lt;&lt; <kbd>' '</kbd> &lt;&lt; myints[1] &lt;&lt; <kbd>' '</kbd> &lt;&lt; myints[2] &lt;&lt; <kbd>'\n'</kbd>;
  } <var>while</var> ( std::prev_permutation(myints,myints+3) );

  std::cout &lt;&lt; <kbd>"After loop: "</kbd> &lt;&lt; myints[0] &lt;&lt; <kbd>' '</kbd> &lt;&lt; myints[1] &lt;&lt; <kbd>' '</kbd> &lt;&lt; myints[2] &lt;&lt; <kbd>'\n'</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>3 2 1
3 1 2
2 3 1
2 1 3
1 3 2
1 2 3
After loop: 3 2 1
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Up to linear in half the <a href="/distance">distance</a> between <var>first</var> and <var>last</var> (in terms of actual swaps).<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The objects in the range <code>[first,last)</code> are modified.<br>
</section>
<br>
<section id="exceptions">
<h3>Exceptions</h3>
Throws if any element swap throws or if any operation on an iterator throws.<br>
Note that invalid arguments cause <i>undefined behavior</i>.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/algorithm/next_permutation/"><b>next_permutation</b></a></dt><dd>Transform range to next permutation <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/lexicographical_compare/"><b>lexicographical_compare</b></a></dt><dd>Lexicographical less-than comparison <span class="typ">(function template)</span></dd></dl>
<div id="CH_bb"></div></div></div>
