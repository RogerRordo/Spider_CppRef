<div id="I_content">
<div class="C_doc">
<div id="I_type">function template</div>
<div id="I_file">&lt;algorithm&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span>partial_sort</h1>
<div class="C_prototype"><table><tr class="odd"><th>default (1)</th><td><pre>template &lt;class RandomAccessIterator&gt;  void partial_sort (RandomAccessIterator first, RandomAccessIterator middle,                     RandomAccessIterator last);</pre></td></tr><tr class="even"><th>custom (2)</th><td><pre>template &lt;class RandomAccessIterator, class Compare&gt;  void partial_sort (RandomAccessIterator first, RandomAccessIterator middle,                     RandomAccessIterator last, Compare comp);</pre></td></tr></table></div><div id="I_description">Partially sort elements in range</div>
<section id="description">
Rearranges the elements in the range <code>[first,last)</code>, in such a way that the elements before <var>middle</var> are the smallest elements in the entire range and are sorted in ascending order, while the remaining elements are left without any specific order.<br>
<br>
The elements are compared using <code>operator&lt;</code> for the first version, and <var>comp</var> for the second.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>first, last</dt>
<dd><a href="/RandomAccessIterator">Random-access iterators</a> to the initial and final positions of the sequence to be partially sorted. The range used is <code>[first,last)</code>, which contains all the elements between <var>first</var> and <var>last</var>, including the element pointed by <var>first</var> but not the element pointed by <var>last</var>.<br>
Notice that in this function these are not consecutive parameters, but the first and the <strong>third</strong>.</dd>
<dt>middle</dt>
<dd><a href="/RandomAccessIterator">Random-access iterator</a> pointing to the element within the range <code>[first,last)</code> that is used as the upper boundary of the elements that are fully sorted.</dd>
<dt>comp</dt>
<dd>Binary function that accepts two elements in the range as arguments, and returns a value convertible to <code>bool</code>. The value returned indicates whether the element passed as first argument is considered to go before the second in the specific <i>strict weak ordering</i> it defines.<br>
The function shall not modify any of its arguments.<br>
This can either be a function pointer or a function object.<br>
</dd>
</dl>
<br>
<samp>RandomAccessIterator</samp> shall point to a type for which <samp><a href="/swap">swap</a></samp> is properly defined and which is both <i><a href="/is_move_constructible">move-constructible</a></i> and <i><a href="/is_move_assignable">move-assignable</a></i>.<br>
</section>
<br>
<section id="return">
<h3>Return value</h3>
none<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br></code></pre></td>
<td class="source"><pre><code><cite>// partial_sort example</cite>
<dfn>#include &lt;iostream&gt;     </dfn><cite>// std::cout</cite>
<dfn>#include &lt;algorithm&gt;    </dfn><cite>// std::partial_sort</cite>
<dfn>#include &lt;vector&gt;       </dfn><cite>// std::vector</cite>

<var>bool</var> myfunction (<var>int</var> i,<var>int</var> j) { <var>return</var> (i&lt;j); }

<var>int</var> main () {
  <var>int</var> myints[] = {9,8,7,6,5,4,3,2,1};
  std::vector&lt;<var>int</var>&gt; myvector (myints, myints+9);

  <cite>// using default comparison (operator &lt;):</cite>
  std::partial_sort (myvector.begin(), myvector.begin()+5, myvector.end());

  <cite>// using function as comp</cite>
  std::partial_sort (myvector.begin(), myvector.begin()+5, myvector.end(),myfunction);

  <cite>// print out content:</cite>
  std::cout &lt;&lt; <kbd>"myvector contains:"</kbd>;
  <var>for</var> (std::vector&lt;<var>int</var>&gt;::iterator it=myvector.begin(); it!=myvector.end(); ++it)
    std::cout &lt;&lt; <kbd>' '</kbd> &lt;&lt; *it;
  std::cout &lt;&lt; <kbd>'\n'</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Possible output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>myvector contains: 1 2 3 4 5 9 8 7 6
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
On average, less than linearithmic in the <a href="/distance">distance</a> between <var>first</var> and <var>last</var>: Performs approximately <code>N*log(M)</code> comparisons of elements (where <var>N</var> is this distance, and <var>M</var> is the <a href="/distance">distance</a> between <var>first</var> and <var>middle</var>). It also performs up to that many element swaps (or moves).<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The objects in the range <code>[first,last)</code> are modified.<br>
</section>
<br>
<section id="exceptions">
<h3>Exceptions</h3>
Throws if any of the element comparisons, the element swaps (or moves) or the operations on iterators throws.<br>
Note that invalid arguments cause <i>undefined behavior</i>.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/algorithm/sort/"><b>sort</b></a></dt><dd>Sort elements in range <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/stable_sort/"><b>stable_sort</b></a></dt><dd>Sort elements preserving order of equivalents <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/search/"><b>search</b></a></dt><dd>Search range for subsequence <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/reverse/"><b>reverse</b></a></dt><dd>Reverse range <span class="typ">(function template)</span></dd></dl>
<div id="CH_bb"></div></div></div>
