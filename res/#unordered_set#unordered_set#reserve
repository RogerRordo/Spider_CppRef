<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;unordered_set&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/unordered_set/unordered_set/">unordered_set</a>::reserve<span class="C_ico cpp11warning" title="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it." alt="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it."></span></h1>
<div class="C_prototype"><pre>void reserve ( size_type n );</pre></div><div id="I_description">Request a capacity change</div>
<section id="description">
Sets the number of buckets in the container (<a href="/unordered_set::bucket_count">bucket_count</a>) to the most appropriate to contain at least <i>n</i> elements.<br>
<br>
If <i>n</i> is greater than the current <a href="/unordered_set::bucket_count">bucket_count</a> multiplied by the <a href="/unordered_set::max_load_factor">max_load_factor</a>, the container's <a href="/unordered_set::bucket_count">bucket_count</a> is increased and a <a href="/unordered_set::rehash">rehash</a> is forced.<br>
<br>
If <i>n</i> is lower than that, the function may have no effect.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>n</dt>
<dd>The number of elements requested as minimum capacity.<br>
Member type <tt>size_type</tt> is an unsigned integral type.</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
none<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br></code></pre></td>
<td class="source"><pre><code><cite>// unordered_set::reserve</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>
<dfn>#include &lt;unordered_set&gt;</dfn>

<var>int</var> main ()
{
  std::unordered_set&lt;std::string&gt; myset;

  myset.reserve(5);

  myset.insert(<kbd>"office"</kbd>);
  myset.insert(<kbd>"house"</kbd>);
  myset.insert(<kbd>"gym"</kbd>);
  myset.insert(<kbd>"parking"</kbd>);
  myset.insert(<kbd>"highway"</kbd>);

  std::cout &lt;&lt; <kbd>"myset contains:"</kbd>;
  <var>for</var> (<var>const</var> std::string&amp; x: myset) std::cout &lt;&lt; <kbd>" "</kbd> &lt;&lt; x;
  std::cout &lt;&lt; std::endl;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Possible output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>myset contains: highway house office gym parking
</samp></pre></td></tr></table></div>
<br>
By calling <tt>reserve</tt> with the size we expected for the <a href="/unordered_set">unordered_set</a> container we avoided the multiple rehashes that the increases in container size could have produced and optimized the size of the hash table.<br>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
In case of rehash,<br>
Average case: linear in <a href="/unordered_set::size">container size</a>.<br>
Worst case: quadratic in <a href="/unordered_set::size">container size</a>. <br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
If a rehash happens, all iterators are invalidated, but references and pointers to individual elements remain valid.<br>
If no actual rehash happens, no changes.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/unordered_set/unordered_set/rehash/"><b>unordered_set::rehash</b></a></dt><dd>Set number of buckets <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_set/unordered_set/bucket_count/"><b>unordered_set::bucket_count</b></a></dt><dd>Return number of buckets <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_set/unordered_set/max_load_factor/"><b>unordered_set::max_load_factor</b></a></dt><dd>Get or set maximum load factor <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_set/unordered_set/size/"><b>unordered_set::size</b></a></dt><dd>Return container size <span class="typ">(public member function)</span></dd></dl>
</section>
<div id="CH_bb"></div></div></div>
