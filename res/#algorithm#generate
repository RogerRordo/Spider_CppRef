<div id="I_content">
<div class="C_doc">
<div id="I_type">function template</div>
<div id="I_file">&lt;algorithm&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span>generate</h1>
<div class="C_prototype"><pre>template &lt;class ForwardIterator, class Generator&gt;  void generate (ForwardIterator first, ForwardIterator last, Generator gen);</pre></div><div id="I_description">Generate values for range with function</div>
<section id="description">
Assigns the value returned by successive calls to <var>gen</var> to the elements in the range <code>[first,last)</code>.<br>
<br>
The behavior of this function template is equivalent to:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br></code></pre></td>
<td class="source"><pre><code><var>template</var> &lt;<var>class</var> ForwardIterator, <var>class</var> Generator&gt;
  <var>void</var> generate ( ForwardIterator first, ForwardIterator last, Generator gen )
{
  <var>while</var> (first != last) {
    *first = gen();
    ++first;
  }
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>first, last</dt>
<dd><a href="/ForwardIterator">Forward iterators</a> to the initial and final positions in a sequence. The range affected is <code>[first,last)</code>, which contains all the elements between <var>first</var> and <var>last</var>, including the element pointed by <var>first</var> but not the element pointed by <var>last</var>.</dd>
<dt>gen</dt>
<dd>Generator function that is called with no arguments and returns some value of a type convertible to those pointed by the iterators.<br>
This can either be a function pointer or a function object.</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
none<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br></code></pre></td>
<td class="source"><pre><code><cite>// generate algorithm example</cite>
<dfn>#include &lt;iostream&gt;     </dfn><cite>// std::cout</cite>
<dfn>#include &lt;algorithm&gt;    </dfn><cite>// std::generate</cite>
<dfn>#include &lt;vector&gt;       </dfn><cite>// std::vector</cite>
<dfn>#include &lt;ctime&gt;        </dfn><cite>// std::time</cite>
<dfn>#include &lt;cstdlib&gt;      </dfn><cite>// std::rand, std::srand</cite>

<cite>// function generator:</cite>
<var>int</var> RandomNumber () { <var>return</var> (std::rand()%100); }

<cite>// class generator:</cite>
<var>struct</var> c_unique {
  <var>int</var> current;
  c_unique() {current=0;}
  <var>int</var> <var>operator</var>()() {<var>return</var> ++current;}
} UniqueNumber;

<var>int</var> main () {
  std::srand ( <var>unsigned</var> ( std::time(0) ) );

  std::vector&lt;<var>int</var>&gt; myvector (8);

  std::generate (myvector.begin(), myvector.end(), RandomNumber);

  std::cout &lt;&lt; <kbd>"myvector contains:"</kbd>;
  <var>for</var> (std::vector&lt;<var>int</var>&gt;::iterator it=myvector.begin(); it!=myvector.end(); ++it)
    std::cout &lt;&lt; <kbd>' '</kbd> &lt;&lt; *it;
  std::cout &lt;&lt; <kbd>'\n'</kbd>;

  std::generate (myvector.begin(), myvector.end(), UniqueNumber);

  std::cout &lt;&lt; <kbd>"myvector contains:"</kbd>;
  <var>for</var> (std::vector&lt;<var>int</var>&gt;::iterator it=myvector.begin(); it!=myvector.end(); ++it)
    std::cout &lt;&lt; <kbd>' '</kbd> &lt;&lt; *it;
  std::cout &lt;&lt; <kbd>'\n'</kbd>;
 
  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
A possible output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>myvector contains: 57 87 76 66 85 54 17 15
myvector contains: 1 2 3 4 5 6 7 8
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Linear in the <a href="/distance">distance</a> between <var>first</var> and <var>last</var>: Calls <var>gen</var> and performs an assignment for each element.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The objects in the range <code>[first,last)</code> are modified (each object is accessed exactly once).<br>
</section>
<br>
<section id="exceptions">
<h3>Exceptions</h3>
Throws if any of <var>gen</var>, the element assignments or the operations on iterators throws.<br>
Note that invalid arguments cause <i>undefined behavior</i>.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/algorithm/generate_n/"><b>generate_n</b></a></dt><dd>Generate values for sequence with function <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/fill/"><b>fill</b></a></dt><dd>Fill range with value <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/for_each/"><b>for_each</b></a></dt><dd>Apply function to range <span class="typ">(function template)</span></dd></dl>
<div id="CH_bb"></div></div></div>
