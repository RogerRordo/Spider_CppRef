<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;istream&gt; &lt;iostream&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/istream/basic_istream/">basic_istream</a>::getline</h1>
<div class="C_prototype"><pre>basic_istream&amp; getline (char_type* s, streamsize n );basic_istream&amp; getline (char_type* s, streamsize n, char_type delim);</pre></div><div id="I_description">Get line</div>
<section id="description">
Extracts characters from the stream as <i>unformatted input</i> and stores them into <var>s</var> as a c-string, until either the extracted character is the <var>delimiting character</var>, or <var>n</var> characters have been written to <var>s</var> (including the terminating null character).<br>
<br>
The <i>delimiting character</i> is the <i>newline character</i> (<code><a href="/basic_ios::widen">widen</a>('\n')</code>) for the first form, and <var>delim</var> for the second: when found in the input sequence, it is extracted from the input sequence, but discarded and not written to <var>s</var>.<br>
<br>
The function will also stop extracting characters if the <i>end-of-file</i> is reached. If this is reached prematurely (before either writing <var>n</var> characters or finding <var>delim</var>), the function sets the <samp><a href="/ios_base::eofbit">eofbit</a></samp> flag.<br>
<br>
The <samp><a href="/ios_base::failbit">failbit</a></samp> flag is set if the function extracts no characters, or if the <var>delimiting character</var> is not found once <code>(n-1)</code> characters have already been written to <var>s</var>. Note that if the character that follows those <code>(n-1)</code> characters in the input sequence is precisely the <var>delimiting character</var>, it is also extracted and the <samp><a href="/ios_base::failbit">failbit</a></samp> flag is not set (the extracted sequence was exactly <var>n</var> characters long).<br>
<br>
A <i>null character</i> (<code>char_type()</code>) is automatically appended to the written sequence if <var>n</var> is greater than zero, even if an empty string is extracted.<br>
<br>
Internally, the function accesses the input sequence by first constructing a <samp><a href="/basic_istream::sentry">sentry</a></samp> object (with <var>noskipws</var> set to <code>true</code>). Then (if <samp><a href="/basic_ios::good">good</a></samp>), it extracts characters from its associated <i><a href="/basic_streambuf">stream buffer</a></i> object as if calling its member functions <samp><a href="/basic_streambuf::sbumpc">sbumpc</a></samp> or <samp><a href="/basic_streambuf::sgetc">sgetc</a></samp>, and finally destroys the <samp><a href="/basic_istream::sentry">sentry</a></samp> object before returning.<br>
<br>
The number of characters successfully read and stored by this function can be accessed by calling member <samp><a href="/basic_istream::gcount">gcount</a></samp>.<br>
<br>
This function is overloaded for <samp><a href="/basic_string">basic_string</a></samp> objects in header <samp><a href="/&lt;string&gt;">&lt;string&gt;</a></samp>: See <samp><a href="/basic_string:getline">getline(basic_string)</a></samp>.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>s</dt>
<dd>Pointer to an array of characters where extracted characters are stored as a c-string.<br>
</dd>
<dt>n</dt>
<dd>Maximum number of characters to write to <var>s</var> (including the terminating null character).<br>
If the function stops reading because this limit is reached without finding the <i>delimiting character</i>, the <samp><a href="/ios_base::failbit">failbit</a></samp> internal flag is set.<br>
<samp><a href="/streamsize">streamsize</a></samp> is a signed integral type.<br>
</dd>
<dt>delim</dt>
<dd>Explicit <i>delimiting character</i>: The operation of extracting successive characters stops as soon as the next character to extract compares equal to this (using <samp><a href="/char_traits::eq">traits_type::eq</a></samp>).</dd>
</dl>
Member type <samp>char_type</samp> is the type of characters used by the stream (i.e., its first class template parameter, <samp>charT</samp>).<br>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
The <samp><a href="/basic_istream">basic_istream</a></samp> object (<code>*this</code>).<br>
<br>
Errors are signaled by modifying the <i><a href="/basic_ios::rdstate">internal state flags</a></i>:<br>
<table class="boxed">
<tr><th>flag</th><th>error</th></tr>
<tr><td><samp><a href="/ios_base::eofbit">eofbit</a></samp></td><td>The function stopped extracting characters because the input sequence has no more characters available (<i>end-of-file</i> reached).</td></tr>
<tr><td><samp><a href="/ios_base::failbit">failbit</a></samp></td><td>Either the <i>delimiting character</i> was not found or no characters were extracted at all (because the <i>end-of-file</i> was before the first character or because the construction of <samp><a href="/basic_istream::sentry">sentry</a></samp> failed).</td></tr>
<tr><td><samp><a href="/ios_base::badbit">badbit</a></samp></td><td>Error on stream (such as when this function catches an exception thrown by an internal operation).<br>
When set, the integrity of the stream may have been affected.</td></tr>
</table>
Multiple flags may be set by a single operation.<br>
<br>
If the operation sets an <i><a href="/basic_ios::rdstate">internal state flag</a></i> that was registered with member <samp><a href="/basic_ios::exceptions">exceptions</a></samp>, the function throws an exception of member type <samp><a href="/ios_base::failure">failure</a></samp>.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br></code></pre></td>
<td class="source"><pre><code><cite>// istream::getline example</cite>
<dfn>#include &lt;iostream&gt;     </dfn><cite>// std::cin, std::cout</cite>

<var>int</var> main () {
  <var>char</var> name[256], title[256];

  std::cout &lt;&lt; <kbd>"Please, enter your name: "</kbd>;
  std::cin.getline (name,256);

  std::cout &lt;&lt; <kbd>"Please, enter your favourite movie: "</kbd>;
  std::cin.getline (title,256);

  std::cout &lt;&lt; name &lt;&lt; <kbd>"'s favourite movie is "</kbd> &lt;&lt; title;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
This example illustrates how to get lines from the standard input stream (<samp><a href="/cin">cin</a></samp>).<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
Modifies the elements in the array pointed by <var>s</var> and the stream object.<br>
Concurrent access to the same stream object may cause data races, except for the standard stream objects <samp><a href="/cin">cin</a></samp> and <samp><a href="/wcin">wcin</a></samp> when these are <i><a href="/ios_base::sync_with_stdio">synchronized with stdio</a></i> (in this case, no data races are initiated, although no guarantees are given on the order in which extracted characters are attributed to threads).<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
<b>Basic guarantee:</b> if an exception is thrown, the object is in a valid state.<br>
It throws an exception of member type <samp><a href="/ios_base::failure">failure</a></samp> if the resulting <i>error state flag</i> is not <samp><a href="/ios_base::goodbit">goodbit</a></samp> and member <samp><a href="/basic_ios::exceptions">exceptions</a></samp> was set to throw for that state.<br>
Any exception thrown by an internal operation is caught and handled by the function, setting <samp><a href="/ios_base::badbit">badbit</a></samp>. If <samp><a href="/ios_base::badbit">badbit</a></samp> was set on the last call to <samp><a href="/basic_ios::exceptions">exceptions</a></samp>, the function rethrows the caught exception.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<div id="CH_bb"></div></div></div>
