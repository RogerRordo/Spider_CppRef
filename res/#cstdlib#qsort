<div id="I_content">
<div class="C_doc">
<div id="I_type">function</div>
<div id="I_file">&lt;cstdlib&gt;</div>
<h1>qsort</h1>
<div class="C_prototype"><pre>void qsort (void* base, size_t num, size_t size,            int (*compar)(const void*,const void*));</pre></div><div id="I_description">Sort elements of array</div>
<section id="description">
Sorts the <var>num</var> elements of the array pointed to by <var>base</var>, each element <var>size</var> bytes long, using the <var>compar</var> function to determine the order.<br>
<br>
The sorting algorithm used by this function compares pairs of elements by calling the specified <var>compar</var> function with pointers to them as argument.<br>
<br>
The function does not return any value, but modifies the content of the array pointed to by <var>base</var> reordering its elements as defined by <var>compar</var>.<br>
<br>
The order of equivalent elements is undefined.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>base</dt>
<dd>Pointer to the first object of the array to be sorted, converted to a <code>void*</code>.</dd>
<dt>num</dt>
<dd>Number of elements in the array pointed to by <var>base</var>.<br>
<samp><a href="/cstdlib:size_t">size_t</a></samp> is an unsigned integral type.</dd>
<dt>size</dt>
<dd>Size in bytes of each element in the array.<br>
<samp><a href="/cstdlib:size_t">size_t</a></samp> is an unsigned integral type.</dd>
<dt>compar</dt>
<dd>Pointer to a function that compares two elements.<br>
This function is called repeatedly by <samp>qsort</samp> to compare two elements. It shall follow the following prototype:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>&nbsp;</code></pre></td>
<td class="source"><pre><code><var>int</var> compar (<var>const</var> <var>void</var>* p1, <var>const</var> <var>void</var>* p2);</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
Taking two pointers as arguments (both converted to <tt>const void*</tt>). The function defines the order of the elements by returning (in a stable and transitive manner):<br>
<table class="boxed">
<tr><th>return value</th><th>meaning</th></tr>
<tr><td><code>&lt;0</code></td><td>The element pointed to by <var>p1</var> goes before the element pointed to by <var>p2</var></td></tr>
<tr><td><code>0</code></td><td>The element pointed to by <var>p1</var> is equivalent to the element pointed to by <var>p2</var></td></tr>
<tr><td><code>&gt;0</code></td><td>The element pointed to by <var>p1</var> goes after the element pointed to by <var>p2</var></td></tr>
</table>
<br>
For types that can be compared using regular relational operators, a general <var>compar</var> function may look like:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br></code></pre></td>
<td class="source"><pre><code><var>int</var> compareMyType (<var>const</var> <var>void</var> * a, <var>const</var> <var>void</var> * b)
{
  <var>if</var> ( *(MyType*)a &lt;  *(MyType*)b ) <var>return</var> -1;
  <var>if</var> ( *(MyType*)a == *(MyType*)b ) <var>return</var> 0;
  <var>if</var> ( *(MyType*)a &gt;  *(MyType*)b ) <var>return</var> 1;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
none<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br></code></pre></td>
<td class="source"><pre><code><cite>/* qsort example */</cite>
<dfn>#include &lt;stdio.h&gt;      </dfn><cite>/* printf */</cite><dfn></dfn>
<dfn>#include &lt;stdlib.h&gt;     </dfn><cite>/* qsort */</cite><dfn></dfn>

<var>int</var> values[] = { 40, 10, 100, 90, 20, 25 };

<var>int</var> compare (<var>const</var> <var>void</var> * a, <var>const</var> <var>void</var> * b)
{
  <var>return</var> ( *(<var>int</var>*)a - *(<var>int</var>*)b );
}

<var>int</var> main ()
{
  <var>int</var> n;
  qsort (values, 6, <var>sizeof</var>(<var>int</var>), compare);
  <var>for</var> (n=0; n&lt;6; n++)
     printf (<kbd>"%d "</kbd>,values[n]);
  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>
10 20 25 40 90 100
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Unspecified, but quicksorts are generally linearithmic in <var>num</var>, on average, calling <var>compar</var> approximately <code>num*log<sub>2</sub>(num)</code> times.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The function accesses and/or modifies the <var>num</var> elements in the array pointed to by <var>base</var>.<br>
</section>
<br>
<section id="exceptions">
<h3>Exceptions (C++)</h3>
If <var>comp</var> does not throw exceptions, this function throws no exceptions (no-throw guarantee).<br>
<br>
If <var>base</var> does not point to an array of at least <code>num*size</code> bytes, or if <var>comp</var> does not behave as described above, it causes <i>undefined behavior</i>.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/cstdlib/bsearch/"><b>bsearch</b></a></dt><dd>Binary search in array <span class="typ">(function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
