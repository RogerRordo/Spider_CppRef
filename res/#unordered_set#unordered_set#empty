<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;unordered_set&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/unordered_set/unordered_set/">unordered_set</a>::empty<span class="C_ico cpp11warning" title="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it." alt="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it."></span></h1>
<div class="C_prototype"><pre>bool empty() const noexcept;</pre></div><div id="I_description">Test whether container is empty</div>
<section id="description">
Returns a <tt>bool</tt> value indicating whether the <a href="/unordered_set">unordered_set</a> container is empty, i.e. whether its <a href="/unordered_set::size">size</a> is <tt>0</tt>.<br>
<br>
This function does not modify the content of the array in any way. To clear the content of an array object, member function <a href="/unordered_set::clear">unordered_set::clear</a> exists.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
none<br>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
<tt>true</tt> if the container size is <tt>0</tt>, <tt>false</tt> otherwise.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br></code></pre></td>
<td class="source"><pre><code><cite>// unordered_set::empty</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>
<dfn>#include &lt;unordered_set&gt;</dfn>

<var>int</var> main ()
{
  std::unordered_set&lt;std::string&gt; first;
  std::unordered_set&lt;std::string&gt; second = {<kbd>"alpha"</kbd>,<kbd>"beta"</kbd>,<kbd>"gamma"</kbd>};
  std::cout &lt;&lt; <kbd>"first "</kbd> &lt;&lt; (first.empty() ? <kbd>"is empty"</kbd> : <kbd>"is not empty"</kbd> ) &lt;&lt; std::endl;
  std::cout &lt;&lt; <kbd>"second "</kbd> &lt;&lt; (second.empty() ? <kbd>"is empty"</kbd> : <kbd>"is not empty"</kbd> ) &lt;&lt; std::endl;
  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>first is empty
second is not empty
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Constant.<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
No changes.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/unordered_set/unordered_set/clear/"><b>unordered_set::clear</b></a></dt><dd>Clear content <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_set/unordered_set/size/"><b>unordered_set::size</b></a></dt><dd>Return container size <span class="typ">(public member function)</span></dd></dl>
</section>
<div id="CH_bb"></div></div></div>
