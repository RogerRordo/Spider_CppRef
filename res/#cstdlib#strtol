<div id="I_content">
<div class="C_doc">
<div id="I_type">function</div>
<div id="I_file">&lt;cstdlib&gt;</div>
<h1>strtol</h1>
<div class="C_prototype"><pre>long int strtol (const char* str, char** endptr, int base);</pre></div><div id="I_description">Convert string to long integer</div>
<section id="description">
Parses the C-string <var>str</var> interpreting its content as an integral number of the specified <var>base</var>, which is returned as a <code>long int</code> value. If <var>endptr</var> is not a null pointer, the function also sets the value of <var>endptr</var> to point to the first character after the number.<br>
<br>
The function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character, takes as many characters as possible that are valid following a syntax that depends on the <var>base</var> parameter, and interprets them as a numerical value. Finally, a pointer to the first character following the integer representation in <var>str</var> is stored in the object pointed by <var>endptr</var>.<br>
<br>
If the value of <var>base</var> is zero, the syntax expected is similar to that of integer constants, which is formed by a succession of:<br>
<ul>
<li>An optional sign character (<code>+</code> or <code>-</code>)</li>
<li>An optional prefix indicating octal or hexadecimal base (<code>"0"</code> or <code>"0x"/"0X"</code> respectively)</li>
<li>A sequence of decimal digits (if no base prefix was specified) or either octal or hexadecimal digits if a specific prefix is present</li>
</ul>
<br>
If the <var>base</var> value is between 2 and 36, the format expected for the integral number is a succession of any of the valid digits and/or letters needed to represent integers of the specified radix (starting from <code>'0'</code> and up to <code>'z'</code>/<code>'Z'</code> for radix 36). The sequence may optionally be preceded by a sign (either <code>+</code> or <code>-</code>) and, if <var>base</var> is 16, an optional <code>"0x"</code> or <code>"0X"</code> prefix.<br>
<br>
If the first sequence of non-whitespace characters in <var>str</var> is not a valid integral number as defined above, or if no such sequence exists because either <var>str</var> is empty or it contains only whitespace characters, no conversion is performed.<br>
<br>
For locales other than the <code>"C"</code> locale, additional subject sequence forms may be accepted.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>str</dt>
<dd>C-string beginning with the representation of an integral number.</dd>
<dt>endptr</dt>
<dd>Reference to an object of type <code>char*</code>, whose value is set by the function to the next character in <var>str</var> after the numerical value.<br>
This parameter can also be a null pointer, in which case it is not used.</dd>
<dt>base</dt>
<dd>Numerical base (radix) that determines the valid characters and their interpretation.<br>
If this is <code>0</code>, the base used is determined by the format in the sequence (see above).</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
On success, the function returns the converted integral number as a <code>long int</code> value.<br>
If no valid conversion could be performed, a zero value is returned (<code>0L</code>).<br>
If the value read is out of the range of representable values by a <code>long int</code>, the function returns <samp>LONG_MAX</samp> or <samp>LONG_MIN</samp> (defined in <samp><a href="/climits">&lt;climits&gt;</a></samp>), and <samp><a href="/errno">errno</a></samp> is set to <samp>ERANGE</samp>.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br></code></pre></td>
<td class="source"><pre><code><cite>/* strtol example */</cite>
<dfn>#include &lt;stdio.h&gt;      </dfn><cite>/* printf */</cite><dfn></dfn>
<dfn>#include &lt;stdlib.h&gt;     </dfn><cite>/* strtol */</cite><dfn></dfn>

<var>int</var> main ()
{
  <var>char</var> szNumbers[] = <kbd>"2001 60c0c0 -1101110100110100100000 0x6fffff"</kbd>;
  <var>char</var> * pEnd;
  <var>long</var> <var>int</var> li1, li2, li3, li4;
  li1 = strtol (szNumbers,&amp;pEnd,10);
  li2 = strtol (pEnd,&amp;pEnd,16);
  li3 = strtol (pEnd,&amp;pEnd,2);
  li4 = strtol (pEnd,NULL,0);
  printf (<kbd>"The decimal equivalents are: %ld, %ld, %ld and %ld.\n"</kbd>, li1, li2, li3, li4);
  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>
The decimal equivalents are: 2001, 6340800, -3624224 and 7340031
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The array pointed by <var>str</var> is accessed, and the pointer pointed by <var>endptr</var> is modified (if not null).<br>
</section>
<br>
<section id="exceptions">
<h3>Exceptions (C++)</h3>
<b>No-throw guarantee:</b> this function never throws exceptions.<br>
<br>
If <var>str</var> does not point to a valid C-string, or if <var>endptr</var> does not point to a valid pointer object, it causes <i>undefined behavior</i>.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/cstdlib/atol/"><b>atol</b></a></dt><dd>Convert string to long integer <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cstdlib/strtoul/"><b>strtoul</b></a></dt><dd>Convert string to unsigned long integer <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cstdlib/strtod/"><b>strtod</b></a></dt><dd>Convert string to double <span class="typ">(function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
