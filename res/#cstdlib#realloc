<div id="I_content">
<div class="C_doc">
<div id="I_type">function</div>
<div id="I_file">&lt;cstdlib&gt;</div>
<h1>realloc</h1>
<div class="C_prototype"><pre>void* realloc (void* ptr, size_t size);</pre></div><div id="I_description">Reallocate memory block</div>
<section id="description">
Changes the size of the memory block pointed to by <var>ptr</var>.<br>
<br>
The function may move the memory block to a new location (whose address is returned by the function).<br>
<br>
The content of the memory block is preserved up to the lesser of the new and old sizes, even if the block is moved to a new location. If the new <var>size</var> is larger, the value of the newly allocated portion is indeterminate.<br>
<br>
In case that <var>ptr</var> is a null pointer, the function behaves like <samp><a href="/malloc">malloc</a></samp>, assigning a new block of <var>size</var> bytes and returning a pointer to its beginning.<br>
<br>
<div class="C_SwitchCases">
<div title="C90 (C++98)">
Otherwise, if <var>size</var> is zero, the memory previously allocated at <var>ptr</var> is deallocated as if a call to <samp><a href="/free">free</a></samp> was made, and a <i>null pointer</i> is returned.<br>
</div>
<div title="C99/C11 (C++11)">
If <var>size</var> is zero, the return value depends on the particular library implementation: it may either be a <i>null pointer</i> or some other location that shall not be dereferenced.<br>
</div>
</div>
<br>
If the function fails to allocate the requested block of memory, a null pointer is returned, and the memory block pointed to by argument <var>ptr</var> is not deallocated (it is still valid, and with its contents unchanged).<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>ptr</dt>
<dd>Pointer to a memory block previously allocated with <samp><a href="/malloc">malloc</a></samp>, <samp><a href="/calloc">calloc</a></samp> or <samp><a href="/realloc">realloc</a></samp>.<br>
Alternatively, this can be a <i>null pointer</i>, in which case a new block is allocated (as if <samp><a href="/malloc">malloc</a></samp> was called).</dd>
<dt>size</dt>
<dd>New size for the memory block, in bytes.<br>
<samp><a href="/cstdlib:size_t">size_t</a></samp> is an unsigned integral type.<br>
</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
A pointer to the reallocated memory block, which may be either the same as <var>ptr</var> or a new location.<br>
The type of this pointer is <code>void*</code>, which can be cast to the desired type of data pointer in order to be dereferenceable.<br>
<div class="C_SwitchCases">
<div title="C90 (C++98)">
A <i>null-pointer</i> indicates either that <var>size</var> was zero (an thus <var>ptr</var> was deallocated), or that the function did not allocate storage (and thus the block pointed by <var>ptr</var> was not modified).<br>
</div>
<div title="C99/C11 (C++11)">
A <i>null-pointer</i> indicates that the function failed to allocate storage, and thus the block pointed by <var>ptr</var> was not modified.<br>
</div>
</div>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br></code></pre></td>
<td class="source"><pre><code><cite>/* realloc example: rememb-o-matic */</cite>
<dfn>#include &lt;stdio.h&gt;      </dfn><cite>/* printf, scanf, puts */</cite><dfn></dfn>
<dfn>#include &lt;stdlib.h&gt;     </dfn><cite>/* realloc, free, exit, NULL */</cite><dfn></dfn>

<var>int</var> main ()
{
  <var>int</var> input,n;
  <var>int</var> count = 0;
  <var>int</var>* numbers = NULL;
  <var>int</var>* more_numbers = NULL;

  <var>do</var> {
     printf (<kbd>"Enter an integer value (0 to end): "</kbd>);
     scanf (<kbd>"%d"</kbd>, &amp;input);
     count++;

     more_numbers = (<var>int</var>*) realloc (numbers, count * <var>sizeof</var>(<var>int</var>));

     <var>if</var> (more_numbers!=NULL) {
       numbers=more_numbers;
       numbers[count-1]=input;
     }
     <var>else</var> {
       free (numbers);
       puts (<kbd>"Error (re)allocating memory"</kbd>);
       exit (1);
     }
  } <var>while</var> (input!=0);

  printf (<kbd>"Numbers entered: "</kbd>);
  <var>for</var> (n=0;n&lt;count;n++) printf (<kbd>"%d "</kbd>,numbers[n]);
  free (numbers);

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
The program prompts the user for numbers until a zero character is entered. Each time a new value is introduced the memory block pointed by numbers is increased by the size of an <code>int</code>.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
Only the storage referenced by <var>ptr</var> and by the returned pointer are modified. No other storage locations are accessed by the call.<br>
If the function releases or reuses a unit of storage that is reused or released by another <i>allocation or deallocation function</i>, the functions are synchronized in such a way that the deallocation happens entirely before the next allocation.<br>
</section>
<br>
<section id="exceptions">
<h3>Exceptions (C++)</h3>
<b>No-throw guarantee:</b> this function never throws exceptions.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/cstdlib/free/"><b>free</b></a></dt><dd>Deallocate memory block <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cstdlib/calloc/"><b>calloc</b></a></dt><dd>Allocate and zero-initialize array <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cstdlib/malloc/"><b>malloc</b></a></dt><dd>Allocate memory block <span class="typ">(function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
