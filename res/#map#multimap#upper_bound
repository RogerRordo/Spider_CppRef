<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;map&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/map/multimap/">multimap</a>::upper_bound</h1>
<div class="C_prototype"><pre>      iterator upper_bound (const key_type&amp; k);const_iterator upper_bound (const key_type&amp; k) const;</pre></div><div id="I_description">Return iterator to upper bound</div>
<section id="description">
Returns an iterator pointing to the first element in the container whose key is considered to go after <i>k</i>.<br>
<br>
The function uses its internal <a href="/multimap::key_comp">comparison object</a> (<a href="/multimap::key_comp">key_comp</a>) to determine this, returning an iterator to the first element for which <tt>key_comp(k,element_key)</tt> would return <tt>true</tt>.<br>
<br>
If the <a href="/multimap">multimap</a> class is instantiated with the default comparison type (<a href="/less">less</a>), the function returns an iterator to the first element whose key is greater than <i>k</i>.<br>
<br>
A similar member function, <a href="/multimap::lower_bound">lower_bound</a>, has the same behavior as <tt>upper_bound</tt>, except in the case that the <a href="/multimap">multimap</a> contains elements with keys equivalent to <i>k</i>: In this case <a href="/multimap::lower_bound">lower_bound</a> returns an iterator pointing to the first of such elements, whereas <tt>upper_bound</tt> returns an iterator pointing to the element following the last.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>k</dt>
<dd>Key to search for.<br>
Member type <tt>key_type</tt> is the type of the elements in the container, defined in <a href="/multimap">multimap</a> as an alias of its first template parameter (<tt>Key</tt>).</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
An iterator to the the first element in the container whose key is considered to go after <i>k</i>, or <a href="/multimap::end">multimap::end</a> if no keys are considered to go after <i>k</i>.<br>
<br>
If the <a href="/multimap">multimap</a> object is const-qualified, the function returns a <tt>const_iterator</tt>. Otherwise, it returns an <tt>iterator</tt>.<br>
<br>
Member types <tt>iterator</tt> and <tt>const_iterator</tt> are <a href="/BidirectionalIterator">bidirectional iterator</a> types pointing to elements.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br></code></pre></td>
<td class="source"><pre><code><cite>// multimap::lower_bound/upper_bound</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;map&gt;</dfn>

<var>int</var> main ()
{
  std::multimap&lt;<var>char</var>,<var>int</var>&gt; mymultimap;
  std::multimap&lt;<var>char</var>,<var>int</var>&gt;::iterator it,itlow,itup;

  mymultimap.insert(std::make_pair(<kbd>'a'</kbd>,10));
  mymultimap.insert(std::make_pair(<kbd>'b'</kbd>,121));
  mymultimap.insert(std::make_pair(<kbd>'c'</kbd>,1001));
  mymultimap.insert(std::make_pair(<kbd>'c'</kbd>,2002));
  mymultimap.insert(std::make_pair(<kbd>'d'</kbd>,11011));
  mymultimap.insert(std::make_pair(<kbd>'e'</kbd>,44));

  itlow = mymultimap.lower_bound (<kbd>'b'</kbd>);  <cite>// itlow points to b</cite>
  itup = mymultimap.upper_bound (<kbd>'d'</kbd>);   <cite>// itup points to e (not d)</cite>

  <cite>// print range [itlow,itup):</cite>
  <var>for</var> (it=itlow; it!=itup; ++it)
    std::cout &lt;&lt; (*it).first &lt;&lt; <kbd>" =&gt; "</kbd> &lt;&lt; (*it).second &lt;&lt; <kbd>'\n'</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>b =&gt; 121
c =&gt; 1001
c =&gt; 2002
d =&gt; 11011
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Logarithmic in <a href="/multimap::size">size</a>.<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
No changes.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The container is accessed (neither the const nor the non-const versions modify the container).<br>
No mapped values are accessed: concurrently accessing or modifying elements is safe.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
<b>Strong guarantee:</b> if an exception is thrown, there are no changes in the container.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/map/multimap/lower_bound/"><b>multimap::lower_bound</b></a></dt><dd>Return iterator to lower bound <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/map/multimap/equal_range/"><b>multimap::equal_range</b></a></dt><dd>Get range of equal elements <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/map/multimap/find/"><b>multimap::find</b></a></dt><dd>Get iterator to element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/map/multimap/count/"><b>multimap::count</b></a></dt><dd>Count elements with a specific key <span class="typ">(public member function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
