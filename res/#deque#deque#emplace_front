<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;deque&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/deque/deque/">deque</a>::emplace_front<span class="C_ico cpp11warning" title="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it." alt="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it."></span></h1>
<div class="C_prototype"><pre>template &lt;class... Args&gt;  void emplace_front (Args&amp;&amp;... args);</pre></div><div id="I_description">Construct and insert element at beginning</div>
<section id="description">
Inserts a new element at the beginning of the <a href="/deque">deque</a>, right before its current first element. This new element is constructed in place using <i>args</i> as the arguments for its construction.<br>
<br>
This effectively increases the container <a href="/deque::size">size</a> by one.<br>
<br>
The element is constructed in-place by calling <a href="/allocator_traits::construct">allocator_traits::construct</a> with <i>args</i> forwarded.<br>
<br>
A similar member function exists, <a href="/deque::push_front">push_front</a>, which either copies or moves an existing object into the container.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>args</dt>
<dd>Arguments forwarded to construct the new element.</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
none.<br>
<br>
The storage for the new element is allocated using <tt>allocator_traits&lt;allocator_type&gt;::construct()</tt>, which may throw exceptions on failure (for the default <a href="/allocator">allocator</a>, <tt>bad_alloc</tt> is thrown if the allocation request does not succeed).<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br></code></pre></td>
<td class="source"><pre><code><cite>// deque::emplace_from</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;deque&gt;</dfn>

<var>int</var> main ()
{
  std::deque&lt;<var>int</var>&gt; mydeque = {10,20,30};

  mydeque.emplace_front (111);
  mydeque.emplace_front (222);

  std::cout &lt;&lt; <kbd>"mydeque contains:"</kbd>;
  <var>for</var> (<var>auto</var>&amp; x: mydeque)
    std::cout &lt;&lt; <kbd>' '</kbd> &lt;&lt; x;
  std::cout &lt;&lt; <kbd>'\n'</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>mydeque contains: 222 111 10 20 30
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Constant.<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
All iterators related to this container are invalidated, but pointers and references remain valid, referring to the same elements they were referring to before the call.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The container is modified.<br>
No contained elements are accessed by the call: concurrently accessing or modifying them is safe (although see <i>iterator validity</i> above).<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
<b>Strong guarantee:</b> if an exception is thrown, there are no changes in the container.<br>
If <a href="/allocator_traits::construct">allocator_traits::construct</a> is not supported with the appropriate arguments, it causes <i>undefined behavior</i>.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/deque/deque/emplace_back/"><b>deque::emplace_back</b></a></dt><dd>Construct and insert element at the end <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/deque/deque/push_front/"><b>deque::push_front</b></a></dt><dd>Insert element at beginning <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/deque/deque/emplace/"><b>deque::emplace</b></a></dt><dd>Construct and insert element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/deque/deque/erase/"><b>deque::erase</b></a></dt><dd>Erase elements <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/deque/deque/assign/"><b>deque::assign</b></a></dt><dd>Assign container content <span class="typ">(public member function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
