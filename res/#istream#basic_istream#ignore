<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;istream&gt; &lt;iostream&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/istream/basic_istream/">basic_istream</a>::ignore</h1>
<div class="C_prototype"><pre>basic_istream&amp; ignore (streamsize n = 1, int_type delim = traits_type::eof());</pre></div><div id="I_description">Extract and discard characters</div>
<section id="description">
Extracts characters from the input sequence and discards them, until either <var>n</var> characters have been extracted, or one compares equal to <var>delim</var>.<br>
<br>
The function also stops extracting characters if the <i>end-of-file</i> is reached. If this is reached prematurely (before either extracting <var>n</var> characters or finding <var>delim</var>), the function sets the <samp><a href="/ios_base::eofbit">eofbit</a></samp> flag.<br>
<br>
Internally, the function accesses the input sequence by first constructing a <samp><a href="/basic_istream::sentry">sentry</a></samp> object (with <var>noskipws</var> set to <code>true</code>). Then (if <samp><a href="/basic_ios::good">good</a></samp>), it extracts characters from its associated <i><a href="/basic_streambuf">stream buffer</a></i> object as if calling its member functions <samp><a href="/basic_streambuf::sbumpc">sbumpc</a></samp> or <samp><a href="/basic_streambuf::sgetc">sgetc</a></samp>, and finally destroys the <samp><a href="/basic_istream::sentry">sentry</a></samp> object before returning.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>n</dt>
<dd>Maximum number of characters to extract (and ignore).<br>
If this is exactly <code><a href="/numeric_limits">numeric_limits</a>&lt;<a href="/streamsize">streamsize</a>&gt;::max()</code>, there is no limit: As many characters are extracted as needed until <var>delim</var> (or the <i>end-of-file</i>) is found.<br>
<samp><a href="/streamsize">streamsize</a></samp> is a signed integral type.<br>
</dd>
<dt>delim</dt>
<dd>Delimiting character: The function stops extracting characters as soon as an extracted character compares equal to this (using <samp><a href="/char_traits::eq">traits_type::eq</a></samp>).<br>
If this is the <i><a href="/char_traits::eof">end-of-file</a></i> value (<code><a href="/char_traits::eof">traits_type::eof()</a></code>), no character will compare equal, and thus exactly <var>n</var> characters will be discarded (unless the function fails or the <i>end-of-file</i> is reached).<br>
Member type <samp>int_type</samp> is an integral type able to represent any valid character value or the special <i><a href="/char_traits::eof">end-of-file</a></i> value.<br>
</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
The <samp><a href="/basic_istream">basic_istream</a></samp> object (<code>*this</code>).<br>
<br>
Errors are signaled by modifying the <i><a href="/basic_ios::rdstate">internal state flags</a></i>:<br>
<table class="boxed">
<tr><th>flag</th><th>error</th></tr>
<tr><td><samp><a href="/ios_base::eofbit">eofbit</a></samp></td><td>The function stopped extracting characters because the input sequence has no more characters available (<i>end-of-file</i> reached).</td></tr>
<tr><td><samp><a href="/ios_base::failbit">failbit</a></samp></td><td>The construction of <samp><a href="/basic_istream::sentry">sentry</a></samp> failed (such as when the <i><a href="/basic_ios::rdstate">stream state</a></i> was not <samp><a href="/basic_ios::good">good</a></samp> before the call).</td></tr>
<tr><td><samp><a href="/ios_base::badbit">badbit</a></samp></td><td>Error on stream (such as when this function catches an exception thrown by an internal operation).<br>
When set, the integrity of the stream may have been affected.</td></tr>
</table>
Multiple flags may be set by a single operation.<br>
<br>
If the operation sets an <i><a href="/basic_ios::rdstate">internal state flag</a></i> that was registered with member <samp><a href="/basic_ios::exceptions">exceptions</a></samp>, the function throws an exception of member type <samp><a href="/ios_base::failure">failure</a></samp>.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br></code></pre></td>
<td class="source"><pre><code><cite>// istream::ignore example</cite>
<dfn>#include &lt;iostream&gt;     </dfn><cite>// std::cin, std::cout</cite>

<var>int</var> main () {
  <var>char</var> first, last;

  std::cout &lt;&lt; <kbd>"Please, enter your first name followed by your surname: "</kbd>;

  first = std::cin.get();     <cite>// get one character</cite>
  std::cin.ignore(256,<kbd>' '</kbd>);   <cite>// ignore until space</cite>

  last = std::cin.get();      <cite>// get one character</cite>

  std::cout &lt;&lt; <kbd>"Your initials are "</kbd> &lt;&lt; first &lt;&lt; last &lt;&lt; <kbd>'\n'</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Possible output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>Please, enter your first name followed by your surname: John Smith
Your initials are JS
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="access">
<h3>Data races</h3>
Modifies the stream object.<br>
Concurrent access to the same stream object may cause data races, except for the standard stream objects <samp><a href="/cin">cin</a></samp> and <samp><a href="/wcin">wcin</a></samp> when these are <i><a href="/ios_base::sync_with_stdio">synchronized with stdio</a></i> (in this case, no data races are initiated, although no guarantees are given on the order in which extracted characters are attributed to threads).<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
<b>Basic guarantee:</b> if an exception is thrown, the object is in a valid state.<br>
It throws an exception of member type <samp><a href="/ios_base::failure">failure</a></samp> if the resulting <i>error state flag</i> is not <samp><a href="/ios_base::goodbit">goodbit</a></samp> and member <samp><a href="/basic_ios::exceptions">exceptions</a></samp> was set to throw for that state.<br>
Any exception thrown by an internal operation is caught and handled by the function, setting <samp><a href="/ios_base::badbit">badbit</a></samp>. If <samp><a href="/ios_base::badbit">badbit</a></samp> was set on the last call to <samp><a href="/basic_ios::exceptions">exceptions</a></samp>, the function rethrows the caught exception.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/istream/basic_istream/peek/"><b>basic_istream::peek</b></a></dt><dd>Peek next character <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/istream/basic_istream/get/"><b>basic_istream::get</b></a></dt><dd>Get characters <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/istream/basic_istream/getline/"><b>basic_istream::getline</b></a></dt><dd>Get line <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/istream/basic_istream/read/"><b>basic_istream::read</b></a></dt><dd>Read block of data <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/istream/basic_istream/readsome/"><b>basic_istream::readsome</b></a></dt><dd>Read data available in buffer <span class="typ">(public member function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
