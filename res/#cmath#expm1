<div id="I_content">
<div class="C_doc">
<div id="I_type">function</div>
<div id="I_file">&lt;cmath&gt; &lt;ctgmath&gt;</div>
<h1>expm1<span class="C_ico cpp11warning" title="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it." alt="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it."></span></h1>
<div class="C_prototype"><div class="C_SwitchCases">
<div title="C99">
<pre>     double expm1  (double x);      float expm1f (float x);long double expm1l (long double x);</pre></div>
<div title="C++11" class="on">
<pre>     double expm1 (double x);      float expm1 (float x);long double expm1 (long double x);     double expm1 (T x);           // additional overloads for integral types</pre></div>
</div>
</div><div id="I_description">Compute exponential minus one</div>
<section id="description">
Returns <i>e</i> raised to the power <var>x</var> minus one: <code>e<sup>x</sup>-1</code>.<br>
<br>
For small magnitude values of <var>x</var>, <samp>expm1</samp> may be more accurate than <code><a href="/exp">exp</a>(x)-1</code>.<br>
<br>
<div class="C_SwitchCases">
<div title="C99">
Header <samp><a href="/&lt;ctgmath&gt;">&lt;tgmath.h&gt;</a></samp> provides a type-generic macro version of this function.<br>
</div>
<div title="C++11">
<i>Additional overloads</i> are provided in this header (<code><a href="/&lt;cmath&gt;">&lt;cmath&gt;</a></code>) for the <a href="/is_integral">integral types</a>: These overloads effectively cast <var>x</var> to a <code>double</code> before calculations (defined for <samp>T</samp> being any <i><a href="/is_integral">integral type</a></i>).<br>
</div>
</div>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>x</dt>
<dd>Value of the exponent.</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
<i>e</i> raised to the power of <var>x</var>, minus one.<br>
If the magnitude of the result is too large to be represented by a value of the return type, the function returns <samp><a href="/HUGE_VAL">HUGE_VAL</a></samp> (or <samp><a href="/HUGE_VALF">HUGE_VALF</a></samp> or <samp><a href="/HUGE_VALL">HUGE_VALL</a></samp>) with the proper sign, and an overflow <i>range error</i> occurs:<br>
<br>
If an overflow <i>range error</i> occurs:<br>
- And <samp><a href="/math_errhandling">math_errhandling</a></samp> has <samp><a href="/MATH_ERRNO">MATH_ERRNO</a></samp> set: the global variable <samp><a href="/errno">errno</a></samp> is set to <samp><a href="/ERANGE">ERANGE</a></samp>.<br>
- And <samp><a href="/math_errhandling">math_errhandling</a></samp> has <samp><a href="/MATH_ERREXCEPT">MATH_ERREXCEPT</a></samp> set: <samp><a href="/FE_OVERFLOW">FE_OVERFLOW</a></samp> is raised.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br></code></pre></td>
<td class="source"><pre><code><cite>/* expm1 example */</cite>
<dfn>#include &lt;stdio.h&gt;      </dfn><cite>/* printf */</cite><dfn></dfn>
<dfn>#include &lt;math.h&gt;       </dfn><cite>/* expm1 */</cite><dfn></dfn>

<var>int</var> main ()
{
  <var>double</var> param, result;
  param = 1.0;
  result = expm1 (param);
  printf (<kbd>"expm1 (%f) = %f.\n"</kbd>, param, result );
  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>
expm1 (1.000000) = 1.718282.
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/cmath/exp/"><b>exp</b></a></dt><dd>Compute exponential function <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/log1p/"><b>log1p</b></a></dt><dd>Compute logarithm plus one <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/pow/"><b>pow</b></a></dt><dd>Raise to power <span class="typ">(function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
