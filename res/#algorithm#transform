<div id="I_content">
<div class="C_doc">
<div id="I_type">function template</div>
<div id="I_file">&lt;algorithm&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span>transform</h1>
<div class="C_prototype"><table><tr class="odd"><th>unary operation(1)</th><td><pre>template &lt;class InputIterator, class OutputIterator, class UnaryOperation&gt;  OutputIterator transform (InputIterator first1, InputIterator last1,                            OutputIterator result, UnaryOperation op);</pre></td></tr><tr class="even"><th>binary operation(2)</th><td><pre>template &lt;class InputIterator1, class InputIterator2,          class OutputIterator, class BinaryOperation&gt;  OutputIterator transform (InputIterator1 first1, InputIterator1 last1,                            InputIterator2 first2, OutputIterator result,                            BinaryOperation binary_op);</pre></td></tr></table></div><div id="I_description">Transform range</div>
<section id="description">
Applies an operation sequentially to the elements of one (1) or two (2) ranges and stores the result in the range that begins at <var>result</var>.<br>
<br>
<dl>
<dt>(1) unary operation</dt>
<dd>Applies <var>op</var> to each of the elements in the range <code>[first1,last1)</code> and stores the value returned by each operation in the range that begins at <var>result</var>.</dd>
<dt>(2) binary operation</dt>
<dd>Calls <var>binary_op</var> using each of the elements in the range <code>[first1,last1)</code> as first argument, and the respective argument in the range that begins at <var>first2</var> as second argument. The value returned by each call is stored in the range that begins at <var>result</var>.</dd>
</dl>
<br>
The behavior of this function template is equivalent to:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br></code></pre></td>
<td class="source"><pre><code><var>template</var> &lt;<var>class</var> InputIterator, <var>class</var> OutputIterator, <var>class</var> UnaryOperator&gt;
  OutputIterator transform (InputIterator first1, InputIterator last1,
                            OutputIterator result, UnaryOperator op)
{
  <var>while</var> (first1 != last1) {
    *result = op(*first1);  <cite>// or: *result=binary_op(*first1,*first2++);</cite>
    ++result; ++first1;
  }
  <var>return</var> result;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
The function allows for the destination range to be the same as one of the input ranges to make transformations <var>in place</var>.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>first1, last1</dt>
<dd><a href="/InputIterator">Input iterators</a> to the initial and final positions of the first sequence. The range used is <code>[first1,last1)</code>, which contains all the elements between <var>first1</var> and <var>last1</var>, including the element pointed to by <var>first1</var> but not the element pointed to by <var>last1</var>.</dd>
<dt>first2</dt>
<dd><a href="/InputIterator">Input iterator</a> to the initial position of the second range. The range includes as many elements as <code>[first1,last1)</code>.</dd>
<dt>result</dt>
<dd><a href="/OutputIterator">Output iterator</a> to the initial position of the range where the operation results are stored. The range includes as many elements as <code>[first1,last1)</code>.</dd>
<dt>op</dt>
<dd>Unary function that accepts one element of the type pointed to by <samp>InputIterator</samp> as argument, and returns some result value convertible to the type pointed to by <samp>OutputIterator</samp>.<br>
This can either be a function pointer or a function object.</dd>
<dt>binary_op</dt>
<dd>Binary function that accepts two elements as argument (one of each of the two sequences), and returns some result value convertible to the type pointed to by <samp>OutputIterator</samp>.<br>
This can either be a function pointer or a function object.</dd>
</dl>
<br>
Neither <var>op</var> nor <var>binary_op</var> should directly modify the elements passed as its arguments: These are indirectly modified by the algorithm (using the return value) if the same range is specified for <i>result</i>.<br>
</section>
<br>
<section id="return">
<h3>Return value</h3>
An iterator pointing to the element that follows the last element written in the <var>result</var> sequence.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br></code></pre></td>
<td class="source"><pre><code><cite>// transform algorithm example</cite>
<dfn>#include &lt;iostream&gt;     </dfn><cite>// std::cout</cite>
<dfn>#include &lt;algorithm&gt;    </dfn><cite>// std::transform</cite>
<dfn>#include &lt;vector&gt;       </dfn><cite>// std::vector</cite>
<dfn>#include &lt;functional&gt;   </dfn><cite>// std::plus</cite>

<var>int</var> op_increase (<var>int</var> i) { <var>return</var> ++i; }

<var>int</var> main () {
  std::vector&lt;<var>int</var>&gt; foo;
  std::vector&lt;<var>int</var>&gt; bar;

  <cite>// set some values:</cite>
  <var>for</var> (<var>int</var> i=1; i&lt;6; i++)
    foo.push_back (i*10);                         <cite>// foo: 10 20 30 40 50</cite>

  bar.resize(foo.size());                         <cite>// allocate space</cite>

  std::transform (foo.begin(), foo.end(), bar.begin(), op_increase);
                                                  <cite>// bar: 11 21 31 41 51</cite>

  <cite>// std::plus adds together its two arguments:</cite>
  std::transform (foo.begin(), foo.end(), bar.begin(), foo.begin(), std::plus&lt;<var>int</var>&gt;());
                                                  <cite>// foo: 21 41 61 81 101</cite>

  std::cout &lt;&lt; <kbd>"foo contains:"</kbd>;
  <var>for</var> (std::vector&lt;<var>int</var>&gt;::iterator it=foo.begin(); it!=foo.end(); ++it)
    std::cout &lt;&lt; <kbd>' '</kbd> &lt;&lt; *it;
  std::cout &lt;&lt; <kbd>'\n'</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>foo contains: 21 41 61 81 101
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Linear in the <a href="/distance">distance</a> between <var>first1</var> and <var>last1</var>: Performs one assignment and one application of <var>op</var> (or <var>binary_op</var>) per element.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The objects in the range <code>[first1,last1)</code> (and eventually those in the range beginning at <var>first2</var>) are accessed (each object is accessed exactly once).<br>
The objects in the range beginning at <var>result</var> are modified.<br>
</section>
<br>
<section id="exceptions">
<h3>Exceptions</h3>
Throws if any of the function calls, the assignments or the operations on iterators throws.<br>
Note that invalid arguments cause <i>undefined behavior</i>.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/algorithm/for_each/"><b>for_each</b></a></dt><dd>Apply function to range <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/copy/"><b>copy</b></a></dt><dd>Copy range of elements <span class="typ">(function template)</span></dd></dl>
<div id="CH_bb"></div></div></div>
