<div id="I_content">
<div class="C_doc">
<div id="I_type">function</div>
<div id="I_file">&lt;cstring&gt;</div>
<h1>strtok</h1>
<div class="C_prototype"><pre>char * strtok ( char * str, const char * delimiters );</pre></div><div id="I_description">Split string into tokens</div>
<section id="description">
A sequence of calls to this function split <i>str</i> into tokens, which are sequences of contiguous characters separated by any of the characters that are part of <i>delimiters</i>.<br>
<br>
On a first call, the function expects a C string as argument for <i>str</i>, whose first character is used as the starting location to scan for tokens. In subsequent calls, the function expects a null pointer and uses the position right after the end of the last token as the new starting location for scanning.<br>
<br>
To determine the beginning and the end of a token, the function first scans from the starting location for the first character <strong>not</strong> contained in <i>delimiters</i> (which becomes the <i>beginning of the token</i>). And then scans starting from this <i>beginning of the token</i> for the first character contained in <i>delimiters</i>, which becomes the <i>end of the token</i>. The scan also stops if the terminating <i>null character</i> is found.<br>
<br>
This <i>end of the token</i> is automatically replaced by a null-character, and the <i>beginning of the token</i> is returned by the function.<br>
<br>
Once the terminating null character of <i>str</i> is found in a call to <i>strtok</i>, all subsequent calls to this function (with a null pointer as the first argument) return a null pointer.<br>
<br>
The point where the last token was found is kept internally by the function to be used on the next call (particular library implementations are not required to avoid data races).<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>str</dt>
<dd>C string to truncate.<br>
Notice that this string is modified by being broken into smaller strings (tokens).<br>
Alternativelly, a null pointer may be specified, in which case the function continues scanning where a previous successful call to the function ended.</dd>
<dt>delimiters</dt>
<dd>C string containing the delimiter characters.<br>
These can be different from one call to another.</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
If a token is found, a pointer to the beginning of the token.<br>
Otherwise, a <i>null pointer</i>.<br>
A <i>null pointer</i> is always returned when the end of the string (i.e., a null character) is reached in the string being scanned.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br></code></pre></td>
<td class="source"><pre><code><cite>/* strtok example */</cite>
<dfn>#include &lt;stdio.h&gt;</dfn>
<dfn>#include &lt;string.h&gt;</dfn>

<var>int</var> main ()
{
  <var>char</var> str[] =<kbd>"- This, a sample string."</kbd>;
  <var>char</var> * pch;
  printf (<kbd>"Splitting string \"%s\" into tokens:\n"</kbd>,str);
  pch = strtok (str,<kbd>" ,.-"</kbd>);
  <var>while</var> (pch != NULL)
  {
    printf (<kbd>"%s\n"</kbd>,pch);
    pch = strtok (NULL, <kbd>" ,.-"</kbd>);
  }
  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>
Splitting string "- This, a sample string." into tokens:
This
a
sample
string
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/cstring/strcspn/"><b>strcspn</b></a></dt><dd>Get span until character in string <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cstring/strpbrk/"><b>strpbrk</b></a></dt><dd>Locate characters in string <span class="typ">(function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
