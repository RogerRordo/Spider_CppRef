<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;deque&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/deque/deque/">deque</a>::shrink_to_fit<span class="C_ico cpp11warning" title="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it." alt="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it."></span></h1>
<div class="C_prototype"><pre>void shrink_to_fit();</pre></div><div id="I_description">Shrink to fit</div>
<section id="description">
Requests the container to reduce its memory usage to fit its <a href="/deque::size">size</a>.<br>
<br>
A <a href="/deque">deque</a> container may have more memory allocated than needed to hold its current elements: this is because most libraries implement <a href="/deque">deque</a> as a dynamic array that can keep the allocated space of removed elements or allocate additional capacity in advance to allow for faster insertion operations.<br>
<br>
This function requests that the memory usage is adapted to the current <a href="/deque::size">size</a> of the container, but the request is non-binding, and the container implementation is free to optimize its memory usage otherwise.<br>
<br>
Note that this function does not change the <a href="/deque::size">size</a> of the container (for that, see <samp><a href="/deque::resize">resize</a></samp> instead).<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
none<br>
</section>
<br>
<section id="return">
<h3>Return value</h3>
none<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br></code></pre></td>
<td class="source"><pre><code><cite>// deque::shrink_to_fit</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;deque&gt;</dfn>

<var>int</var> main ()
{
  std::deque&lt;<var>int</var>&gt; mydeque (100);
  std::cout &lt;&lt; <kbd>"1. size of mydeque: "</kbd> &lt;&lt; mydeque.size() &lt;&lt; <kbd>'\n'</kbd>;

  mydeque.resize(10);
  std::cout &lt;&lt; <kbd>"2. size of mydeque: "</kbd> &lt;&lt; mydeque.size() &lt;&lt; <kbd>'\n'</kbd>;

  mydeque.shrink_to_fit();

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>1. size of mydeque: 100
2. size of mydeque: 10
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
At most, linear in the <a href="/deque::size">container size</a>.<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
No changes.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The container is modified.<br>
No contained elements are accessed: concurrently accessing or modifying them is safe.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
<b>Basic guarantee:</b> if an exception is thrown, the container is in a valid state.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/deque/deque/size/"><b>deque::size</b></a></dt><dd>Return size <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/deque/deque/resize/"><b>deque::resize</b></a></dt><dd>Change size <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/deque/deque/clear/"><b>deque::clear</b></a></dt><dd>Clear content <span class="typ">(public member function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
