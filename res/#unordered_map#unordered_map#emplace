<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;unordered_map&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/unordered_map/unordered_map/">unordered_map</a>::emplace<span class="C_ico cpp11warning" title="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it." alt="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it."></span></h1>
<div class="C_prototype"><pre>template &lt;class... Args&gt;pair&lt;iterator, bool&gt; emplace ( Args&amp;&amp;... args );</pre></div><div id="I_description">Construct and insert element</div>
<section id="description">
Inserts a new element in the <a href="/unordered_map">unordered_map</a> if its key is unique. This new element is constructed in place using <i>args</i> as the arguments for the element's constructor.<br>
<br>
The insertion only takes place if no element in the container has a key equivalent to the one being emplaced (keys in an <a href="/unordered_map">unordered_map</a> are unique).<br>
<br>
If inserted, this effectively increases the container <a href="/unordered_map::size">size</a> by one.<br>
<br>
A similar member function exists, <a href="/unordered_map::insert">insert</a>, which either copies or moves existing objects into the container.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>args</dt>
<dd>
<div class="C_SwitchCases">
<div title="C++11">
Arguments used to construct a new object of the <i>mapped type</i> for the inserted element.<br>
</div>
<div title="C++14">
Arguments forwarded to construct the new element (of type <code><a href="/pair">pair</a>&lt;const key_type, mapped_type&gt;</code>).<br>
This can be one of:<br>
- Two arguments: one for the <i>key</i>, the other for the <i>mapped value</i>.<br>
- A single argument of a <code><a href="/pair">pair</a></code> type with a value for the <i>key</i> as first member, and a value for the <i>mapped value</i> as second.<br>
- <samp><a href="/piecewise_construct">piecewise_construct</a></samp> as first argument, and two additional arguments with <a href="/tuple">tuples</a> to be forwarded as arguments for the <i>key value</i> and for the <i>mapped value</i> respectivelly.<br>
See <samp><a href="/pair::pair">pair::pair</a></samp> for more info.<br>
</div>
</div>
</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
If the insertion takes place (because no other element existed with the same key), the function returns a <a href="/pair">pair</a> object, whose first component is an iterator to the inserted element, and whose second component is <tt>true</tt>.<br>
<br>
Otherwise, the <a href="/pair">pair</a> object returned has as first component an iterator pointing to the element in the container with the same key, and <tt>false</tt> as its second component.<br>
<br>
Member type <tt>iterator</tt> is a <a href="/ForwardIterator">forward iterator</a> type.<br>
<br>
The storage for the new element is allocated using <tt>allocator_traits&lt;allocator_type&gt;::construct()</tt>, which may throw exceptions on failure (for the default <a href="/allocator">allocator</a>, <tt>bad_alloc</tt> is thrown if the allocation request does not succeed).<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br></code></pre></td>
<td class="source"><pre><code><cite>// unordered_map::emplace</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>
<dfn>#include &lt;unordered_map&gt;</dfn>

<var>int</var> main ()
{
  std::unordered_map&lt;std::string,std::string&gt; mymap;

  mymap.emplace (<kbd>"NCC-1701"</kbd>, <kbd>"J.T. Kirk"</kbd>);
  mymap.emplace (<kbd>"NCC-1701-D"</kbd>, <kbd>"J.L. Picard"</kbd>);
  mymap.emplace (<kbd>"NCC-74656"</kbd>, <kbd>"K. Janeway"</kbd>);

  std::cout &lt;&lt; <kbd>"mymap contains:"</kbd> &lt;&lt; std::endl;
  <var>for</var> (<var>auto</var>&amp; x: mymap)
    std::cout &lt;&lt; x.first &lt;&lt; <kbd>": "</kbd> &lt;&lt; x.second &lt;&lt; std::endl;

  std::cout &lt;&lt; std::endl;
  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Possible output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>mymap contains:
NCC-1701: J.T. Kirk
NCC-1701-D: J.L. Picard
NCC-74656: K. Janeway
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Average case: constant.<br>
Worst case: linear in container size.<br>
May trigger a <a href="/unordered_map::rehash">rehash</a> (not included).<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
On most cases, all iterators in the container remain valid after the insertion. The only exception being when the growth of the container forces a rehash. In this case, all iterators in the container are invalidated.<br>
<br>
A rehash is forced if the new container <a href="/unordered_map::size">size</a> after the insertion operation would increase above its capacity threshold (calculated as the container's <a href="/unordered_map::bucket_count">bucket_count</a> multiplied by its <a href="/unordered_map::max_load_factor">max_load_factor</a>).<br>
<br>
References to elements in the <a href="/unordered_map">unordered_map</a> container remain valid in all cases, even after a rehash.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/unordered_map/unordered_map/insert/"><b>unordered_map::insert</b></a></dt><dd>Insert elements <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_map/unordered_map/operator[]/"><b>unordered_map::operator[]</b></a></dt><dd>Access element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_map/unordered_map/at/"><b>unordered_map::at</b></a></dt><dd>Access element <span class="typ">(public member function)</span></dd></dl>
</section>
<div id="CH_bb"></div></div></div>
