<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;string&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/string/string/">string</a>::insert</h1>
<div class="C_prototype"><div class="C_SwitchCases">
<div title="C++98">
<table><tr class="odd"><th>string (1)</th><td><pre> string&amp; insert (size_t pos, const string&amp; str);</pre></td></tr><tr class="even"><th>substring (2)</th><td><pre> string&amp; insert (size_t pos, const string&amp; str, size_t subpos, size_t sublen);</pre></td></tr><tr class="odd"><th>c-string (3)</th><td><pre> string&amp; insert (size_t pos, const char* s);</pre></td></tr><tr class="even"><th>buffer (4)</th><td><pre> string&amp; insert (size_t pos, const char* s, size_t n);</pre></td></tr><tr class="odd"><th>fill (5)</th><td><pre> string&amp; insert (size_t pos, size_t n, char c);    void insert (iterator p, size_t n, char c);</pre></td></tr><tr class="even"><th>single character (6)</th><td><pre>iterator insert (iterator p, char c);</pre></td></tr><tr class="odd"><th>range (7)</th><td><pre>template &lt;class InputIterator&gt;   void insert (iterator p, InputIterator first, InputIterator last);</pre></td></tr></table></div>
<div title="C++11" class="on">
<table><tr class="even"><th>string (1)</th><td><pre> string&amp; insert (size_t pos, const string&amp; str);</pre></td></tr><tr class="odd"><th>substring (2)</th><td><pre> string&amp; insert (size_t pos, const string&amp; str, size_t subpos, size_t sublen);</pre></td></tr><tr class="even"><th>c-string (3)</th><td><pre> string&amp; insert (size_t pos, const char* s);</pre></td></tr><tr class="odd"><th>buffer (4)</th><td><pre> string&amp; insert (size_t pos, const char* s, size_t n);</pre></td></tr><tr class="even"><th>fill (5)</th><td><pre> string&amp; insert (size_t pos,   size_t n, char c);iterator insert (const_iterator p, size_t n, char c);</pre></td></tr><tr class="odd"><th>single character (6)</th><td><pre>iterator insert (const_iterator p, char c);</pre></td></tr><tr class="even"><th>range (7)</th><td><pre>template &lt;class InputIterator&gt;iterator insert (iterator p, InputIterator first, InputIterator last);</pre></td></tr><tr class="odd"><th>initializer list (8)</th><td><pre> string&amp; insert (const_iterator p, initializer_list&lt;char&gt; il);</pre></td></tr></table></div>
<div title="C++14" class="on">
<table><tr class="even"><th>string (1)</th><td><pre> string&amp; insert (size_t pos, const string&amp; str);</pre></td></tr><tr class="odd"><th>substring (2)</th><td><pre> string&amp; insert (size_t pos, const string&amp; str, size_t subpos, size_t sublen = npos);</pre></td></tr><tr class="even"><th>c-string (3)</th><td><pre> string&amp; insert (size_t pos, const char* s);</pre></td></tr><tr class="odd"><th>buffer (4)</th><td><pre> string&amp; insert (size_t pos, const char* s, size_t n);</pre></td></tr><tr class="even"><th>fill (5)</th><td><pre> string&amp; insert (size_t pos,   size_t n, char c);iterator insert (const_iterator p, size_t n, char c);</pre></td></tr><tr class="odd"><th>single character (6)</th><td><pre>iterator insert (const_iterator p, char c);</pre></td></tr><tr class="even"><th>range (7)</th><td><pre>template &lt;class InputIterator&gt;iterator insert (iterator p, InputIterator first, InputIterator last);</pre></td></tr><tr class="odd"><th>initializer list (8)</th><td><pre> string&amp; insert (const_iterator p, initializer_list&lt;char&gt; il);</pre></td></tr></table></div>
</div>
</div><div id="I_description">Insert into string</div>
<section id="description">
Inserts additional characters into the <a href="/string">string</a> right before the character indicated by <i>pos</i> (or <i>p</i>):<br>
<br>
<dl>
<dt>(1) string</dt>
<dd>Inserts a copy of <i>str</i>.</dd>
<dt>(2) substring</dt>
<dd>Inserts a copy of a substring of <i>str</i>. The substring is the portion of <i>str</i> that begins at the character position <i>subpos</i> and spans <i>sublen</i> characters (or until the end of <i>str</i>, if either <i>str</i> is too short or if <i>sublen</i> is <a href="/string::npos">npos</a>).</dd>
<dt>(3) c-string</dt>
<dd>Inserts a copy of the string formed by the null-terminated character sequence (C-string) pointed by <i>s</i>.</dd>
<dt>(4) buffer</dt>
<dd>Inserts a copy of the first <i>n</i> characters in the array of characters pointed by <i>s</i>.</dd>
<dt>(5) fill</dt>
<dd>Inserts <i>n</i> consecutive copies of character <i>c</i>.</dd>
<dt>(6) single character</dt>
<dd>Inserts character <i>c</i>.</dd>
<dt>(7) range</dt>
<dd>Inserts a copy of the sequence of characters in the range <tt>[first,last)</tt>, in the same order.</dd>
<dt>(8) initializer list</dt>
<dd>Inserts a copy of each of the characters in <i>il</i>, in the same order.</dd>
</dl>
<br>
<samp><a href="/size_t">size_t</a></samp> is an unsigned integral type (the same as member type <samp><a href="/string#types">string::size_type</a></samp>).<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>pos</dt>
<dd>Insertion point: The new contents are inserted before the character at position <i>pos</i>.<br>
If this is greater than the object's <a href="/string::length">length</a>, it throws <a href="/out_of_range">out_of_range</a>.<br>
Note: The first character is denoted by a value of <tt>0</tt> (not <tt>1</tt>).<br>
</dd>
<dt>str</dt>
<dd>Another <a href="/string">string</a> object.<br>
</dd>
<dt>subpos</dt>
<dd>Position of the first character in <i>str</i> that is inserted into the object as a substring.<br>
If this is greater than <i>str</i>'s <a href="/string::length">length</a>, it throws <a href="/out_of_range">out_of_range</a>.<br>
Note: The first character in <i>str</i> is denoted by a value of <tt>0</tt> (not <tt>1</tt>).<br>
</dd>
<dt>sublen</dt>
<dd>Length of the substring to be copied (if the string is shorter, as many characters as possible are copied).<br>
A value of <a href="/string::npos">npos</a> indicates all characters until the end of <i>str</i>.</dd>
<dt>s</dt>
<dd>Pointer to an array of characters (such as a <i>c-string</i>).</dd>
<dt>n</dt>
<dd>Number of characters to insert.</dd>
<dt>c</dt>
<dd>Character value.</dd>
<dt>p</dt>
<dd>Iterator pointing to the insertion point: The new contents are inserted before the character pointed by <i>p</i>.<br>
<tt>iterator</tt> is a member type, defined as a <a href="/RandomAccessIterator">random access iterator</a> type that points to characters of the <a href="/string">string</a>.</dd>
<dt>first, last</dt>
<dd><a href="/InputIterator">Input iterators</a> to the initial and final positions in a range. The range used is <tt>[first,last)</tt>, which includes all the characters between <i>first</i> and <i>last</i>, including the character pointed by <i>first</i> but not the character pointed by <i>last</i>.<br>
The function template argument <tt>InputIterator</tt> shall be an <a href="/InputIterator">input iterator</a> type that points to elements of a type convertible to <tt>char</tt>.<br>
</dd>
<dt>il</dt>
<dd>An <a href="/initializer_list">initializer_list</a> object.<br>
These objects are automatically constructed from <i>initializer list</i> declarators.<br>
</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
The signatures returning a reference to <a href="/string">string</a>, return <tt>*this</tt>.<br>
Those returning an <tt>iterator</tt>, return an iterator pointing to the first character inserted.<br>
<br>
Member type <tt>iterator</tt> is a <a href="/RandomAccessIterator">random access iterator</a> type that points to characters of the <a href="/string">string</a>.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br></code></pre></td>
<td class="source"><pre><code><cite>// inserting into a string</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>

<var>int</var> main ()
{
  std::string str=<kbd>"to be question"</kbd>;
  std::string str2=<kbd>"the "</kbd>;
  std::string str3=<kbd>"or not to be"</kbd>;
  std::string::iterator it;

  <cite>// used in the same order as described above:</cite>
  str.insert(6,str2);                 <cite>// to be (the )question</cite>
  str.insert(6,str3,3,4);             <cite>// to be (not )the question</cite>
  str.insert(10,<kbd>"that is cool"</kbd>,8);    <cite>// to be not (that is )the question</cite>
  str.insert(10,<kbd>"to be "</kbd>);            <cite>// to be not (to be )that is the question</cite>
  str.insert(15,1,<kbd>':'</kbd>);               <cite>// to be not to be(:) that is the question</cite>
  it = str.insert(str.begin()+5,<kbd>','</kbd>); <cite>// to be(,) not to be: that is the question</cite>
  str.insert (str.end(),3,<kbd>'.'</kbd>);       <cite>// to be, not to be: that is the question(...)</cite>
  str.insert (it+2,str3.begin(),str3.begin()+3); <cite>// (or )</cite>

  std::cout &lt;&lt; str &lt;&lt; <kbd>'\n'</kbd>;
  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>to be, or not to be: that is the question...
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Unspecified, but generally up to linear in the new <a href="/string::length">string length</a>.<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
Any iterators, pointers and references related to this object may be invalidated.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The object is modified.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
<b>Strong guarantee:</b> if an exception is thrown, there are no changes in the <a href="/string">string</a>.<br>
<br>
If <tt>s</tt> does not point to an array long enough, or if either <i>p</i> or the range specified by <tt>[first,last)</tt> is not valid, it causes <i>undefined behavior</i>.<br>
<br>
If <i>pos</i> is greater than the <a href="/string::length">string length</a>, or if <i>subpos</i> is greater than <i>str</i>'s <a href="/string::length">length</a>, an <a href="/out_of_range">out_of_range</a> exception is thrown.<br>
If the resulting <a href="/string::length">string length</a> would exceed the <a href="/string::max_size">max_size</a>, a <a href="/length_error">length_error</a> exception is thrown.<br>
A <a href="/bad_alloc">bad_alloc</a> exception is thrown if the function needs to allocate storage and fails.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/string/string/append/"><b>string::append</b></a></dt><dd>Append to string <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/string/string/replace/"><b>string::replace</b></a></dt><dd>Replace portion of string <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/string/string/substr/"><b>string::substr</b></a></dt><dd>Generate substring <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/string/string/operator=/"><b>string::operator=</b></a></dt><dd>String assignment <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/string/string/operator+=/"><b>string::operator+=</b></a></dt><dd>Append to string <span class="typ">(public member function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
