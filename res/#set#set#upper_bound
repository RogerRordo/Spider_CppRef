<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;set&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/set/set/">set</a>::upper_bound</h1>
<div class="C_prototype"><div class="C_SwitchCases">
<div title="C++98">
<pre>iterator upper_bound (const value_type&amp; val) const;</pre></div>
<div title="C++11" class="on">
<pre>      iterator upper_bound (const value_type&amp; val);const_iterator upper_bound (const value_type&amp; val) const;</pre></div>
</div>
</div><div id="I_description">Return iterator to upper bound</div>
<section id="description">
Returns an iterator pointing to the first element in the container which is considered to go after <i>val</i>.<br>
<br>
The function uses its internal <a href="/set::key_comp">comparison object</a> (<a href="/set::key_comp">key_comp</a>) to determine this, returning an iterator to the first element for which <tt>key_comp(val,element)</tt> would return <tt>true</tt>.<br>
<br>
If the <a href="/set">set</a> class is instantiated with the default comparison type (<a href="/less">less</a>), the function returns an iterator to the first element that is greater than <i>val</i>.<br>
<br>
A similar member function, <a href="/set::lower_bound">lower_bound</a>, has the same behavior as <tt>upper_bound</tt>, except in the case that the <a href="/set">set</a> contains an element equivalent to <i>val</i>: In this case <a href="/set::lower_bound">lower_bound</a> returns an iterator pointing to that element, whereas <tt>upper_bound</tt> returns an iterator pointing to the next element.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>val</dt>
<dd>Value to compare.<br>
Member type <tt>value_type</tt> is the type of the elements in the container, defined in <a href="/set">set</a> as an alias of its first template parameter (<tt>T</tt>).</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
An iterator to the the first element in the container which is considered to go after <i>val</i>, or <a href="/set::end">set::end</a> if no elements are considered to go after <i>val</i>.<br>
<br>
Member types <tt>iterator</tt> and <tt>const_iterator</tt> are <a href="/BidirectionalIterator">bidirectional iterator</a> types pointing to elements.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br></code></pre></td>
<td class="source"><pre><code><cite>// set::lower_bound/upper_bound</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;set&gt;</dfn>

<var>int</var> main ()
{
  std::set&lt;<var>int</var>&gt; myset;
  std::set&lt;<var>int</var>&gt;::iterator itlow,itup;

  <var>for</var> (<var>int</var> i=1; i&lt;10; i++) myset.insert(i*10); <cite>// 10 20 30 40 50 60 70 80 90</cite>

  itlow=myset.lower_bound (30);                <cite>//       ^</cite>
  itup=myset.upper_bound (60);                 <cite>//                   ^</cite>

  myset.erase(itlow,itup);                     <cite>// 10 20 70 80 90</cite>

  std::cout &lt;&lt; <kbd>"myset contains:"</kbd>;
  <var>for</var> (std::set&lt;<var>int</var>&gt;::iterator it=myset.begin(); it!=myset.end(); ++it)
    std::cout &lt;&lt; <kbd>' '</kbd> &lt;&lt; *it;
  std::cout &lt;&lt; <kbd>'\n'</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Notice that <tt>lower_bound(30)</tt> returns an iterator to <tt>30</tt>, whereas <tt>upper_bound(60)</tt> returns an iterator to <tt>70</tt>.<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>myset contains: 10 20 70 80 90
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Logarithmic in <a href="/set::size">size</a>.<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
No changes.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The container is accessed (neither the const nor the non-const versions modify the container).<br>
Concurrently accessing the elements of a <a href="/set">set</a> is safe.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
<b>Strong guarantee:</b> if an exception is thrown, there are no changes in the container.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/set/set/lower_bound/"><b>set::lower_bound</b></a></dt><dd>Return iterator to lower bound <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/set/set/equal_range/"><b>set::equal_range</b></a></dt><dd>Get range of equal elements <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/set/set/find/"><b>set::find</b></a></dt><dd>Get iterator to element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/set/set/count/"><b>set::count</b></a></dt><dd>Count elements with a specific value <span class="typ">(public member function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
