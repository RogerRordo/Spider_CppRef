<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;set&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/set/set/">set</a>::crend<span class="C_ico cpp11warning" title="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it." alt="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it."></span></h1>
<div class="C_prototype"><pre>const_reverse_iterator crend() const noexcept;</pre></div><div id="I_description">Return const_reverse_iterator to reverse end</div>
<section id="description">
Returns a <tt>const_reverse_iterator</tt> pointing to the element that would theoretically precede the first element in the container (which is considered its <i>reverse end</i>).<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
none<br>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
A <tt>const_reverse_iterator</tt> to the <i>reverse end</i> of the sequence.<br>
<br>
Member type <tt>const_reverse_iterator</tt> is a <a href="/BidirectionalIterator">bidirectional iterator</a> type that points to a const element.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br></code></pre></td>
<td class="source"><pre><code><cite>// set::crbegin/crend</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;set&gt;</dfn>

<var>int</var> main ()
{
  std::set&lt;<var>int</var>&gt; myset = {50,20,60,10,25};

  std::cout &lt;&lt; <kbd>"myset backwards:"</kbd>;
  <var>for</var> (<var>auto</var> rit=myset.crbegin(); rit != myset.crend(); ++rit)
    std::cout &lt;&lt; <kbd>' '</kbd> &lt;&lt; *rit;

  std::cout &lt;&lt; <kbd>'\n'</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>myset backwards: 60 50 25 20 10
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Constant.<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
No changes.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The container is accessed.<br>
Concurrently accessing the elements of a <a href="/set">set</a> is safe.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
<b>No-throw guarantee:</b> this member function never throws exceptions.<br>
The copy construction or assignment of the returned iterator is also guaranteed to never throw.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/set/set/end/"><b>set::end</b></a></dt><dd>Return iterator to end <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/set/set/crbegin/"><b>set::crbegin</b></a></dt><dd>Return const_reverse_iterator to reverse beginning <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/set/set/rend/"><b>set::rend</b></a></dt><dd>Return reverse iterator to reverse end <span class="typ">(public member function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
