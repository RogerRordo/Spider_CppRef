<div id="I_content">
<div class="C_doc">
<div id="I_type">function</div>
<div id="I_file">&lt;ios&gt; &lt;iostream&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span>skipws</h1>
<div class="C_prototype"><pre>ios_base&amp; skipws (ios_base&amp; str);</pre></div><div id="I_description">Skip whitespaces</div>
<section id="description">
Sets the <samp>skipws</samp> format flag for the <var>str</var> stream.<br>
<br>
When the <samp>skipws</samp> format flag is set, as many whitespace characters as necessary are read and discarded from the stream until a non-whitespace character is found before. This applies to <em>every</em> formatted input operation performed with <samp><a href="/basic_istream::operator&gt;&gt;">operator&gt;&gt;</a></samp> on the stream.<br>
<br>
Tab spaces, carriage returns and blank spaces are all considered whitespaces (see <samp><a href="/isspace">isspace</a></samp>).<br>
<br>
This flag can be unset with the <samp><a href="/noskipws">noskipws</a></samp> manipulator, forcing extraction operations to consider leading whitepaces as part of the content to be extracted.<br>
<br>
For standard streams, the <samp>skipws</samp> flag <strong>is set</strong> on initialization.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>str</dt>
<dd>Stream object whose <i>format flag</i> is affected.<br>
Because this function is a manipulator, it is designed to be used alone with no arguments in conjunction with the <i>insertion</i> (<code>&lt;&lt;</code>) and <i>extraction</i> (<code>&gt;&gt;</code>) operations on streams (see example below).<br>
</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
Argument <var>str</var>.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br></code></pre></td>
<td class="source"><pre><code><cite>// skipws flag example</cite>
<dfn>#include &lt;iostream&gt;     </dfn><cite>// std::cout, std::skipws, std::noskipws</cite>
<dfn>#include &lt;sstream&gt;      </dfn><cite>// std::istringstream</cite>

<var>int</var> main () {
  <var>char</var> a, b, c;

  std::istringstream iss (<kbd>"  123"</kbd>);
  iss &gt;&gt; std::skipws &gt;&gt; a &gt;&gt; b &gt;&gt; c;
  std::cout &lt;&lt; a &lt;&lt; b &lt;&lt; c &lt;&lt; <kbd>'\n'</kbd>;

  iss.seekg(0);
  iss &gt;&gt; std::noskipws &gt;&gt; a &gt;&gt; b &gt;&gt; c;
  std::cout &lt;&lt; a &lt;&lt; b &lt;&lt; c &lt;&lt; <kbd>'\n'</kbd>;
  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>123
  1</samp></pre></td></tr></table></div>
Notice that in the first set of extractions, the leading spaces were ignored, while in the second they were extracted as valid characters.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
Modifies <var>str</var>. Concurrent access to the same stream object may cause data races.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
<b>Basic guarantee:</b> if an exception is thrown, <var>str</var> is in a valid state.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/ios/noskipws/"><b>noskipws</b></a></dt><dd>Do not skip whitespaces <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/ios/ios_base/flags/"><b>ios_base::flags</b></a></dt><dd>Get/set format flags <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/ios/ios_base/setf/"><b>ios_base::setf</b></a></dt><dd>Set specific format flags <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/ios/ios_base/unsetf/"><b>ios_base::unsetf</b></a></dt><dd>Clear specific format flags <span class="typ">(public member function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
