<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;ios&gt; &lt;iostream&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/ios/basic_ios/">basic_ios</a>::tie</h1>
<div class="C_prototype"><table><tr class="odd"><th>get (1)</th><td><pre>basic_ostream&lt;char_type,traits_type&gt;* tie() const;</pre></td></tr><tr class="even"><th>set (2)</th><td><pre>basic_ostream&lt;char_type,traits_type&gt;* tie (basic_ostream&lt;char_type,traits_type&gt;* tiestr);</pre></td></tr></table></div><div id="I_description">Get/set tied stream</div>
<section id="description">
The first form <i>(1)</i> returns a pointer to the tied output stream.<br>
<br>
The second form <i>(2)</i> ties the object to <var>tiestr</var> and returns a pointer to the stream tied before the call, if any.<br>
<br>
The <dfn>tied stream</dfn> is an output stream object which is <i><a href="/basic_ostream::flush">flushed</a></i> before each i/o operation in this stream object.<br>
<br>
<div class="C_SwitchCases">
<div title="C++98">
By default, <samp><a href="/cin">cin</a></samp> is tied to <samp><a href="/cout">cout</a></samp>, and <samp><a href="/wcin">wcin</a></samp> to <samp><a href="/wcout">wcout</a></samp>. Library implementations may tie other standard streams on initialization.<br>
</div>
<div title="C++11">
By default, the standard narrow streams <samp><a href="/cin">cin</a></samp> and <samp><a href="/cerr">cerr</a></samp> are tied to <samp><a href="/cout">cout</a></samp>, and their wide character counterparts (<samp><a href="/wcin">wcin</a></samp> and <samp><a href="/wcerr">wcerr</a></samp>) to <samp><a href="/wcout">wcout</a></samp>. Library implementations may also tie <samp><a href="/clog">clog</a></samp> and <samp><a href="/wclog">wclog</a></samp>.<br>
</div>
</div>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>tiestr</dt>
<dd>An output stream object.<br>
<samp>char_type</samp> and <samp>traits_type</samp> are member types defined as aliases of the first and second class template parameters, respectively (see <a href="/basic_ios#types">basic_ios types</a>).</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
A pointer to the stream object tied before the call, or a <i>null pointer</i> in case the stream was not tied.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br></code></pre></td>
<td class="source"><pre><code><cite>// redefine tied object</cite>
<dfn>#include &lt;iostream&gt;     </dfn><cite>// std::ostream, std::cout, std::cin</cite>
<dfn>#include &lt;fstream&gt;      </dfn><cite>// std::ofstream</cite>

<var>int</var> main () {
  std::ostream *prevstr;
  std::ofstream ofs;
  ofs.open (<kbd>"test.txt"</kbd>);

  std::cout &lt;&lt; <kbd>"tie example:\n"</kbd>;

  *std::cin.tie() &lt;&lt; <kbd>"This is inserted into cout"</kbd>;
  prevstr = std::cin.tie (&amp;ofs);
  *std::cin.tie() &lt;&lt; <kbd>"This is inserted into the file"</kbd>;
  std::cin.tie (prevstr);

  ofs.close();

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>
tie example:
This is inserted into cout
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="access">
<h3>Data races</h3>
Accesses <i>(1)</i> or modifies <i>(2)</i> the stream object.<br>
Concurrent access to the same stream object may cause data races.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
<b>Basic guarantee:</b> if an exception is thrown, the stream is in a valid state.<br>
</section>
<br>
<section id="see">
<dl class="links"><dt><a href= "/reference/ios/basic_ios/rdbuf/"><b>basic_ios::rdbuf</b></a></dt><dd>Get/set stream buffer <span class="typ">(public member function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
