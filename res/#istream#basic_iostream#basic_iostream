<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;istream&gt; &lt;iostream&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/istream/basic_iostream/">basic_iostream</a>::basic_iostream</h1>
<div class="C_prototype"><div class="C_SwitchCases">
<div title="C++98">
<table><tr class="odd"><th>initialization (1)</th><td><pre>explicit basic_iostream (basic_streambuf&lt;char_type,traits_type&gt;* sb);</pre></td></tr></table></div>
<div title="C++11" class="on">
<table><tr class="even"><th>initialization (1)</th><td><pre>explicit basic_iostream (basic_streambuf&lt;char_type,traits_type&gt;* sb);</pre></td></tr><tr class="odd"><th>copy (2)</th><td><pre>basic_iostream&amp; (const basic_iostream&amp;) = delete;</pre></td></tr><tr class="even"><th>move (3)</th><td><pre>protected: basic_iostream&amp; (basic_iostream&amp;&amp; x);</pre></td></tr></table></div>
</div>
</div><div id="I_description">Construct object</div>
<section id="description">
Constructs a <samp><a href="/basic_iostream">basic_iostream</a></samp> object.<br>
<br>
<dl>
<dt>(1) inititalization constructor</dt>
<dd>Assigns initial values to the components of its base classes by calling the constructors its base classes <samp><a href="/basic_istream::basic_istream">basic_istream</a></samp> and <samp><a href="/basic_ostream::basic_ostream">basic_ostream</a></samp> with <var>sb</var> as argument.<br>
Notice that this calls member <samp><a href="/basic_ios::init">basic_ios::init</a></samp> twice.</dd>
<dt>(2) copy constructor (deleted)</dt>
<dd>Deleted: no copy constructor.</dd>
<dt>(3) move constructor (protected)</dt>
<dd>Acquires the contents of <var>x</var>, except its associated <i><a href="/basic_ios::rdbuf">stream buffer</a></i>: It calls <samp><a href="/basic_istream">basic_istream</a></samp>'s constructor with <code><a href="/move">move</a>(x)</code> as argument, transferring some of <var>x</var>'s internal components to the object: <var>x</var> is left with a <samp><a href="/basic_istream::gcount">gcount</a></samp> value of zero, not <i><a href="/basic_ios::tie">tied</a></i>, and with its associated <i><a href="/basic_ios::rdbuf">stream buffer</a></i> unchanged (all other components of <var>x</var> are in an unspecified but valid state after the call).<br>
</dd>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>sb</dt>
<dd>pointer to a <samp><a href="/basic_streambuf">basic_streambuf</a></samp> object with the same template parameters as the <samp><a href="/basic_iostream">basic_iostream</a></samp> object.<br>
<samp>char_type</samp> and <samp>traits_type</samp> are member types defined as aliases of the first and second class template parameters, respectively (see <a href="/basic_iostream#types">basic_iostream types</a>).</dd>
<dt>x</dt>
<dd>Another <samp><a href="/basic_iostream">basic_iostream</a></samp> of the same type (with the same class template arguments <samp>charT</samp> and <samp>traits</samp>).<br>
</dd>
</dl>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The object pointed by <var>sb</var> may be accessed and/or modified.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
If an exception is thrown, the only side effects may come from accessing/modifying <var>sb</var>.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/istream/basic_istream/basic_istream/"><b>basic_istream::basic_istream</b></a></dt><dd>Construct object <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/ios/basic_ios/init/"><b>basic_ios::init</b></a></dt><dd>Initialize object <span class="typ">(protected member function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
