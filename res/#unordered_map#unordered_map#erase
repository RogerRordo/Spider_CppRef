<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;unordered_map&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/unordered_map/unordered_map/">unordered_map</a>::erase<span class="C_ico cpp11warning" title="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it." alt="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it."></span></h1>
<div class="C_prototype"><table><tr class="odd"><th>by position (1)</th><td><pre>iterator erase ( const_iterator position );</pre></td></tr><tr class="even"><th>by key (2)</th><td><pre>size_type erase ( const key_type&amp; k );</pre></td></tr><tr class="odd"><th>range (3)</th><td><pre>iterator erase ( const_iterator first, const_iterator last );</pre></td></tr></table></div><div id="I_description">Erase elements</div>
<section id="description">
Removes from the <a href="/unordered_map">unordered_map</a> container either a single element or a range of elements (<tt>[first,last)</tt>).<br>
<br>
This effectively reduces the container <a href="/unordered_map::size">size</a> by the number of elements removed, calling each element's destructor.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>position</dt>
<dd>Iterator pointing to a single element to be removed from the <a href="/unordered_map">unordered_map</a>.<br>
Member type <tt>const_iterator</tt> is a <a href="/ForwardIterator">forward iterator</a> type.</dd>
<dt>k</dt>
<dd>Key of the element to be erased.<br>
Member type <tt>key_type</tt> is the type of the keys for the elements in the container, defined in <a href="/unordered_map">unordered_map</a> as an alias of its first template parameter (<tt>Key</tt>).</dd>
<dt>first, last</dt>
<dd>Iterators specifying a range within the <a href="/unordered_map">unordered_map</a> container to be removed: <tt>[first,last)</tt>. i.e., the range includes all the elements between <i>first</i> and <i>last</i>, including the element pointed by <i>first</i> but not the one pointed by <i>last</i>.<br>
Notice that <a href="/unordered_map">unordered_map</a> containers do not follow any particular order to organize its elements, therefore the effect of range deletions may not be easily predictable.<br>
Member type <tt>const_iterator</tt> is a <a href="/ForwardIterator">forward iterator</a> type.</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
Versions (1) and (3) return an iterator pointing to the position immediately following the last of the elements erased.<br>
Version (2) returns the number of elements erased, which in <a href="/unordered_map">unordered_map</a> containers (that have unique keys), this is <tt>1</tt> if an element with a <i>key value</i> of <i>k</i> existed (and thus was subsequently erased), and zero otherwise.<br>
<br>
Member type <tt>iterator</tt> is a <a href="/ForwardIterator">forward iterator</a> type.<br>
Member type <tt>size_type</tt> is an unsigned integral type.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br></code></pre></td>
<td class="source"><pre><code><cite>// unordered_map::erase</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>
<dfn>#include &lt;unordered_map&gt;</dfn>

<var>int</var> main ()
{
  std::unordered_map&lt;std::string,std::string&gt; mymap;

  <cite>// populating container:</cite>
  mymap[<kbd>"U.S."</kbd>] = <kbd>"Washington"</kbd>;
  mymap[<kbd>"U.K."</kbd>] = <kbd>"London"</kbd>;
  mymap[<kbd>"France"</kbd>] = <kbd>"Paris"</kbd>;
  mymap[<kbd>"Russia"</kbd>] = <kbd>"Moscow"</kbd>;
  mymap[<kbd>"China"</kbd>] = <kbd>"Beijing"</kbd>;
  mymap[<kbd>"Germany"</kbd>] = <kbd>"Berlin"</kbd>;
  mymap[<kbd>"Japan"</kbd>] = <kbd>"Tokyo"</kbd>;

  <cite>// erase examples:</cite>
  mymap.erase ( mymap.begin() );      <cite>// erasing by iterator</cite>
  mymap.erase (<kbd>"France"</kbd>);             <cite>// erasing by key</cite>
  mymap.erase ( mymap.find(<kbd>"China"</kbd>), mymap.end() ); <cite>// erasing by range</cite>

  <cite>// show content:</cite>
  <var>for</var> ( <var>auto</var>&amp; x: mymap )
    std::cout &lt;&lt; x.first &lt;&lt; <kbd>": "</kbd> &lt;&lt; x.second &lt;&lt; std::endl;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
Possible output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>Russia: Moscow
Japan: Tokyo
U.K.: London
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Average case: Linear in the number of elements removed (which is constant for versions <i>(1)</i> and <i>(2)</i>).<br>
Worst case: Linear in the container <a href="/unordered_map::size">size</a>.<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
<div class="C_SwitchCases">
<div title="C++11">
Only the iterators and references to the elements removed are invalidated.<br>
The rest are unaffected.<br>
</div>
<div title="C++14">
Only the iterators and references to the elements removed are invalidated.<br>
The rest are unaffected.<br>
The relative order of iteration of the elements not removed by the operation is preserved.<br>
</div>
</div>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/unordered_map/unordered_map/clear/"><b>unordered_map::clear</b></a></dt><dd>Clear content <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_map/unordered_map/insert/"><b>unordered_map::insert</b></a></dt><dd>Insert elements <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_map/unordered_map/find/"><b>unordered_map::find</b></a></dt><dd>Get iterator to element <span class="typ">(public member function)</span></dd></dl>
</section>
<div id="CH_bb"></div></div></div>
