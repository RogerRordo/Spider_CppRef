<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;set&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/set/multiset/">multiset</a>::max_size</h1>
<div class="C_prototype"><div class="C_SwitchCases">
<div title="C++98">
<pre>size_type max_size() const;</pre></div>
<div title="C++11" class="on">
<pre>size_type max_size() const noexcept;</pre></div>
</div>
</div><div id="I_description">Return maximum size</div>
<section id="description">
Returns the maximum number of elements that the <a href="/multiset">multiset</a> container can hold.<br>
<br>
This is the maximum potential <a href="/multiset::size">size</a> the container can reach due to known system or library implementation limitations, but the container is by no means guaranteed to be able to reach that size: it can still fail to allocate storage at any point before that size is reached.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
none<br>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
The maximum number of elements a <a href="/multiset">multiset</a> container can hold as content.<br>
<br>
Member type <tt>size_type</tt> is an unsigned integral type.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br></code></pre></td>
<td class="source"><pre><code><cite>// multiset::max_size</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;set&gt;</dfn>

<var>int</var> main ()
{
  std::multiset&lt;<var>int</var>&gt; mymultiset;

  <var>if</var> (mymultiset.max_size()&gt;1000)
  {
    <var>for</var> (<var>int</var> i=0; i&lt;1000; i++) mymultiset.insert(i);
    std::cout &lt;&lt; <kbd>"The multiset contains 1000 elements.\n"</kbd>;
  }
  <var>else</var> std::cout &lt;&lt; <kbd>"The multiset could not hold 1000 elements.\n"</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Constant.<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
No changes.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The container is accessed.<br>
Concurrently accessing the elements of a <a href="/multiset">multiset</a> is safe.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
<b>No-throw guarantee:</b> this member function never throws exceptions.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/set/multiset/size/"><b>multiset::size</b></a></dt><dd>Return container size <span class="typ">(public member function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
