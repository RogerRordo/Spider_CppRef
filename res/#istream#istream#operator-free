<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;istream&gt; &lt;iostream&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span>operator&gt;&gt; (istream)</h1>
<div class="C_prototype"><div class="C_SwitchCases">
<div title="C++98">
<table><tr class="odd"><th>single character (1)</th><td><pre>istream&amp; operator&gt;&gt; (istream&amp; is, char&amp; c);istream&amp; operator&gt;&gt; (istream&amp; is, signed char&amp; c);istream&amp; operator&gt;&gt; (istream&amp; is, unsigned char&amp; c);</pre></td></tr><tr class="even"><th>character sequence (2)</th><td><pre>istream&amp; operator&gt;&gt; (istream&amp; is, char* s);istream&amp; operator&gt;&gt; (istream&amp; is, signed char* s);istream&amp; operator&gt;&gt; (istream&amp; is, unsigned char* s);</pre></td></tr></table></div>
<div title="C++11" class="on">
<table><tr class="odd"><th>single character (1)</th><td><pre>istream&amp; operator&gt;&gt; (istream&amp; is, char&amp; c);istream&amp; operator&gt;&gt; (istream&amp; is, signed char&amp; c);istream&amp; operator&gt;&gt; (istream&amp; is, unsigned char&amp; c);</pre></td></tr><tr class="even"><th>character sequence (2)</th><td><pre>istream&amp; operator&gt;&gt; (istream&amp; is, char* s);istream&amp; operator&gt;&gt; (istream&amp; is, signed char* s);istream&amp; operator&gt;&gt; (istream&amp; is, unsigned char* s);</pre></td></tr><tr class="odd"><th>rvalue extraction (3)</th><td><pre>template&lt;class charT, class traits, class T&gt;basic_istream&lt;charT,traits&gt;&amp;  operator&gt;&gt; (basic_istream&lt;charT,traits&gt;&amp;&amp; is, T&amp; val);</pre></td></tr></table></div>
</div>
</div><div id="I_description">Extract characters</div>
<section id="description">
This operator (<code>&gt;&gt;</code>) applied to an input stream is known as <i>extraction operator</i>, and performs <i>formatted input</i>:<br>
<br>
<dl>
<dt>(1) single character</dt>
<dd>Extracts the next character from <var>is</var> and stores it as the value of <var>c</var>.<br>
</dd>
<dt>(2) character sequence</dt>
<dd>Extracts characters from <var>is</var> and stores them in <var>s</var> as a c-string, stopping as soon as either a <i><a href="/isspace">whitespace character</a></i> is encountered or <code>(<a href="/ios_base::width">width()</a>-1)</code> characters have been extracted (if <samp><a href="/ios_base::width">width</a></samp> is not zero).<br>
A <i>null character</i> (<code>charT()</code>) is automatically appended to the written sequence.<br>
The function then resets <samp><a href="/ios_base::width">width</a></samp> to zero.<br>
</dd>
<dt>(3) rvalue extraction</dt>
<dd>Allows extracting from rvalue <samp><a href="/istream">istream</a></samp> objects, with the same effect as from lvalues: It effectively calls: <code>is&gt;&gt;val</code>.<br>
</dd>
</dl>
<br>
Internally, the function accesses the input sequence of <var>is</var> by first constructing a <samp><a href="/istream::sentry">sentry</a></samp> with <var>noskipws</var> set to <code>false</code>: this may <a href="/ostream::flush">flush</a> its <i><a href="/ios::tie">tied stream</a></i> and/or discard leading whitespaces (see <samp><a href="/istream::sentry">istream::sentry</a></samp>). Then (if <samp><a href="/ios::good">good</a></samp>), it extracts characters from <var>is</var>'s associated <i><a href="/streambuf">stream buffer</a></i> object (as if calling its member functions <samp><a href="/streambuf::sbumpc">sbumpc</a></samp> or <samp><a href="/streambuf::sgetc">sgetc</a></samp>), and finally destroys the <samp><a href="/istream::sentry">sentry</a></samp> object before returning.<br>
<br>
Notice that if this function extracts the last character of a stream when extracting a single character <i>(1)</i>, it does not set its <samp><a href="/ios_base::eofbit">eofbit</a></samp> flag, but attempting to extract beyond it does.<br>
<br>
Calling this function does not alter the value returned by <samp><a href="/istream::gcount">gcount</a></samp> on <var>is</var>.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>is</dt>
<dd>Input stream object from which characters are extracted.<br>
</dd>
<dt>c</dt>
<dd>Object where the extracted character is stored.<br>
</dd>
<dt>s</dt>
<dd>Pointer to an array of characters where extracted characters are stored as a c-string.<br>
<var>is</var>'s member function <samp><a href="/ios_base::width">width</a></samp> may be used to specify a limit on the number of characters to write.<br>
</dd>
<dt>val</dt>
<dd>Object where content is stored.<br>
<samp>T</samp> shall be a type supported as right-hand side argument either by this function or by <var>is</var>'s member function <samp><a href="/istream::operator&gt;&gt;">operator&gt;&gt;</a></samp>.<br>
<samp>charT</samp> and <samp>traits</samp> are the class template parameters of <samp>istream</samp> (see <samp><a href="/basic_istream">basic_istream</a></samp>).<br>
</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
The <samp><a href="/istream">istream</a></samp> object (<var>is</var>).<br>
<br>
The extracted value or sequence is not returned, but directly stored in the variable passed as argument.<br>
<br>
Errors are signaled by modifying the <i><a href="/ios::rdstate">internal state flags</a></i>:<br>
<table class="boxed">
<tr><th>flag</th><th>error</th></tr>
<tr><td><samp><a href="/ios_base::eofbit">eofbit</a></samp></td><td>The function stopped extracting characters because the input sequence controlled by <var>is</var> has no more characters available (<i>end-of-file</i> reached).</td></tr>
<tr><td><samp><a href="/ios_base::failbit">failbit</a></samp></td><td>Either no characters were extracted, or these could not be interpreted as a valid value of the appropriate type.</td></tr>
<tr><td><samp><a href="/ios_base::badbit">badbit</a></samp></td><td>Error on stream (such as when this function catches an exception thrown by an internal operation).<br>
When set, the integrity of the stream may have been affected.</td></tr>
</table>
Multiple flags may be set by a single operation.<br>
<br>
If the operation sets an <i><a href="/ios::rdstate">internal state flag</a></i> that was registered with <var>is</var>'s member <samp><a href="/ios::exceptions">exceptions</a></samp>, the function throws an exception of its <samp><a href="/ios_base::failure">failure</a></samp> member type.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br></code></pre></td>
<td class="source"><pre><code><cite>// example on extraction</cite>
<dfn>#include &lt;iostream&gt;     </dfn><cite>// std::cin, std::cout</cite>

<var>int</var> main () {
  <var>char</var> str[10];

  std::cout &lt;&lt; <kbd>"Enter a word: "</kbd>;
  std::cin.width (10);               <cite>// limit width</cite>
  std::cin &gt;&gt; str;
  std::cout &lt;&lt; <kbd>"The first 9 chars of your word are: "</kbd> &lt;&lt; str &lt;&lt; <kbd>'\n'</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
This example demonstrates the use of some of the overloaded <samp>operator&gt;&gt;</samp> functions shown above using the standard <samp><a href="/istream">istream</a></samp> object <samp><a href="/cin">cin</a></samp>.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
Modifies <var>c</var> or the elements of the array pointed by <var>s</var>.<br>
Modifies <var>is</var>.<br>
Concurrent access to the same stream object may cause data races, except for the standard stream object <samp><a href="/cin">cin</a></samp> when this is <i><a href="/ios_base::sync_with_stdio">synchronized with stdio</a></i> (in this case, no data races are initiated, although no guarantees are given on the order in which extracted characters are attributed to threads).<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
<b>Basic guarantee:</b> if an exception is thrown, all objects involved are in valid states.<br>
It throws an exception of member type <samp><a href="/ios_base::failure">failure</a></samp> if the resulting <i>error state flag</i> for <var>is</var> is not <samp><a href="/ios_base::goodbit">goodbit</a></samp> and member <samp><a href="/ios::exceptions">exceptions</a></samp> was set to throw for that state in <var>is</var>.<br>
Any exception thrown by an internal operation is caught and handled by the function, setting <var>is</var>'s <samp><a href="/ios_base::badbit">badbit</a></samp> flag. If <samp><a href="/ios_base::badbit">badbit</a></samp> was set on the last call to <samp><a href="/ios::exceptions">exceptions</a></samp> for <var>is</var>, the function rethrows the caught exception.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/istream/istream/get/"><b>istream::get</b></a></dt><dd>Get characters <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/istream/istream/getline/"><b>istream::getline</b></a></dt><dd>Get line <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/ostream/ostream/operator<</"><b>ostream::operator&lt;&lt;</b></a></dt><dd>Insert formatted output <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/istream/istream/sentry/"><b>istream::sentry</b></a></dt><dd>Prepare stream for input <span class="typ">(public member class)</span></dd></dl>
<div id="CH_bb"></div></div></div>
