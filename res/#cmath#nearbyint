<div id="I_content">
<div class="C_doc">
<div id="I_type">function</div>
<div id="I_file">&lt;cmath&gt; &lt;ctgmath&gt;</div>
<h1>nearbyint<span class="C_ico cpp11warning" title="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it." alt="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it."></span></h1>
<div class="C_prototype"><div class="C_SwitchCases">
<div title="C99">
<pre>     double nearbyint  (double x);      float nearbyintf (float x);long double nearbyintl (long double x);</pre></div>
<div title="C++11" class="on">
<pre>     double nearbyint (double x);      float nearbyint (float x);long double nearbyint (long double x);     double nearbyint (T x);           // additional overloads for integral types</pre></div>
</div>
</div><div id="I_description">Round to nearby integral value</div>
<section id="description">
Rounds <var>x</var> to an integral value, using the rounding direction specified by <samp><a href="/fegetround">fegetround</a></samp>.<br>
<br>
This function does not raise <samp><a href="/FE_INEXACT">FE_INEXACT</a></samp> exceptions. See <samp><a href="/rint">rint</a></samp> for an equivalent function that may do.<br>
<br>
<div class="C_SwitchCases">
<div title="C99">
Header <samp><a href="/&lt;ctgmath&gt;">&lt;tgmath.h&gt;</a></samp> provides a type-generic macro version of this function.<br>
</div>
<div title="C++11">
<i>Additional overloads</i> are provided in this header (<code><a href="/&lt;cmath&gt;">&lt;cmath&gt;</a></code>) for the <a href="/is_integral">integral types</a>: These overloads effectively cast <var>x</var> to a <code>double</code> before calculations (defined for <samp>T</samp> being any <i><a href="/is_integral">integral type</a></i>).<br>
</div>
</div>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>x</dt>
<dd>Value to round.</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
The value of <var>x</var> rounded to a nearby integral (as a floating-point value).<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br></code></pre></td>
<td class="source"><pre><code><cite>/* nearbyint example */</cite>
<dfn>#include &lt;stdio.h&gt;      </dfn><cite>/* printf */</cite><dfn></dfn>
<dfn>#include &lt;fenv.h&gt;       </dfn><cite>/* fegetround, FE_* */</cite><dfn></dfn>
<dfn>#include &lt;math.h&gt;       </dfn><cite>/* nearbyint */</cite><dfn></dfn>

<var>int</var> main ()
{
  printf (<kbd>"rounding using "</kbd>);
  <var>switch</var> (fegetround()) {
    <var>case</var> FE_DOWNWARD: printf (<kbd>"downward"</kbd>); <var>break</var>;
    <var>case</var> FE_TONEAREST: printf (<kbd>"to-nearest"</kbd>); <var>break</var>;
    <var>case</var> FE_TOWARDZERO: printf (<kbd>"toward-zero"</kbd>); <var>break</var>;
    <var>case</var> FE_UPWARD: printf (<kbd>"upward"</kbd>); <var>break</var>;
    <var>default</var>: printf (<kbd>"unknown"</kbd>);
  }
  printf (<kbd>" rounding:\n"</kbd>);

  printf ( <kbd>"nearbyint (2.3) = %.1f\n"</kbd>, nearbyint(2.3) );
  printf ( <kbd>"nearbyint (3.8) = %.1f\n"</kbd>, nearbyint(3.8) );
  printf ( <kbd>"nearbyint (-2.3) = %.1f\n"</kbd>, nearbyint(-2.3) );
  printf ( <kbd>"nearbyint (-3.8) = %.1f\n"</kbd>, nearbyint(-3.8) );
  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Possible output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>
Rounding using to-nearest rounding:
nearbyint (2.3) = 2.0
nearbyint (3.8) = 4.0
nearbyint (-2.3) = -2.0
nearbyint (-3.8) = -4.0
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/cmath/rint/"><b>rint</b></a></dt><dd>Round to integral value <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/lrint/"><b>lrint</b></a></dt><dd>Round and cast to long integer <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/round/"><b>round</b></a></dt><dd>Round to nearest <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/floor/"><b>floor</b></a></dt><dd>Round down value <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/ceil/"><b>ceil</b></a></dt><dd>Round up value <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/trunc/"><b>trunc</b></a></dt><dd>Truncate value <span class="typ">(function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
