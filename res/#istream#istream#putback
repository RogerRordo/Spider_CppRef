<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;istream&gt; &lt;iostream&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/istream/istream/">istream</a>::putback</h1>
<div class="C_prototype"><pre>istream&amp; putback (char c);</pre></div><div id="I_description">Put character back</div>
<section id="description">
Attempts to decrease the current location in the stream by one character, making the last character extracted from the stream once again available to be extracted by input operations.<br>
<br>
Internally, the function accesses the input sequence by first constructing a <samp><a href="/istream::sentry">sentry</a></samp> object (with <var>noskipws</var> set to <code>true</code>). Then (if <samp><a href="/ios::good">good</a></samp>), it calls <code><a href="/streambuf::sputbackc">sputbackc</a>(c)</code> on its associated <i><a href="/streambuf">stream buffer</a></i> object (if any). Finally, it destroys the <samp><a href="/istream::sentry">sentry</a></samp> object before returning.<br>
<br>
<div class="C_SwitchCases">
<div title="C++98">
If the <samp><a href="/ios_base::eofbit">eofbit</a></samp> flag is set before the call, the function fails (sets <samp><a href="/ios_base::failbit">failbit</a></samp> and returns).<br>
</div>
<div title="C++11">
The function clears the <samp><a href="/ios_base::eofbit">eofbit</a></samp> flag, if set before the call.<br>
</div>
</div>
<br>
If the call to <samp><a href="/streambuf::sputbackc">sputbackc</a></samp> fails, the function sets the <samp><a href="/ios_base::badbit">badbit</a></samp> flag. Note that this may happen even if <var>c</var> was indeed the last character extracted from the stream (depending on the internals of the associated <i><a href="/streambuf">stream buffer</a></i> object).<br>
<br>
Calling this function sets the value returned by <samp><a href="/istream::gcount">gcount</a></samp> to zero.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>c</dt>
<dd>Character to be put back.<br>
If this does not match the character at the put back position, the behavior depends on the particular <i><a href="/basic_streambuf">stream buffer</a></i> object associated to the stream:<br>
<ul>
<li>In <i><a href="/stringbuf">string buffers</a></i>, the value is overwritten for output stream buffers, but the function fails on input buffers.</li>
<li>In <i><a href="/filebuf">file buffers</a></i>, the value is overwritten on the intermediate buffer (if supported): reading the character again will produce <var>c</var>, but the associated input sequence is not modified.</li>
</ul>
Other types of <i><a href="/streambuf">stream buffer</a></i> may either fail, be ignored, or overwrite the character at that position.<br>
</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
The <samp><a href="/istream">istream</a></samp> object (<code>*this</code>).<br>
<br>
Errors are signaled by modifying the <i><a href="/ios::rdstate">internal state flags</a></i>:<br>
<table class="boxed">
<tr><th>flag</th><th>error</th></tr>
<tr><td><samp><a href="/ios_base::eofbit">eofbit</a></samp></td><td>-</td></tr>
<tr><td><samp><a href="/ios_base::failbit">failbit</a></samp></td><td>The construction of <samp><a href="/istream::sentry">sentry</a></samp> failed (such as when the <i><a href="/ios::rdstate">stream state</a></i> was not <samp><a href="/ios::good">good</a></samp> before the call).</td></tr>
<tr><td><samp><a href="/ios_base::badbit">badbit</a></samp></td><td>Either the internal call to <samp><a href="/streambuf::sputbackc">sputbackc</a></samp> failed, or another error occurred on the stream (such as when the function catches an exception thrown by an internal operation, or when no <i><a href="/streambuf">stream buffer</a></i> is associated with the stream).<br>
When set, the integrity of the stream may have been affected.</td></tr>
</table>
Multiple flags may be set by a single operation.<br>
<br>
If the operation sets an <i><a href="/ios::rdstate">internal state flag</a></i> that was registered with member <samp><a href="/ios::exceptions">exceptions</a></samp>, the function throws an exception of member type <samp><a href="/ios_base::failure">failure</a></samp>.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br></code></pre></td>
<td class="source"><pre><code><cite>// istream::putback example</cite>
<dfn>#include &lt;iostream&gt;     </dfn><cite>// std::cin, std::cout</cite>
<dfn>#include &lt;string&gt;       </dfn><cite>// std::string</cite>

<var>int</var> main () {
  std::cout &lt;&lt; <kbd>"Please, enter a number or a word: "</kbd>;
  <var>char</var> c = std::cin.get();

  <var>if</var> ( (c &gt;= <kbd>'0'</kbd>) &amp;&amp; (c &lt;= <kbd>'9'</kbd>) )
  {
    <var>int</var> n;
    std::cin.putback (c);
    std::cin &gt;&gt; n;
    std::cout &lt;&lt; <kbd>"You entered a number: "</kbd> &lt;&lt; n &lt;&lt; <kbd>'\n'</kbd>;
  }
  <var>else</var>
  {
    std::string str;
    std::cin.putback (c);
    getline (std::cin,str);
    std::cout &lt;&lt; <kbd>"You entered a word: "</kbd> &lt;&lt; str &lt;&lt; <kbd>'\n'</kbd>;
  }
  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Possible output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>Please, enter a number or a word: pocket
You entered a word: pocket
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="access">
<h3>Data races</h3>
Modifies the stream object.<br>
Concurrent access to the same stream object may cause data races.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
<b>Basic guarantee:</b> if an exception is thrown, the object is in a valid state.<br>
It throws an exception of member type <samp><a href="/ios_base::failure">failure</a></samp> if the resulting <i>error state flag</i> is not <samp><a href="/ios_base::goodbit">goodbit</a></samp> and member <samp><a href="/ios::exceptions">exceptions</a></samp> was set to throw for that state.<br>
Any exception thrown by an internal operation is caught and handled by the function, setting <samp><a href="/ios_base::badbit">badbit</a></samp>. If <samp><a href="/ios_base::badbit">badbit</a></samp> was set on the last call to <samp><a href="/ios::exceptions">exceptions</a></samp>, the function rethrows the caught exception.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/istream/istream/get/"><b>istream::get</b></a></dt><dd>Get characters <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/istream/istream/unget/"><b>istream::unget</b></a></dt><dd>Unget character <span class="typ">(public member function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
