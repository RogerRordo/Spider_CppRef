<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;deque&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/deque/deque/">deque</a>::erase</h1>
<div class="C_prototype"><div class="C_SwitchCases">
<div title="C++98">
<pre>iterator erase (iterator position);iterator erase (iterator first, iterator last);</pre></div>
<div title="C++11" class="on">
<pre>iterator erase (const_iterator position );iterator erase (const_iterator first, const_iterator last );</pre></div>
</div>
</div><div id="I_description">Erase elements</div>
<section id="description">
Removes from the <a href="/deque">deque</a> container either a single element (<i>position</i>) or a range of elements (<tt>[first,last)</tt>).<br>
<br>
This effectively reduces the container <a href="/deque::size">size</a> by the number of elements removed, which are destroyed.<br>
<br>
Double-ended queues are designed to be efficient removing (and inserting) elements at either the end or the beginning of the sequence. Removals on other positions are usually less efficient than in <a href="/list">list</a> or <a href="/forward_list">forward_list</a> containers.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>position</dt>
<dd>Iterator pointing to a single element to be removed from the <a href="/deque">deque</a>.<br>
Member types <tt>iterator</tt> and <tt>const_iterator</tt> are <a href="/RandomAccessIterator">random access iterator</a> types that point to elements.</dd>
<dt>first, last</dt>
<dd>Iterators specifying a range within the <a href="/deque">deque</a>] to be removed: <tt>[first,last)</tt>. i.e., the range includes all the elements between <i>first</i> and <i>last</i>, including the element pointed by <i>first</i> but not the one pointed by <i>last</i>.<br>
Member types <tt>iterator</tt> and <tt>const_iterator</tt> are <a href="/RandomAccessIterator">random access iterator</a> types that point to elements.</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
An iterator pointing to the new location of the element that followed the last element erased by the function call. This is the <a href="/deque::end">container end</a> if the operation erased the last element in the sequence.<br>
<br>
Member type <tt>iterator</tt> is a <a href="/RandomAccessIterator">random access iterator</a> type that points to elements.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br></code></pre></td>
<td class="source"><pre><code><cite>// erasing from deque</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;deque&gt;</dfn>

<var>int</var> main ()
{
  std::deque&lt;<var>int</var>&gt; mydeque;

  <cite>// set some values (from 1 to 10)</cite>
  <var>for</var> (<var>int</var> i=1; i&lt;=10; i++) mydeque.push_back(i);

  <cite>// erase the 6th element</cite>
  mydeque.erase (mydeque.begin()+5);

  <cite>// erase the first 3 elements:</cite>
  mydeque.erase (mydeque.begin(),mydeque.begin()+3);

  std::cout &lt;&lt; <kbd>"mydeque contains:"</kbd>;
  <var>for</var> (std::deque&lt;<var>int</var>&gt;::iterator it = mydeque.begin(); it!=mydeque.end(); ++it)
    std::cout &lt;&lt; <kbd>' '</kbd> &lt;&lt; *it;
  std::cout &lt;&lt; <kbd>'\n'</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>mydeque contains: 4 5 7 8 9 10
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Linear on the number of elements erased (destructions). Plus, depending on the particular library implemention, up to an additional linear time on the number of elements between <i>position</i> and one of the ends of the <a href="/deque">deque</a>.<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
If the erasure operation includes the last element in the sequence, the <a href="/deque::end">end iterator</a> and the iterators, pointers and references referring to the erased elements are invalidated.<br>
If the erasure includes the first element but not the last, only those referring to the erased elements are invalidated.<br>
If it happens anywhere else in the <a href="/deque">deque</a>, all iterators, pointers and references related to the container are invalidated.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The container is modified.<br>
If the erasure happens at the beginning or the end of the sequence, only the erased elements are modified (although see <i>iterator validity</i> above).<br>
If it happens anywhere else, it is not safe to access or modify elements.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
If the removed elements include the first or the last element in the container, no exceptions are thrown (no-throw guarantee).<br>
Otherwise, the container is guaranteed to end in a valid state (basic guarantee): Copying or moving elements while relocating them may throw.<br>
Invalid ranges produce undefined behavior.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/deque/deque/pop_back/"><b>deque::pop_back</b></a></dt><dd>Delete last element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/deque/deque/insert/"><b>deque::insert</b></a></dt><dd>Insert elements <span class="typ">(public member function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
