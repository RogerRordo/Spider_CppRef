<div id="I_content">
<div class="C_doc">
<div id="I_type">function</div>
<div id="I_file">&lt;cmath&gt; &lt;ctgmath&gt;</div>
<h1>fmod</h1>
<div class="C_prototype"><div class="C_SwitchCases">
<div title="C90">
<pre>double fmod (double numer, double denom);</pre></div>
<div title="C99" class="on">
<pre>     double fmod  (double numer     , double denom);      float fmodf (float numer      , float denom);long double fmodl (long double numer, long double denom);</pre></div>
<div title="C++98" class="on">
<pre>     double fmod (double numer     , double denom);      float fmod (float numer      , float denom);long double fmod (long double numer, long double denom);</pre></div>
<div title="C++11" class="on">
<pre>     double fmod (double numer     , double denom);      float fmod (float numer      , float denom);long double fmod (long double numer, long double denom);     double fmod (Type1 numer      , Type2 denom);       // additional overloads</pre></div>
</div>
</div><div id="I_description">Compute remainder of division</div>
<section id="description">
Returns the floating-point remainder of <var>numer</var>/<var>denom</var> (rounded towards zero):<br>
<br>
<samp>fmod</samp> = <var>numer</var> - <i><b>tquot</b></i> * <var>denom</var> <br>
<br>
Where <i><b>tquot</b></i> is the truncated (i.e., rounded towards zero) result of: <var>numer</var>/<var>denom</var>.<br>
<br>
A similar function, <samp><a href="/remainder">remainder</a></samp>, returns the same but with the quotient rounded to the nearest integer (instead of truncated).<br>
<br>
<div class="C_SwitchCases">
<div title="C99">
Header <samp><a href="/&lt;ctgmath&gt;">&lt;tgmath.h&gt;</a></samp> provides a type-generic macro version of this function.<br>
</div>
<div title="C++11">
<i>Additional overloads</i> are provided in this header (<code><a href="/&lt;cmath&gt;">&lt;cmath&gt;</a></code>) for other combinations of <a href="/is_arithmetic">arithmetic types</a> (<samp>Type1</samp> and <samp>Type2</samp>): These overloads effectively cast its arguments to <code>double</code> before calculations, except if at least one of the arguments is of type <code>long double</code> (in which case both are casted to <code>long double</code> instead).<br>
</div>
</div>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>numer</dt>
<dd>Value of the quotient numerator.</dd>
<dt>denom</dt>
<dd>Value of the quotient denominator.</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
The remainder of dividing the arguments.<br>
If <var>denom</var> is zero, the function may either return zero or cause a <i>domain error</i> (depending on the library implementation).<br>
<br>
<div class="C_SwitchCases">
<div title="C90 (C++98)">
If a <i>domain error</i> occurs, the global variable <samp><a href="/errno">errno</a></samp> is set to <samp><a href="/EDOM">EDOM</a></samp>.<br>
</div>
<div title="C99 (C+11)">
If a <i>domain error</i> occurs:<br>
- And <samp><a href="/math_errhandling">math_errhandling</a></samp> has <samp><a href="/MATH_ERRNO">MATH_ERRNO</a></samp> set: the global variable <samp><a href="/errno">errno</a></samp> is set to <samp><a href="/EDOM">EDOM</a></samp>.<br>
- And <samp><a href="/math_errhandling">math_errhandling</a></samp> has <samp><a href="/MATH_ERREXCEPT">MATH_ERREXCEPT</a></samp> set: <samp><a href="/FE_INVALID">FE_INVALID</a></samp> is raised.<br>
</div>
</div>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br></code></pre></td>
<td class="source"><pre><code><cite>/* fmod example */</cite>
<dfn>#include &lt;stdio.h&gt;      </dfn><cite>/* printf */</cite><dfn></dfn>
<dfn>#include &lt;math.h&gt;       </dfn><cite>/* fmod */</cite><dfn></dfn>

<var>int</var> main ()
{
  printf ( <kbd>"fmod of 5.3 / 2 is %f\n"</kbd>, fmod (5.3,2) );
  printf ( <kbd>"fmod of 18.5 / 4.2 is %f\n"</kbd>, fmod (18.5,4.2) );
  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>
fmod of 5.3 / 2 is 1.300000
fmod of 18.5 / 4.2 is 1.700000
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/cmath/remainder/"><b>remainder</b></a></dt><dd>Compute remainder (IEC 60559) <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/fabs/"><b>fabs</b></a></dt><dd>Compute absolute value <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/modf/"><b>modf</b></a></dt><dd>Break into fractional and integral parts <span class="typ">(function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
