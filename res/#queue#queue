<div id="I_content">
<div class="C_doc">
<div id="I_type">class template</div>
<div id="I_file">&lt;queue&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span>queue</h1>
<div class="C_prototype"><pre>template &lt;class T, class Container = deque&lt;T&gt; &gt; class queue;</pre></div><div id="I_description">FIFO queue</div>
<section id="description">
<b>queue</b>s are a type of container adaptor, specifically designed to operate in a FIFO context (first-in first-out), where elements are inserted into one end of the container and extracted from the other.<br>
<br>
<b>queue</b>s are implemented as <i>containers adaptors</i>, which are classes that use an encapsulated object of a specific container class as its <i>underlying container</i>, providing a specific set of member functions to access its elements. Elements are <i>pushed</i> into the <i>"back"</i> of the specific container and <i>popped</i> from its <i>"front"</i>.<br>
<br>
The underlying container may be one of the standard container class template or some other specifically designed container class. This underlying container shall support at least the following operations:<br>
<ul>
<li><samp>empty</samp></li>
<li><samp>size</samp></li>
<li><samp>front</samp></li>
<li><samp>back</samp></li>
<li><samp>push_back</samp></li>
<li><samp>pop_front</samp></li>
</ul>
<br>
The standard container classes <samp><a href="/deque">deque</a></samp> and <samp><a href="/list">list</a></samp> fulfill these requirements. By default, if no container class is specified for a particular <samp>queue</samp> class instantiation, the standard container <samp><a href="/deque">deque</a></samp> is used.<br>
</section>
<br>
<section id="parameters">
<h3>Template parameters</h3>
<dl>
<dt>T</dt>
<dd>Type of the elements.<br>
Aliased as member type <samp>queue::value_type</samp>.</dd>
<dt>Container</dt>
<dd>Type of the internal <i>underlying container</i> object where the elements are stored.<br>
Its <samp>value_type</samp> shall be <samp>T</samp>.<br>
Aliased as member type <samp>queue::container_type</samp>.</dd>
</dl>
</section>
<br>
<section id="types">
<h3>Member types</h3>
<div class="C_SwitchCases">
<div title="C++98">
<table class="boxed">
<tr><th>member type</th><th>definition</th><th>notes</th></tr>
<tr><td><tt>value_type</tt></td><td>The first template parameter (<samp>T</samp>)</td><td>Type of the elements</td></tr>
<tr><td><tt>container_type</tt></td><td>The second template parameter (<samp>Container</samp>)</td><td>Type of the <i>underlying container</i></td></tr>
<tr><td><tt>size_type</tt></td><td>an unsigned integral type</td><td>usually the same as <samp><a href="/size_t">size_t</a></samp></td></tr>
</table>
</div>
<div title="C++11">
<table class="boxed">
<tr><th>member type</th><th>definition</th><th>notes</th></tr>
<tr><td><tt>value_type</tt></td><td>The first template parameter (<samp>T</samp>)</td><td>Type of the elements</td></tr>
<tr><td><tt>container_type</tt></td><td>The second template parameter (<samp>Container</samp>)</td><td>Type of the <i>underlying container</i></td></tr>
<tr><td><tt>reference</tt></td><td><samp>container_type::reference</samp></td><td>usually, <code>value_type&</code></td></tr>
<tr><td><tt>const_reference</tt></td><td><samp>container_type::const_reference</samp></td><td>usually, <code>const value_type&</code></td></tr>
<tr><td><tt>size_type</tt></td><td>an unsigned integral type</td><td>usually, the same as <samp><a href="/size_t">size_t</a></samp></td></tr>
</table>
</div>
</div>
</section>
<br>
<section id="functions">
<h3>Member functions</h3>
<dl class="links"><dt><a href= "/reference/queue/queue/queue/"><b>(constructor)</b></a></dt><dd>Construct queue <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/queue/queue/empty/"><b>empty</b></a></dt><dd>Test whether container is empty <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/queue/queue/size/"><b>size</b></a></dt><dd>Return size <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/queue/queue/front/"><b>front</b></a></dt><dd>Access next element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/queue/queue/back/"><b>back</b></a></dt><dd>Access last element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/queue/queue/push/"><b>push</b></a></dt><dd>Insert element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/queue/queue/emplace/"><b>emplace <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Construct and insert element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/queue/queue/pop/"><b>pop</b></a></dt><dd>Remove next element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/queue/queue/swap/"><b>swap <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Swap contents <span class="typ">(public member function)</span></dd></dl>
<br>
<h3>Non-member function overloads</h3>
<dl class="links"><dt><a href= "/reference/queue/queue/operators/"><b>relational operators</b></a></dt><dd>Relational operators for queue <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/queue/queue/swap-free/"><b>swap (queue) <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Exchange contents of queues <span class="typ">(public member function)</span></dd></dl>
<br>
<h3>Non-member class specializations</h3>
<dl class="links"><dt><a href= "/reference/queue/queue/uses_allocator/"><b>uses_allocator&lt;queue&gt; <b class="C_cpp11" title="C++11 only"></b></b></a></dt><dd>Uses allocator for queue <span class="typ">(class template)</span></dd></dl>
<div id="CH_bb"></div></div></div>
