<div id="I_content">
<div class="C_doc">
<div id="I_type">function template</div>
<div id="I_file">&lt;algorithm&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span>rotate</h1>
<div class="C_prototype"><div class="C_SwitchCases">
<div title="C++98">
<pre>template &lt;class ForwardIterator&gt;  void rotate (ForwardIterator first, ForwardIterator middle,               ForwardIterator last);</pre></div>
<div title="C++11" class="on">
<pre>template &lt;class ForwardIterator&gt;  ForwardIterator rotate (ForwardIterator first, ForwardIterator middle,                          ForwardIterator last);</pre></div>
</div>
</div><div id="I_description">Rotate left the elements in range</div>
<section id="description">
Rotates the order of the elements in the range <code>[first,last)</code>, in such a way that the element pointed by <var>middle</var> becomes the new first element.<br>
<br>
The behavior of this function template (C++98) is equivalent to:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br></code></pre></td>
<td class="source"><pre><code><var>template</var> &lt;<var>class</var> ForwardIterator&gt;
  <var>void</var> rotate (ForwardIterator first, ForwardIterator middle,
               ForwardIterator last)
{
  ForwardIterator next = middle;
  <var>while</var> (first!=next)
  {
    swap (*first++,*next++);
    <var>if</var> (next==last) next=middle;
    <var>else</var> <var>if</var> (first==middle) middle=next;
  }
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>first, last</dt>
<dd><a href="/ForwardIterator">Forward iterators</a> to the initial and final positions of the sequence to be rotated left. The range used is <code>[first,last)</code>, which contains all the elements between <var>first</var> and <var>last</var>, including the element pointed by <var>first</var> but not the element pointed by <var>last</var>.<br>
Notice that in this function these are not consecutive parameters, but the first and the <strong>third</strong>.<br>
</dd>
<dt>middle</dt>
<dd><a href="/ForwardIterator">Forward iterator</a> pointing to the element within the range <code>[first,last)</code> that is moved to the first position in the range.</dd>
</dl>
<br>
<samp>ForwardIterator</samp> shall point to a type for which <samp><a href="/swap">swap</a></samp> is properly defined and which is both <i><a href="/is_move_constructible">move-constructible</a></i> and <i><a href="/is_move_assignable">move-assignable</a></i>.<br>
</section>
<br>
<section id="return">
<h3>Return value</h3>
<div class="C_SwitchCases">
<div title="C++98">
none<br>
</div>
<div title="C++11">
An iterator pointing to the element that now contains the value previously pointed by <var>first</var>.<br>
</div>
</div>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br></code></pre></td>
<td class="source"><pre><code><cite>// rotate algorithm example</cite>
<dfn>#include &lt;iostream&gt;     </dfn><cite>// std::cout</cite>
<dfn>#include &lt;algorithm&gt;    </dfn><cite>// std::rotate</cite>
<dfn>#include &lt;vector&gt;       </dfn><cite>// std::vector</cite>

<var>int</var> main () {
  std::vector&lt;<var>int</var>&gt; myvector;

  <cite>// set some values:</cite>
  <var>for</var> (<var>int</var> i=1; i&lt;10; ++i) myvector.push_back(i); <cite>// 1 2 3 4 5 6 7 8 9</cite>

  std::rotate(myvector.begin(),myvector.begin()+3,myvector.end());
                                                  <cite>// 4 5 6 7 8 9 1 2 3</cite>
  <cite>// print out content:</cite>
  std::cout &lt;&lt; <kbd>"myvector contains:"</kbd>;
  <var>for</var> (std::vector&lt;<var>int</var>&gt;::iterator it=myvector.begin(); it!=myvector.end(); ++it)
    std::cout &lt;&lt; <kbd>' '</kbd> &lt;&lt; *it;
  std::cout &lt;&lt; <kbd>'\n'</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>myvector contains: 4 5 6 7 8 9 1 2 3
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Up to linear in the <a href="/distance">distance</a> between <var>first</var> and <var>last</var>: Swaps (or moves) elements until all elements have been relocated.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The objects in the range <code>[first,last)</code> are modified.<br>
</section>
<br>
<section id="exceptions">
<h3>Exceptions</h3>
Throws if any element swap (or move) throws or if any operation on an iterator throws.<br>
Note that invalid arguments cause <i>undefined behavior</i>.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/algorithm/rotate_copy/"><b>rotate_copy</b></a></dt><dd>Copy range rotated left <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/reverse/"><b>reverse</b></a></dt><dd>Reverse range <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/random_shuffle/"><b>random_shuffle</b></a></dt><dd>Randomly rearrange elements in range <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/utility/swap/"><b>swap</b></a></dt><dd>Exchange values of two objects <span class="typ">(function template)</span></dd></dl>
<div id="CH_bb"></div></div></div>
