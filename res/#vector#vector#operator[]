<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;vector&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/vector/vector/">vector</a>::operator[]</h1>
<div class="C_prototype"><pre>      reference operator[] (size_type n);const_reference operator[] (size_type n) const;</pre></div><div id="I_description">Access element</div>
<section id="description">
Returns a reference to the element at position <i>n</i> in the <a href="/vector">vector</a> container.<br>
<br>
A similar member function, <a href="/vector::at">vector::at</a>, has the same behavior as this operator function, except that <a href="/vector::at">vector::at</a> is bound-checked and signals if the requested position is <i>out of range</i> by throwing an <a href="/out_of_range">out_of_range</a> exception. <br>
<br>
Portable programs should never call this function with an argument <i>n</i> that is <i>out of range</i>, since this causes <i>undefined behavior</i>.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>n</dt>
<dd>Position of an element in the container.<br>
Notice that the first element has a position of <tt>0</tt> (not <tt>1</tt>).<br>
Member type <tt>size_type</tt> is an unsigned integral type.</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
The element at the specified position in the <a href="/vector">vector</a>.<br>
<br>
If the <a href="/vector">vector</a> object is const-qualified, the function returns a <tt>const_reference</tt>. Otherwise, it returns a <tt>reference</tt>.<br>
<br>
Member types <tt>reference</tt> and <tt>const_reference</tt> are the reference types to the elements of the container (see <a href="/vector#types">vector member types</a>).<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br></code></pre></td>
<td class="source"><pre><code><cite>// vector::operator[]</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;vector&gt;</dfn>

<var>int</var> main ()
{
  std::vector&lt;<var>int</var>&gt; myvector (10);   <cite>// 10 zero-initialized elements</cite>

  std::vector&lt;<var>int</var>&gt;::size_type sz = myvector.size();

  <cite>// assign some values:</cite>
  <var>for</var> (<var>unsigned</var> i=0; i&lt;sz; i++) myvector[i]=i;

  <cite>// reverse vector using operator[]:</cite>
  <var>for</var> (<var>unsigned</var> i=0; i&lt;sz/2; i++)
  {
    <var>int</var> temp;
    temp = myvector[sz-1-i];
    myvector[sz-1-i]=myvector[i];
    myvector[i]=temp;
  }

  std::cout &lt;&lt; <kbd>"myvector contains:"</kbd>;
  <var>for</var> (<var>unsigned</var> i=0; i&lt;sz; i++)
    std::cout &lt;&lt; <kbd>' '</kbd> &lt;&lt; myvector[i];
  std::cout &lt;&lt; <kbd>'\n'</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>myvector contains: 9 8 7 6 5 4 3 2 1 0
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Constant.<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
No changes.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The container is accessed (neither the const nor the non-const versions modify the container).<br>
The reference returned can be used to access or modify elements. Concurrently accessing or modifying different elements is safe.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
If the container <a href="/vector::size">size</a> is greater than <i>n</i>, the function never throws exceptions (no-throw guarantee).<br>
Otherwise, the behavior is undefined.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/vector/vector/at/"><b>vector::at</b></a></dt><dd>Access element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/vector/vector/front/"><b>vector::front</b></a></dt><dd>Access first element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/vector/vector/back/"><b>vector::back</b></a></dt><dd>Access last element <span class="typ">(public member function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
