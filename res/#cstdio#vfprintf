<div id="I_content">
<div class="C_doc">
<div id="I_type">function</div>
<div id="I_file">&lt;cstdio&gt;</div>
<h1>vfprintf</h1>
<div class="C_prototype"><pre>int vfprintf ( FILE * stream, const char * format, va_list arg );</pre></div><div id="I_description">Write formatted data from variable argument list to stream</div>
<section id="description">
Writes the C string pointed by <i>format</i> to the <i>stream</i>, replacing any <i>format specifier</i> in the same way as <a href="/printf">printf</a> does, but using the elements in the variable argument list identified by <i>arg</i> instead of additional function arguments.<br>
<br>
Internally, the function retrieves arguments from the list identified by <i>arg</i> as if <a href="/va_arg">va_arg</a> was used on it, and thus the state of <i>arg</i> is likely altered by the call.<br>
<br>
In any case, <i>arg</i> should have been initialized by <a href="/va_start">va_start</a> at some point before the call, and it is expected to be released by <a href="/va_end">va_end</a> at some point after the call.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>stream</dt>
<dd>Pointer to a <a href="/FILE">FILE</a> object that identifies an output stream.</dd>
<dt>format</dt>
<dd>C string that contains a format string that follows the same specifications as <i>format</i> in <a href="/printf">printf</a> (see <a href="/printf">printf</a> for details).</dd>
<dt>arg</dt>
<dd>A value identifying a variable arguments list initialized with <a href="/va_start">va_start</a>.<br>
<a href="/va_list">va_list</a> is a special type defined in <a href="/cstdarg">&lt;cstdarg&gt;</a>.</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
On success, the total number of characters written is returned.<br>
<br>
If a writing error occurs, the <i>error indicator</i> (<a href="/ferror">ferror</a>) is set and a negative number is returned.<br>
<br>
If a multibyte character encoding error occurs while writing wide characters, <a href="/errno">errno</a> is set to <tt>EILSEQ</tt> and a negative number is returned.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br></code></pre></td>
<td class="source"><pre><code><cite>/* vfprintf example */</cite>
<dfn>#include &lt;stdio.h&gt;</dfn>
<dfn>#include &lt;stdarg.h&gt;</dfn>

<var>void</var> WriteFormatted (FILE * stream, <var>const</var> <var>char</var> * format, ...)
{
  va_list args;
  va_start (args, format);
  vfprintf (stream, format, args);
  va_end (args);
}

<var>int</var> main ()
{
   FILE * pFile;

   pFile = fopen (<kbd>"myfile.txt"</kbd>,<kbd>"w"</kbd>);

   WriteFormatted (pFile,<kbd>"Call with %d variable argument.\n"</kbd>,1);
   WriteFormatted (pFile,<kbd>"Call with %d variable %s.\n"</kbd>,2,<kbd>"arguments"</kbd>);

   fclose (pFile);

   <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
The example demonstrates how the <tt>WriteFormatted</tt> can be called with a different number of arguments, which are on their turn passed to the <tt>vfprintf</tt> function.<br>
<tt>myfile.txt</tt> would contain:<br>
<br>
<table class="boxed"><tr><th>myfile.txt</th></tr>
<tr><td><tt><pre >Call with 1 variable argument. 
Call with 2 variable arguments.</pre></tt></td></tr></table>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/cstdio/vprintf/"><b>vprintf</b></a></dt><dd>Print formatted data from variable argument list to stdout <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cstdio/vsprintf/"><b>vsprintf</b></a></dt><dd>Write formatted data from variable argument list to string <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cstdio/fprintf/"><b>fprintf</b></a></dt><dd>Write formatted data to stream <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cstdio/printf/"><b>printf</b></a></dt><dd>Print formatted data to stdout <span class="typ">(function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
