<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;unordered_set&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/unordered_set/unordered_set/">unordered_set</a>::count<span class="C_ico cpp11warning" title="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it." alt="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it."></span></h1>
<div class="C_prototype"><pre>size_type count ( const key_type&amp; k ) const;</pre></div><div id="I_description">Count elements with a specific key</div>
<section id="description">
Searches the container for elements with a value of <i>k</i> and returns the number of elements found. Because <a href="/unordered_set">unordered_set</a> containers do not allow for duplicate values, this means that the function actually returns <tt>1</tt> if an element with that value exists in the container, and zero otherwise.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>k</dt>
<dd>Value of the elements to be counted.<br>
Member type <tt>key_type</tt> is the type of the elements in the container. In <a href="/unordered_set">unordered_set</a> containers it is the same as <tt>value_type</tt>, defined as an alias of the class's first template parameter (<tt>Key</tt>).</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
<tt>1</tt> if an element with a value equivalent to <i>k</i> is found, or zero otherwise.<br>
<br>
Member type <tt>size_type</tt> is an unsigned integral type.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br></code></pre></td>
<td class="source"><pre><code><cite>// unordered_set::count</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>
<dfn>#include &lt;unordered_set&gt;</dfn>

<var>int</var> main ()
{
  std::unordered_set&lt;std::string&gt; myset = { <kbd>"hat"</kbd>, <kbd>"umbrella"</kbd>, <kbd>"suit"</kbd> };

  <var>for</var> (<var>auto</var>&amp; x: {<kbd>"hat"</kbd>,<kbd>"sunglasses"</kbd>,<kbd>"suit"</kbd>,<kbd>"t-shirt"</kbd>}) {
    <var>if</var> (myset.count(x)&gt;0)
      std::cout &lt;&lt; <kbd>"myset has "</kbd> &lt;&lt; x &lt;&lt; std::endl;
    <var>else</var>
      std::cout &lt;&lt; <kbd>"myset has no "</kbd> &lt;&lt; x &lt;&lt; std::endl;
  }

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>myset has hat
myset has no sunglasses
myset has suit
myset has no t-shirt
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Average case: constant.<br>
Worst case: linear in <a href="/unordered_set::size">container size</a>.<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
No changes.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/unordered_set/unordered_set/find/"><b>unordered_set::find</b></a></dt><dd>Get iterator to element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_set/unordered_set/size/"><b>unordered_set::size</b></a></dt><dd>Return container size <span class="typ">(public member function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
