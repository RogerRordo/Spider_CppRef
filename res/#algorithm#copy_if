<div id="I_content">
<div class="C_doc">
<div id="I_type">function template</div>
<div id="I_file">&lt;algorithm&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span>copy_if<span class="C_ico cpp11warning" title="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it." alt="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it."></span></h1>
<div class="C_prototype"><pre>template &lt;class InputIterator, class OutputIterator, class UnaryPredicate&gt;  OutputIterator copy_if (InputIterator first, InputIterator last,                          OutputIterator result, UnaryPredicate pred);</pre></div><div id="I_description">Copy certain elements of range</div>
<section id="description">
Copies the elements in the range <code>[first,last)</code> for which <var>pred</var> returns <code>true</code> to the range beginning at <var>result</var>.<br>
<br>
The behavior of this function template is equivalent to:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br></code></pre></td>
<td class="source"><pre><code><var>template</var> &lt;<var>class</var> InputIterator, <var>class</var> OutputIterator, <var>class</var> UnaryPredicate&gt;
  OutputIterator copy_if (InputIterator first, InputIterator last,
                          OutputIterator result, UnaryPredicate pred)
{
  <var>while</var> (first!=last) {
    <var>if</var> (pred(*first)) {
      *result = *first;
      ++result;
    }
    ++first;
  }
  <var>return</var> result;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>first, last</dt>
<dd>Input iterators to the initial and final positions in a sequence. The range copied is <code>[first,last)</code>, which contains all the elements between <var>first</var> and <var>last</var>, including the element pointed by <var>first</var> but not the element pointed by <var>last</var>.<br>
<samp>InputIterator</samp> shall point to a type <a href="/is_assignable">assignable</a> to the elements pointed by <samp>OutputIterator</samp>.</dd>
<dt>result</dt>
<dd><a href="/OutputIterator">Output iterator</a> to the initial position of the range where the resulting sequence is stored. The range includes as many elements as <code>[first,last)</code>.<br>
</dd>
<dt>pred</dt>
<dd>Unary function that accepts an element in the range as argument, and returns a value convertible to <code>bool</code>. The value returned indicates whether the element is to be copied (if <code>true</code>, it is copied).<br>
The function shall not modify any of its arguments.<br>
This can either be a function pointer or a function object.</dd>
</dl>
<br>
The ranges shall not overlap.<br>
</section>
<br>
<section id="return">
<h3>Return value</h3>
An iterator pointing to the element that follows the last element written in the result sequence.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br></code></pre></td>
<td class="source"><pre><code><cite>// copy_if example</cite>
<dfn>#include &lt;iostream&gt;     </dfn><cite>// std::cout</cite>
<dfn>#include &lt;algorithm&gt;    </dfn><cite>// std::copy_if, std::distance</cite>
<dfn>#include &lt;vector&gt;       </dfn><cite>// std::vector</cite>

<var>int</var> main () {
  std::vector&lt;<var>int</var>&gt; foo = {25,15,5,-5,-15};
  std::vector&lt;<var>int</var>&gt; bar (foo.size());

  <cite>// copy only positive numbers:</cite>
  <var>auto</var> it = std::copy_if (foo.begin(), foo.end(), bar.begin(), [](<var>int</var> i){<var>return</var> !(i&lt;0);} );
  bar.resize(std::distance(bar.begin(),it));  <cite>// shrink container to new size</cite>

  std::cout &lt;&lt; <kbd>"bar contains:"</kbd>;
  <var>for</var> (<var>int</var>&amp; x: bar) std::cout &lt;&lt; <kbd>' '</kbd> &lt;&lt; x;
  std::cout &lt;&lt; <kbd>'\n'</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>bar contains: 25 15 5
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Linear in the <a href="/distance">distance</a> between <var>first</var> and <var>last</var>: Applies <var>pred</var> to each element in the range and performs at most that many assignments.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The objects in the range <code>[first,last)</code> are accessed.<br>
The objects in the range between <var>result</var> and the returned value are modified.<br>
</section>
<br>
<section id="exceptions">
<h3>Exceptions</h3>
Throws if any of <var>pred</var>, the element assignments or the operations on iterators throws.<br>
Note that invalid arguments cause <i>undefined behavior</i>.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/algorithm/copy/"><b>copy</b></a></dt><dd>Copy range of elements <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/replace_copy_if/"><b>replace_copy_if</b></a></dt><dd>Copy range replacing value <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/remove_copy_if/"><b>remove_copy_if</b></a></dt><dd>Copy range removing values <span class="typ">(function template)</span></dd></dl>
<div id="CH_bb"></div></div></div>
