<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;map&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/map/map/">map</a>::at<span class="C_ico cpp11warning" title="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it." alt="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it."></span></h1>
<div class="C_prototype"><pre>      mapped_type&amp; at (const key_type&amp; k);const mapped_type&amp; at (const key_type&amp; k) const;</pre></div><div id="I_description">Access element</div>
<section id="description">
Returns a reference to the mapped value of the element identified with key <i>k</i>.<br>
<br>
If <i>k</i> does not match the key of any element in the container, the function throws an <a href="/out_of_range">out_of_range</a> exception.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>k</dt>
<dd>Key value of the element whose mapped value is accessed.<br>
Member type <tt>key_type</tt> is the type of the keys for the elements in the container, defined in <a href="/map">map</a> as an alias of its first template parameter (<tt>Key</tt>).<br>
</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
A reference to the mapped value of the element with a key value equivalent to <i>k</i>.<br>
<br>
If the <a href="/map">map</a> object is const-qualified, the function returns a reference to <tt>const mapped_type</tt>. Otherwise, it returns a reference to <tt>mapped_type</tt>.<br>
<br>
Member type <tt>mapped_type</tt> is the type to the mapped values in the container (see <a href="/map#types">map member types</a>). In <a href="/map">map</a> this is an alias of its second template parameter (<tt>T</tt>).<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br></code></pre></td>
<td class="source"><pre><code><cite>// map::at</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>
<dfn>#include &lt;map&gt;</dfn>

<var>int</var> main ()
{
  std::map&lt;std::string,<var>int</var>&gt; mymap = {
                { <kbd>"alpha"</kbd>, 0 },
                { <kbd>"beta"</kbd>, 0 },
                { <kbd>"gamma"</kbd>, 0 } };

  mymap.at(<kbd>"alpha"</kbd>) = 10;
  mymap.at(<kbd>"beta"</kbd>) = 20;
  mymap.at(<kbd>"gamma"</kbd>) = 30;

  <var>for</var> (<var>auto</var>&amp; x: mymap) {
    std::cout &lt;&lt; x.first &lt;&lt; <kbd>": "</kbd> &lt;&lt; x.second &lt;&lt; <kbd>'\n'</kbd>;
  }

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Possible output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>alpha: 10
beta: 20
gamma: 30
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Logarithmic in <a href="/map::size">size</a>.<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
No changes.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The container is accessed (neither the const nor the non-const versions modify the container).<br>
The mapped value that is accessed may be modified by the caller. Concurrently accessing or modifying other elements is safe.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
<b>Strong guarantee:</b> if an exception is thrown, there are no changes in the container.<br>
It throws <a href="/out_of_range">out_of_range</a> if <i>k</i> is not the key of an element in the <a href="/map">map</a>.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/map/map/operator[]/"><b>map::operator[]</b></a></dt><dd>Access element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/map/map/find/"><b>map::find</b></a></dt><dd>Get iterator to element <span class="typ">(public member function)</span></dd></dl>
</section>
<div id="CH_bb"></div></div></div>
