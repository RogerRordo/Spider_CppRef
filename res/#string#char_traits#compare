<div id="I_content">
<div class="C_doc">
<div id="I_type"> public static member function</div>
<div id="I_file">&lt;string&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/string/char_traits/">char_traits</a>::compare</h1>
<div class="C_prototype"><pre>static int compare (const char_type* p, const char_type* q, size_t n);</pre></div><div id="I_description">Compare sequences of characters</div>
<section id="description">
Compares the sequence of <i>n</i> characters pointed by <i>p</i> to the sequence of <i>n</i> characters pointed by <i>q</i>.<br>
<br>
The function performs a <a href="/lexicographical_compare">lexicographical comparison</a> where two characters are considered equal if <a href="/char_traits::eq">member eq</a> returns <tt>true</tt>, and one character is considered less than another one if <a href="/char_traits::lt">member lt</a> returns <tt>true</tt>.<br>
<br>
For all <i>character traits</i> types, it shall behave as if defined as:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br></code></pre></td>
<td class="source"><pre><code><var>static</var> <var>int</var> compare (<var>const</var> char_type* p, <var>const</var> char_type* q, size_t n) {
  <var>while</var> (n--) {<var>if</var> (!eq(*p,*q)) <var>return</var> lt(*p,*q)?-1:1; ++p; ++q;}
  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
Although the specific signature may vary.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>p, q</dt>
<dd>Pointers to arrays with a sequence of characters each.<br>
Notice that the function will consider that the length of both sequences is <i>n</i> characters, independently on whether any of them contains or not null-characters.<br>
Member type <tt>char_type</tt> is the <i>character type</i> (i.e., the class template parameter in <a href="/char_traits">char_traits</a>).<br>
<dt>n</dt>
<dd>Length (in characters) of the sequence of characters to compare.<br>
<a href="/size_t">size_t</a> is an unsigned integral type.</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
Returns a signed integral indicating the relation between the sequences:<br>
<table class="boxed">
<tr><th>value</th><th>relation</th></tr>
<tr><td><tt>0</tt></td><td>All characters compare equal</td></tr>
<tr><td><tt>&lt;0</tt></td><td>The first character that does not compare equal is less in <i>p</i>.</td></tr>
<tr><td><tt>&gt;0</tt></td><td>The first character that does not compare equal is greater in <i>p</i>.</td></tr>
</table>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br></code></pre></td>
<td class="source"><pre><code><cite>// char_traits::compare</cite>
<dfn>#include &lt;iostream&gt;   </dfn><cite>// std::cout</cite>
<dfn>#include &lt;string&gt;     </dfn><cite>// std::basic_string, std::char_traits</cite>
<dfn>#include &lt;cctype&gt;     </dfn><cite>// std::tolower</cite>
<dfn>#include &lt;cstddef&gt;    </dfn><cite>// std::size_t</cite>

<cite>// case-insensitive traits:</cite>
<var>struct</var> custom_traits: std::char_traits&lt;<var>char</var>&gt; {
  <var>static</var> <var>bool</var> eq (<var>char</var> c, <var>char</var> d) { <var>return</var> std::tolower(c)==std::tolower(d); }
  <var>static</var> <var>bool</var> lt (<var>char</var> c, <var>char</var> d) { <var>return</var> std::tolower(c)&lt;std::tolower(d); }
  <var>static</var> <var>int</var> compare (<var>const</var> <var>char</var>* p, <var>const</var> <var>char</var>* q, std::size_t n) {
    <var>while</var> (n--) {<var>if</var> (!eq(*p,*q)) <var>return</var> lt(*p,*q)?-1:1; ++p; ++q;}
    <var>return</var> 0;
  }
};

<var>int</var> main ()
{
  std::basic_string&lt;<var>char</var>,custom_traits&gt; foo,bar;
  foo = <kbd>"Test"</kbd>;
  bar = <kbd>"test"</kbd>;
  <var>if</var> (foo==bar) std::cout &lt;&lt; <kbd>"foo and bar are equal\n"</kbd>;
  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>foo and bar are equal
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Up to linear in <i>n</i>.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
Unless either <i>p</i> or <i>q</i> does not point to an array long enough, this member function never throws exceptions (no-throw guarantee) in any of the standard specializations.<br>
Otherwise, it causes <i>undefined behavior</i>.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/string/char_traits/eq/"><b>char_traits::eq</b></a></dt><dd>Compare characters for equality <span class="typ">( public static member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/string/char_traits/lt/"><b>char_traits::lt</b></a></dt><dd>Compare characters for inequality <span class="typ">( public static member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/string/char_traits/find/"><b>char_traits::find</b></a></dt><dd>Find first occurrence of character <span class="typ">( public static member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cstring/strncmp/"><b>strncmp</b></a></dt><dd>Compare characters of two strings <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/lexicographical_compare/"><b>lexicographical_compare</b></a></dt><dd>Lexicographical less-than comparison <span class="typ">(function template)</span></dd></dl>
<div id="CH_bb"></div></div></div>
