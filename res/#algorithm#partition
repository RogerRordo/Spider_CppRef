<div id="I_content">
<div class="C_doc">
<div id="I_type">function template</div>
<div id="I_file">&lt;algorithm&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span>partition</h1>
<div class="C_prototype"><div class="C_SwitchCases">
<div title="C++98">
<pre>template &lt;class BidirectionalIterator, class UnaryPredicate&gt;  BidirectionalIterator partition (BidirectionalIterator first,                                   BidirectionalIterator last, UnaryPredicate pred);</pre></div>
<div title="C++11" class="on">
<pre>template &lt;class ForwardIterator, class UnaryPredicate&gt;  ForwardIterator partition (ForwardIterator first,                             ForwardIterator last, UnaryPredicate pred);</pre></div>
</div>
</div><div id="I_description">Partition range in two</div>
<section id="description">
Rearranges the elements from the range <code>[first,last)</code>, in such a way that all the elements for which <var>pred</var> returns <code>true</code> precede all those for which it returns <code>false</code>. The iterator returned points to the first element of the second group.<br>
<br>
The relative ordering within each group is not necessarily the same as before the call. See <samp><a href="/stable_partition">stable_partition</a></samp> for a function with a similar behavior but with stable ordering within each group.<br>
<br>
The behavior of this function template (C++98) is equivalent to:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br></code></pre></td>
<td class="source"><pre><code><var>template</var> &lt;<var>class</var> BidirectionalIterator, <var>class</var> UnaryPredicate&gt;
  BidirectionalIterator partition (BidirectionalIterator first,
                                   BidirectionalIterator last, UnaryPredicate pred)
{
  <var>while</var> (first!=last) {
    <var>while</var> (pred(*first)) {
      ++first;
      <var>if</var> (first==last) <var>return</var> first;
    }
    <var>do</var> {
      --last;
      <var>if</var> (first==last) <var>return</var> first;
    } <var>while</var> (!pred(*last));
    swap (*first,*last);
    ++first;
  }
  <var>return</var> first;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>first, last</dt>
<dd>
<div class="C_SwitchCases">
<div title="C++98">
<a href="/BidirectionalIterator">Bidirectional iterators</a> to the initial and final positions of the sequence to partition. The range used is <code>[first,last)</code>, which contains all the elements between <var>first</var> and <var>last1</var>, including the element pointed by <var>first</var> but not the element pointed by <var>last</var>.<br>
</div>
<div title="C++11">
<a href="/ForwardIterator">Forward iterators</a> to the initial and final positions of the sequence to partition. The range used is <code>[first,last)</code>, which contains all the elements between <var>first</var> and <var>last</var>, including the element pointed by <var>first</var> but not the element pointed by <var>last</var>.<br>
<samp>ForwardIterator</samp> shall point to a type for which <samp><a href="/swap">swap</a></samp> is defined and swaps the value of its arguments.<br>
</div>
</div>
</dd>
<dt>pred</dt>
<dd>Unary function that accepts an element in the range as argument, and returns a value convertible to <code>bool</code>. The value returned indicates whether the element is to be placed before (if <code>true</code>, it is placed before all the elements for which it returns <code>false</code>).<br>
The function shall not modify its argument.<br>
This can either be a function pointer or a function object.</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
An iterator that points to the first element of the second group of elements (those for which <var>pred</var> returns <code>false</code>), or <var>last</var> if this group is empty.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br></code></pre></td>
<td class="source"><pre><code><cite>// partition algorithm example</cite>
<dfn>#include &lt;iostream&gt;     </dfn><cite>// std::cout</cite>
<dfn>#include &lt;algorithm&gt;    </dfn><cite>// std::partition</cite>
<dfn>#include &lt;vector&gt;       </dfn><cite>// std::vector</cite>

<var>bool</var> IsOdd (<var>int</var> i) { <var>return</var> (i%2)==1; }

<var>int</var> main () {
  std::vector&lt;<var>int</var>&gt; myvector;

  <cite>// set some values:</cite>
  <var>for</var> (<var>int</var> i=1; i&lt;10; ++i) myvector.push_back(i); <cite>// 1 2 3 4 5 6 7 8 9</cite>

  std::vector&lt;<var>int</var>&gt;::iterator bound;
  bound = std::partition (myvector.begin(), myvector.end(), IsOdd);

  <cite>// print out content:</cite>
  std::cout &lt;&lt; <kbd>"odd elements:"</kbd>;
  <var>for</var> (std::vector&lt;<var>int</var>&gt;::iterator it=myvector.begin(); it!=bound; ++it)
    std::cout &lt;&lt; <kbd>' '</kbd> &lt;&lt; *it;
  std::cout &lt;&lt; <kbd>'\n'</kbd>;

  std::cout &lt;&lt; <kbd>"even elements:"</kbd>;
  <var>for</var> (std::vector&lt;<var>int</var>&gt;::iterator it=bound; it!=myvector.end(); ++it)
    std::cout &lt;&lt; <kbd>' '</kbd> &lt;&lt; *it;
  std::cout &lt;&lt; <kbd>'\n'</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Possible output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>odd elements: 1 9 3 7 5
even elements: 6 4 8 2
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Linear in the <a href="/distance">distance</a> between <var>first</var> and <var>last</var>: Applies  <var>pred</var> to each element, and possibly swaps some of them (if the iterator type is a <a href="/BidirectionalIterator">bidirectional</a>, at most half that many swaps, otherwise at most that many).<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The objects in the range <code>[first,last)</code> are modified.<br>
</section>
<br>
<section id="exceptions">
<h3>Exceptions</h3>
Throws if either an element swap or an operation on an iterator throws.<br>
Note that invalid arguments cause <i>undefined behavior</i>.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/algorithm/reverse/"><b>reverse</b></a></dt><dd>Reverse range <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/rotate/"><b>rotate</b></a></dt><dd>Rotate left the elements in range <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/algorithm/find_if/"><b>find_if</b></a></dt><dd>Find element in range <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/utility/swap/"><b>swap</b></a></dt><dd>Exchange values of two objects <span class="typ">(function template)</span></dd></dl>
<div id="CH_bb"></div></div></div>
