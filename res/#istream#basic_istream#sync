<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;istream&gt; &lt;iostream&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/istream/basic_istream/">basic_istream</a>::sync</h1>
<div class="C_prototype"><pre>int sync();</pre></div><div id="I_description">Synchronize input buffer</div>
<section id="description">
Synchronizes the associated <i><a href="/basic_streambuf">stream buffer</a></i> with its controlled input sequence.<br>
<br>
Specifics of the operation depend on the particular implementation of the <i><a href="/basic_streambuf">stream buffer</a></i> object associated to the stream.<br>
<br>
Internally, the function accesses the input sequence by first constructing a <samp><a href="/basic_istream::sentry">sentry</a></samp> object (with <var>noskipws</var> set to <code>true</code>). Then (if <samp><a href="/basic_ios::good">good</a></samp>), it calls <samp><a href="/basic_streambuf::pubsync">pubsync</a></samp> on its associated <i><a href="/basic_streambuf">stream buffer</a></i> object (if <samp><a href="/basic_ios::rdbuf">rdbuf</a></samp> is null, the function returns <code>-1</code> instead). Finally, it destroys the <samp><a href="/basic_istream::sentry">sentry</a></samp> object before returning.<br>
<br>
If the call to <samp><a href="/basic_streambuf::pubsync">pubsync</a></samp> fails (i.e., it returns <code>-1</code>), the function sets the <samp><a href="/ios_base::badbit">badbit</a></samp> flag, and returns <code>-1</code>. Otherwise it returns zero, indicating success.<br>
<br>
Notice that the called function may succeed when no action is performed, if that is the behavior defined for the <i><a href="/basic_streambuf">stream buffer</a></i> object on synchronization.<br>
<br>
Calling this function does not alter the value returned by <samp><a href="/basic_istream::gcount">gcount</a></samp>.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
none<br>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
If the function fails, either because no <i><a href="/basic_streambuf">stream buffer</a></i> object is associated to the stream (<samp><a href="/basic_ios::rdbuf">rdbuf</a></samp> is null), or because the call to its <samp><a href="/basic_streambuf::pubsync">pubsync</a></samp> member fails, it returns <code>-1</code>.<br>
Otherwise, it returns zero, indicating success.<br>
<br>
Errors are signaled by modifying the <i><a href="/basic_ios::rdstate">internal state flags</a></i>:<br>
<table class="boxed">
<tr><th>flag</th><th>error</th></tr>
<tr><td><samp><a href="/ios_base::eofbit">eofbit</a></samp></td><td>-</td></tr>
<tr><td><samp><a href="/ios_base::failbit">failbit</a></samp></td><td>The construction of <samp><a href="/basic_istream::sentry">sentry</a></samp> failed (such as when the <i><a href="/basic_ios::rdstate">stream state</a></i> was not <samp><a href="/basic_ios::good">good</a></samp> before the call).</td></tr>
<tr><td><samp><a href="/ios_base::badbit">badbit</a></samp></td><td>Either the internal call to <samp><a href="/basic_streambuf::pubsync">pubsync</a></samp> returned <code>-1</code>, or some other error occurred on the stream (such as when the function catches an exception thrown by an internal operation).<br>
When set, the integrity of the stream may have been affected.</td></tr>
</table>
Multiple flags may be set by a single operation.<br>
<br>
If the operation sets an <i><a href="/basic_ios::rdstate">internal state flag</a></i> that was registered with member <samp><a href="/basic_ios::exceptions">exceptions</a></samp>, the function throws an exception of member type <samp><a href="/ios_base::failure">failure</a></samp>.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br></code></pre></td>
<td class="source"><pre><code><cite>// syncing input stream</cite>
<dfn>#include &lt;iostream&gt;     </dfn><cite>// std::cin, std::cout</cite>

<var>int</var> main () {
  <var>char</var> first, second;

  std::cout &lt;&lt; <kbd>"Please, enter a word: "</kbd>;
  first = std::cin.get();
  std::cin.sync();

  std::cout &lt;&lt; <kbd>"Please, enter another word: "</kbd>;
  second = std::cin.get();

  std::cout &lt;&lt; <kbd>"The first word began by "</kbd> &lt;&lt; first &lt;&lt; <kbd>'\n'</kbd>;
  std::cout &lt;&lt; <kbd>"The second word began by "</kbd> &lt;&lt; second &lt;&lt; <kbd>'\n'</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
This example demonstrates how <samp>sync</samp> behaves on certain implementations of <samp><a href="/cin">cin</a></samp>, removing any unread character from the standard input queue of characters.<br>
<br>
Possible output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>Please, enter a word: test
Please enter another word: text
The first word began by t
The second word began by t
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="access">
<h3>Data races</h3>
Modifies the stream object.<br>
Concurrent access to the same stream object may cause data races, except for the standard stream objects <samp><a href="/cin">cin</a></samp> and <samp><a href="/wcin">wcin</a></samp> when these are <i><a href="/ios_base::sync_with_stdio">synchronized with stdio</a></i> (in this case, no data races are initiated, although no guarantees are given on the order in which characters are extracted or synchronized between threads).<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
<b>Basic guarantee:</b> if an exception is thrown, the object is in a valid state.<br>
It throws an exception of member type <samp><a href="/ios_base::failure">failure</a></samp> if the resulting <i>error state flag</i> is not <samp><a href="/ios_base::goodbit">goodbit</a></samp> and member <samp><a href="/basic_ios::exceptions">exceptions</a></samp> was set to throw for that state.<br>
Any exception thrown by an internal operation is caught and handled by the function, setting <samp><a href="/ios_base::badbit">badbit</a></samp>. If <samp><a href="/ios_base::badbit">badbit</a></samp> was set on the last call to <samp><a href="/basic_ios::exceptions">exceptions</a></samp>, the function rethrows the caught exception.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/ostream/basic_ostream/flush/"><b>basic_ostream::flush</b></a></dt><dd>Flush output stream buffer <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/streambuf/basic_streambuf/pubsync/"><b>basic_streambuf::pubsync</b></a></dt><dd>Synchronize stream buffer <span class="typ">(public member function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
