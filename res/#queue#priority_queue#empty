<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;queue&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/queue/priority_queue/">priority_queue</a>::empty</h1>
<div class="C_prototype"><pre>bool empty() const;</pre></div><div id="I_description">Test whether container is empty</div>
<section id="description">
Returns whether the <samp><a href="/priority_queue">priority_queue</a></samp> is empty: i.e. whether its <a href="/priority_queue::size">size</a> is <i>zero</i>.<br>
<br>
This member function effectively calls member <samp><a href="/vector::empty">empty</a></samp> of the <i>underlying container</i> object.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
none<br>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
<code>true</code> if the <i>underlying container</i>'s size is <code>0</code>, <code>false</code> otherwise.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br></code></pre></td>
<td class="source"><pre><code><cite>// priority_queue::empty</cite>
<dfn>#include &lt;iostream&gt;       </dfn><cite>// std::cout</cite>
<dfn>#include &lt;queue&gt;          </dfn><cite>// std::priority_queue</cite>

<var>int</var> main ()
{
  std::priority_queue&lt;<var>int</var>&gt; mypq;
  <var>int</var> sum (0);

  <var>for</var> (<var>int</var> i=1;i&lt;=10;i++) mypq.push(i);

  <var>while</var> (!mypq.empty())
  {
     sum += mypq.top();
     mypq.pop();
  }

  std::cout &lt;&lt; <kbd>"total: "</kbd> &lt;&lt; sum &lt;&lt; <kbd>'\n'</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
The example initializes the content of the priority queue to a sequence of numbers (form 1 to 10). It then pops the elements one by one until it is empty and calculates their sum.<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>total: 55
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Constant (calling <samp><a href="/vector::empty">empty</a></samp> on the <i>underlying container</i>).<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The container is accessed.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
Provides the same level of guarantees as the operation performed on the container (no-throw guarantee for standard container types).<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/queue/priority_queue/size/"><b>priority_queue::size</b></a></dt><dd>Return size <span class="typ">(public member function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
