<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;string&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/string/basic_string/">basic_string</a>::clear</h1>
<div class="C_prototype"><div class="C_SwitchCases">
<div title="C++98">
<pre>void clear();</pre></div>
<div title="C++11" class="on">
<pre>void clear() noexcept;</pre></div>
</div>
</div><div id="I_description">Clear string</div>
<section id="description">
Erases the contents of the <a href="/basic_string">basic_string</a>, which becomes an <a href="/basic_string::empty">empty string</a> (with a <a href="/basic_string::length">length</a> of <tt>0</tt> characters).<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
none<br>
</section>
<br>
<section id="return">
<h3>Return value</h3>
none<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br></code></pre></td>
<td class="source"><pre><code><cite>// string::clear</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>

<var>int</var> main ()
{
  <var>char</var> c;
  std::string str;
  std::cout &lt;&lt; <kbd>"Please type some lines of text. Enter a dot (.) to finish:\n"</kbd>;
  <var>do</var> {
    c = std::cin.get();
    str += c;
    <var>if</var> (c==<kbd>'\n'</kbd>)
    {
       std::cout &lt;&lt; str;
       str.clear();
    }
  } <var>while</var> (c!=<kbd>'.'</kbd>);
  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
This program repeats every line introduced by the user until a the line contains a dot (<tt>'.'</tt>). Every newline character (<tt>'\n'</tt>) triggers the repetition of the line and the clearing of the current string content.<br>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Unspecified, but generally constant.<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
Any iterators, pointers and references related to this object may be invalidated.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The object is modified.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
<b>No-throw guarantee:</b> this member function never throws exceptions.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/string/basic_string/erase/"><b>basic_string::erase</b></a></dt><dd>Erase characters from string <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/string/basic_string/resize/"><b>basic_string::resize</b></a></dt><dd>Resize string <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/string/basic_string/empty/"><b>basic_string::empty</b></a></dt><dd>Test whether string is empty <span class="typ">(public member function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
