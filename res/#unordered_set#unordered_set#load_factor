<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;unordered_set&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/unordered_set/unordered_set/">unordered_set</a>::load_factor<span class="C_ico cpp11warning" title="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it." alt="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it."></span></h1>
<div class="C_prototype"><pre>float load_factor() const noexcept;</pre></div><div id="I_description">Return load factor</div>
<section id="description">
Returns the current load factor in the <a href="/unordered_set">unordered_set</a> container.<br>
<br>
The load factor is the ratio between the number of elements in the container (its <a href="/unordered_set::size">size</a>) and the number of buckets (<a href="/unordered_set::bucket_count">bucket_count</a>):<br>
<br>
<tt>load_factor = <a href="/unordered_set::size">size</a> / <a href="/unordered_set::bucket_count">bucket_count</a></tt> <br>
<br>
The load factor influences the probability of collision in the hash table (i.e., the probability of two elements being located in the same bucket). The container automatically increases the number of buckets to keep the load factor below a specific threshold (its <a href="/unordered_set::max_load_factor">max_load_factor</a>), causing a <a href="/unordered_set::rehash">rehash</a> each time an expansion is needed.<br>
<br>
To retrieve or change this threshold, use member function <a href="/unordered_set::max_load_factor">max_load_factor</a>.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
none<br>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
The current load factor.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br></code></pre></td>
<td class="source"><pre><code><cite>// unordered_set hash table stats</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;unordered_set&gt;</dfn>

<var>int</var> main ()
{
  std::unordered_set&lt;<var>int</var>&gt; myset;

  std::cout &lt;&lt; <kbd>"size = "</kbd> &lt;&lt; myset.size() &lt;&lt; std::endl;
  std::cout &lt;&lt; <kbd>"bucket_count = "</kbd> &lt;&lt; myset.bucket_count() &lt;&lt; std::endl;
  std::cout &lt;&lt; <kbd>"load_factor = "</kbd> &lt;&lt; myset.load_factor() &lt;&lt; std::endl;
  std::cout &lt;&lt; <kbd>"max_load_factor = "</kbd> &lt;&lt; myset.max_load_factor() &lt;&lt; std::endl;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Possible output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>size = 0
bucket_count = 11
load_factor = 0
max_load_factor = 1
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Constant.<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
No changes.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/unordered_set/unordered_set/max_load_factor/"><b>unordered_set::max_load_factor</b></a></dt><dd>Get or set maximum load factor <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_set/unordered_set/bucket_size/"><b>unordered_set::bucket_size</b></a></dt><dd>Return bucket size <span class="typ">(public member type)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_set/unordered_set/bucket_count/"><b>unordered_set::bucket_count</b></a></dt><dd>Return number of buckets <span class="typ">(public member function)</span></dd></dl>
</section>
<div id="CH_bb"></div></div></div>
