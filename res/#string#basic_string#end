<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;string&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/string/basic_string/">basic_string</a>::end</h1>
<div class="C_prototype"><div class="C_SwitchCases">
<div title="C++98">
<pre>      iterator end();const_iterator end() const;</pre></div>
<div title="C++11" class="on">
<pre>      iterator end() noexcept;const_iterator end() const noexcept;</pre></div>
</div>
</div><div id="I_description">Return iterator to end</div>
<section id="description">
Returns an iterator pointing to the <i>past-the-end</i> character of the string.<br>
<br>
The <dfn>past-the-end</dfn> character is a theoretical character that would follow the last character in the string. It shall not be dereferenced.<br>
<br>
Because the ranges used by functions of the standard library do not include the element pointed by their closing iterator, this function is often used in combination with <a href="/basic_string::begin">basic_string::begin</a> to specify a range including all the characters in the string.<br>
<br>
If the object is an <a href="/basic_string::empty">empty string</a>, this function returns the same as <a href="/basic_string::begin">basic_string::begin</a>.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
none<br>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
An iterator to the past-the-end of the string.<br>
<br>
If the <a href="/basic_string">basic_string</a> object is const-qualified, the function returns a <tt>const_iterator</tt>. Otherwise, it returns an <tt>iterator</tt>.<br>
<br>
Member types <tt>iterator</tt> and <tt>const_iterator</tt> are <a href="/RandomAccessIterator">random access iterator</a> types (pointing to a character and to a const character, respectively).<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br></code></pre></td>
<td class="source"><pre><code><cite>// string::begin/end</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>

<var>int</var> main ()
{
  std::string str (<kbd>"Test string"</kbd>);
  <var>for</var> ( std::string::iterator it=str.begin(); it!=str.end(); ++it)
    std::cout &lt;&lt; *it;
  std::cout &lt;&lt; <kbd>'\n'</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>Test string
</samp></pre></td></tr></table></div>
</section>
<br>
<div class="C_SwitchCases">
<div title="C++98">
<section id="complexity">
<h3>Complexity</h3>
Unspecified.<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
Generally, no changes.<br>
On some implementations, the non-const version may invalidate all iterators, pointers and references on the first access to string characters after the object has been constructed or modified.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The object is accessed, and in some implementations, the non-const version modifies it on the first access to string characters after the object has been constructed or modified.<br>
The iterator returned can be used to access or modify characters.<br>
</section>
</div>
<div title="C++11">
<section id="complexity">
<h3>Complexity</h3>
Unspecified, but generally constant.<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
No changes.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The object is accessed (neither the const nor the non-const versions modify it).<br>
The iterator returned can be used to access or modify characters. Concurrently accessing or modifying different characters is safe.<br>
</section>
</div>
</div>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
<b>No-throw guarantee:</b> this member function never throws exceptions.<br>
The copy construction or assignment of the returned iterator is also guaranteed to never throw.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/string/basic_string/begin/"><b>basic_string::begin</b></a></dt><dd>Return iterator to beginning <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/string/basic_string/rbegin/"><b>basic_string::rbegin</b></a></dt><dd>Return reverse iterator to reverse beginning <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/string/basic_string/rend/"><b>basic_string::rend</b></a></dt><dd>Return reverse iterator to reverse end <span class="typ">(public member function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
