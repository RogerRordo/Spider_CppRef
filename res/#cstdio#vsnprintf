<div id="I_content">
<div class="C_doc">
<div id="I_type">function</div>
<div id="I_file">&lt;cstdio&gt;</div>
<h1>vsnprintf<span class="C_ico cpp11warning" title="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it." alt="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it."></span></h1>
<div class="C_prototype"><pre>int vsnprintf (char * s, size_t n, const char * format, va_list arg );</pre></div><div id="I_description">Write formatted data from variable argument list to sized buffer</div>
<section id="description">
Composes a string with the same text that would be printed if <i>format</i> was used on <a href="/printf">printf</a>, but using the elements in the variable argument list identified by <i>arg</i> instead of additional function arguments and storing the resulting content as a <i>C string</i> in the buffer pointed by <i>s</i> (taking <i>n</i> as the maximum buffer capacity to fill).<br>
<br>
If the resulting string would be longer than <tt>n-1</tt> characters, the remaining characters are discarded and not stored, but counted for the value returned by the function.<br>
<br>
Internally, the function retrieves arguments from the list identified by <i>arg</i> as if <a href="/va_arg">va_arg</a> was used on it, and thus the state of <i>arg</i> is likely to be altered by the call.<br>
<br>
In any case, <i>arg</i> should have been initialized by <a href="/va_start">va_start</a> at some point before the call, and it is expected to be released by <a href="/va_end">va_end</a> at some point after the call.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>s</dt>
<dd>Pointer to a buffer where the resulting C-string is stored.<br>
The buffer should have a size of at least <i>n</i> characters.</dd>
<dt>n</dt>
<dd>Maximum number of bytes to be used in the buffer.<br>
The generated string has a length of at most <tt>n-1</tt>, leaving space for the additional terminating null character.<br>
<a href="/cstdio:size_t">size_t</a> is an unsigned integral type.</dd>
<dt>format</dt>
<dd>C string that contains a format string that follows the same specifications as <i>format</i> in <a href="/printf">printf</a> (see <a href="/printf">printf</a> for details).</dd>
<dt>arg</dt>
<dd>A value identifying a variable arguments list initialized with <a href="/va_start">va_start</a>.<br>
<a href="/va_list">va_list</a> is a special type defined in <a href="/cstdarg">&lt;cstdarg&gt;</a>.</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
The number of characters that would have been written if <var>n</var> had been sufficiently large, not counting the terminating <i>null character</i>.<br>
If an encoding error occurs, a negative number is returned.<br>
Notice that only when this returned value is non-negative and less than <var>n</var>, the string has been completely written.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br></code></pre></td>
<td class="source"><pre><code><cite>/* vsnprintf example */</cite>
<dfn>#include &lt;stdio.h&gt;</dfn>
<dfn>#include &lt;stdarg.h&gt;</dfn>

<var>void</var> PrintFError ( <var>const</var> <var>char</var> * format, ... )
{
  <var>char</var> buffer[256];
  va_list args;
  va_start (args, format);
  vsnprintf (buffer,256,format, args);
  perror (buffer);
  va_end (args);
}

<var>int</var> main ()
{
   FILE * pFile;
   <var>char</var> szFileName[]=<kbd>"myfile.txt"</kbd>;

   pFile = fopen (szFileName,<kbd>"r"</kbd>);
   <var>if</var> (pFile == NULL)
     PrintFError (<kbd>"Error opening '%s'"</kbd>,szFileName);
   <var>else</var>
   {
     <cite>// file successfully open</cite>
     fclose (pFile);
   }
   <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
In this example, if the file <tt>myfile.txt</tt> does not exist, <a href="/perror">perror</a> is called to show an error message similar to:<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>Error opening file 'myfile.txt': No such file or directory
</samp></pre></td></tr></table></div> <br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/cstdio/vfprintf/"><b>vfprintf</b></a></dt><dd>Write formatted data from variable argument list to stream <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cstdio/vprintf/"><b>vprintf</b></a></dt><dd>Print formatted data from variable argument list to stdout <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cstdio/sprintf/"><b>sprintf</b></a></dt><dd>Write formatted data to string <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cstdio/printf/"><b>printf</b></a></dt><dd>Print formatted data to stdout <span class="typ">(function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
