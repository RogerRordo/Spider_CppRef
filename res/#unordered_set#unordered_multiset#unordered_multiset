<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;unordered_set&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/unordered_set/unordered_multiset/">unordered_multiset</a>::unordered_multiset<span class="C_ico cpp11warning" title="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it." alt="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it."></span></h1>
<div class="C_prototype"><div class="C_SwitchCases">
<div title="C++11">
<table><tr class="odd"><th>empty (1)</th><td><pre>explicit unordered_multiset ( size_type n = /* see below */,                              const hasher&amp; hf = hasher(),                              const key_equal&amp; eql = key_equal(),                              const allocator_type&amp; alloc = allocator_type() );explicit unordered_multiset ( const allocator_type&amp; alloc );</pre></td></tr><tr class="even"><th>range (2)</th><td><pre>template &lt;class InputIterator&gt;         unordered_multiset ( InputIterator first, InputIterator last,                              size_type n = /* see below */,                              const hasher&amp; hf = hasher(),                              const key_equal&amp; eql = key_equal(),                              const allocator_type&amp; alloc = allocator_type() );</pre></td></tr><tr class="odd"><th>copy (3)</th><td><pre>unordered_multiset ( const unordered_multiset&amp; ums );unordered_multiset ( const unordered_multiset&amp; ums, const allocator_type&amp; alloc );</pre></td></tr><tr class="even"><th>move (4)</th><td><pre>unordered_multiset ( unordered_multiset&amp;&amp; ums );unordered_multiset ( unordered_multiset&amp;&amp; ums, const allocator_type&amp; alloc );</pre></td></tr><tr class="odd"><th>initializer list (5)</th><td><pre>unordered_multiset ( initializer_list&lt;value_type&gt; il,                     size_type n = /* see below */,                     const hasher&amp; hf = hasher(),                     const key_equal&amp; eql = key_equal(),                     const allocator_type&amp; alloc = allocator_type() );</pre></td></tr></table></div>
<div title="C++14" class="on">
<table><tr class="even"><th>empty (1)</th><td><pre>unordered_multiset();explicit unordered_multiset ( size_type n,                              const hasher&amp; hf = hasher(),                              const key_equal&amp; eql = key_equal(),                              const allocator_type&amp; alloc = allocator_type() );explicit unordered_multiset ( const allocator_type&amp; alloc );         unordered_multiset ( size_type n, const allocator_type&amp; alloc );         unordered_multiset ( size_type n, const hasher&amp; hf, const allocator_type&amp; alloc );</pre></td></tr><tr class="odd"><th>range (2)</th><td><pre>template &lt;class InputIterator&gt;  unordered_multiset ( InputIterator first, InputIterator last,                       size_type n = /* see below */,                       const hasher&amp; hf = hasher(),                       const key_equal&amp; eql = key_equal(),                       const allocator_type&amp; alloc = allocator_type() );template &lt;class InputIterator&gt;  unordered_multiset ( InputIterator first, InputIterator last,                       size_type n, const allocator_type&amp; alloc );template &lt;class InputIterator&gt;  unordered_multiset ( InputIterator first, InputIterator last,                       size_type n, const hasher&amp; hf, const allocator_type&amp; alloc );</pre></td></tr><tr class="even"><th>copy (3)</th><td><pre>unordered_multiset ( const unordered_multiset&amp; ums );unordered_multiset ( const unordered_multiset&amp; ums, const allocator_type&amp; alloc );</pre></td></tr><tr class="odd"><th>move (4)</th><td><pre>unordered_multiset ( unordered_multiset&amp;&amp; ums );unordered_multiset ( unordered_multiset&amp;&amp; ums, const allocator_type&amp; alloc );</pre></td></tr><tr class="even"><th>initializer list (5)</th><td><pre>unordered_multiset ( initializer_list&lt;value_type&gt; il,                     size_type n = /* see below */,                     const hasher&amp; hf = hasher(),                     const key_equal&amp; eql = key_equal(),                     const allocator_type&amp; alloc = allocator_type() );unordered_multiset ( initializer_list&lt;value_type&gt; il, size_type n,                     const allocator_type&amp; alloc );unordered_multiset ( initializer_list&lt;value_type&gt; il, size_type n, const hasher&amp; hf,                     const allocator_type&amp; alloc );</pre></td></tr></table></div>
</div>
</div><div id="I_description">Construct unordered_multiset</div>
<section id="description">
Constructs an <a href="/unordered_multiset">unordered_multiset</a> container object, initializing its contents depending on the constructor version used:<br>
<br>
<dl>
<dt>(1) empty container constructor (default constructor)</dt>
<dd>Constructs an empty <a href="/unordered_multiset">unordered_multiset</a> object, containing no elements and with a <a href="/unordered_multiset::size">size</a> of zero.<br>
It can construct the container with specific <i>hasher</i>, <i>key_equal</i> and <i>allocator</i> objects, along with a minimum number of hash buckets.</dd>
<dt>(2) range constructor</dt>
<dd>Constructs an <a href="/unordered_multiset">unordered_multiset</a> object containing copies of each of the elements in the range <tt>[first,last)</tt>.</dd>
<dt>(3) copy constructor (and copying with allocator)</dt>
<dd>The object is initialized to have the same contents and properties as the <i>ums</i> <a href="/unordered_multiset">unordered_multiset</a> object.</dd>
<dt>(4) move constructor (and moving with allocator)</dt>
<dd>The object acquires the contents of the rvalue <i>ums</i>.</dd>
<dt>(5) initializer list</dt>
<dd>Initializes the container with the contents of the list.</dd>
</dl>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>n</dt>
<dd>Minimum number of initial buckets.<br>
This is not the number of elements in the container, but the minimum number of slots desired for the internal hash table on construction.<br>
If this argument is not specified, the constructor determines this automatically (in a way that depends on the particular library implementation).<br>
Member type <tt>size_type</tt> is an unsigned integral type.</dd>
<dt>hf</dt>
<dd>Hasher function object. A hasher is a function that returns an integral value based on the container object key passed to it as argument.<br>
Member type <tt>hasher</tt> is defined in <a href="/unordered_multiset">unordered_multiset</a> as an alias of its second template parameter (<tt>Hash</tt>).</dd>
<dt>eql</dt>
<dd>Comparison function object, that returns <tt>true</tt> if the two container object keys passed as arguments are to be considered equal.<br>
Member type <tt>key_equal</tt> is defined in <a href="/unordered_multiset">unordered_multiset</a> as an alias of its third template parameter (<tt>Pred</tt>).</dd>
<dt>alloc</dt>
<dd>Allocator object to be used instead of constructing a new one.<br>
For class instantiations using their version of the default <a href="/allocator">allocator</a> class template, this parameter is not relevant.<br>
Member type <tt>allocator_type</tt> is defined in <a href="/unordered_multiset">unordered_multiset</a> as an alias of its fourth template parameter (<tt>Alloc</tt>).</dd>
<dt>first, last</dt>
<dd><a href="/InputIterator">Input iterators</a> to the initial and final positions in a range. The range used is <tt>[first,last)</tt>, which includes all the elements between <i>first</i> and <i>last</i>, including the element pointed by <i>first</i> but not the element pointed by <i>last</i>.<br>
The function template type can be any type of <a href="/InputIterator">input iterator</a>.<br>
</dd>
<dt>ums</dt>
<dd>Another <a href="/unordered_multiset">unordered_multiset</a> object of the same type (with the same class template arguments), whose contents are either copied or moved.<br>
</dd>
<dt>il</dt>
<dd>An <a href="/initializer_list">initializer_list</a> object.<br>
These objects are automatically constructed from <i>initializer list</i> declarators.<br>
Member type <tt>value_type</tt> is the type of the elements in the container, defined in <a href="/unordered_multiset">unordered_multiset</a> as an alias of the first template parameter (<tt>Key</tt>).</dd>
</dl>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br></code></pre></td>
<td class="source"><pre><code><cite>// constructing unordered_multisets</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>
<dfn>#include &lt;unordered_set&gt;</dfn>

<var>template</var>&lt;<var>class</var> T&gt;
T cmerge (T a, T b) { T t(a); t.insert(b.begin(),b.end()); <var>return</var> t; }

<var>int</var> main ()
{
  std::unordered_multiset&lt;std::string&gt; first;                                <cite>// empty</cite>
  std::unordered_multiset&lt;std::string&gt; second ( {<kbd>"red"</kbd>,<kbd>"green"</kbd>,<kbd>"blue"</kbd>} );    <cite>// init list</cite>
  std::unordered_multiset&lt;std::string&gt; third ( {<kbd>"red"</kbd>,<kbd>"yellow"</kbd>,<kbd>"blue"</kbd>} );    <cite>// init list</cite>
  std::unordered_multiset&lt;std::string&gt; fourth ( second );                    <cite>// copy</cite>
  std::unordered_multiset&lt;std::string&gt; fifth ( cmerge(third,fourth) );       <cite>// move</cite>
  std::unordered_multiset&lt;std::string&gt; sixth ( fifth.begin(), fifth.end() ); <cite>// range</cite>

  std::cout &lt;&lt; <kbd>"sixth contains:"</kbd>;
  <var>for</var> (<var>const</var> std::string&amp; x: sixth) std::cout &lt;&lt; <kbd>" "</kbd> &lt;&lt; x;
  std::cout &lt;&lt; std::endl;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Possible output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>sixth contains: yellow red red green blue blue
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
For the <i>empty (1)</i> and <i>move (4)</i> constructors: constant time.<br>
For the <i>range (2)</i>, <i>copy (3)</i>, and <i>initializer list (5)</i> constructors: average case linear, worst case quadratic.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/unordered_set/unordered_multiset/operator=/"><b>unordered_multiset::operator=</b></a></dt><dd>Assign content <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_set/unordered_multiset/insert/"><b>unordered_multiset::insert</b></a></dt><dd>Insert elements <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_set/unordered_multiset/reserve/"><b>unordered_multiset::reserve</b></a></dt><dd>Request a capacity change <span class="typ">(public member function)</span></dd></dl>
</section>
<div id="CH_bb"></div></div></div>
