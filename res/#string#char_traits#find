<div id="I_content">
<div class="C_doc">
<div id="I_type"> public static member function</div>
<div id="I_file">&lt;string&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/string/char_traits/">char_traits</a>::find</h1>
<div class="C_prototype"><pre>static const char_type* find (const char_type* p, size_t n, const char_type&amp; c);</pre></div><div id="I_description">Find first occurrence of character</div>
<section id="description">
Returns a pointer to the first character in the sequence of <i>n</i> characters pointed by <i>p</i> that compares equal to <i>c</i>.<br>
<br>
All <i>character traits</i> types shall implement the function as if the individual characters were compared using <a href="/char_traits::eq">member eq</a>.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>p</dt>
<dd>Pointer to an array with a sequence of characters.<br>
Notice that the function will consider that the length of the sequences is <i>n</i> characters, independently on whether it contains null-characters or not.<br>
<dt>n</dt>
<dd>Length (in characters) of the sequence of characters to compare.</dd>
<dt>c</dt>
<dd>A character value.</dd>
</dl>
<br>
Member type <tt>char_type</tt> is the <i>character type</i> (i.e., the class template parameter in <a href="/char_traits">char_traits</a>).<br>
<a href="/size_t">size_t</a> is an unsigned integral type.<br>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
A pointer to the first match, if any, or a <i>null pointer</i> otherwise.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br></code></pre></td>
<td class="source"><pre><code><cite>// char_traits::find</cite>
<dfn>#include &lt;iostream&gt;   </dfn><cite>// std::cout</cite>
<dfn>#include &lt;string&gt;     </dfn><cite>// std::char_traits</cite>

<var>int</var> main ()
{
  <var>const</var> <var>char</var> foo[] = <kbd>"test string"</kbd>;
  <var>const</var> <var>char</var>* p = std::char_traits&lt;<var>char</var>&gt;::find(foo,std::char_traits&lt;<var>char</var>&gt;::length(foo),<kbd>'i'</kbd>);
  <var>if</var> (p) std::cout &lt;&lt; <kbd>"the first 'i' in \""</kbd> &lt;&lt; foo &lt;&lt; <kbd>"\" is at "</kbd> &lt;&lt; (p-foo) &lt;&lt; <kbd>".\n"</kbd>;
  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>the first 'i' in "test string" is at 8.
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Up to linear in <i>n</i>.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
Unless either <i>p</i> does not point to an array long enough, this member function never throws exceptions (no-throw guarantee) in any of the standard specializations.<br>
Otherwise, it causes <i>undefined behavior</i>.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/string/char_traits/compare/"><b>char_traits::compare</b></a></dt><dd>Compare sequences of characters <span class="typ">( public static member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/string/char_traits/eq/"><b>char_traits::eq</b></a></dt><dd>Compare characters for equality <span class="typ">( public static member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/string/string/find/"><b>string::find</b></a></dt><dd>Find content in string <span class="typ">(public member function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
