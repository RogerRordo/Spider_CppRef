<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;vector&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/vector/vector/">vector</a>::reserve</h1>
<div class="C_prototype"><pre>void reserve (size_type n);</pre></div><div id="I_description">Request a change in capacity</div>
<section id="description">
Requests that the <a href="/vector::capacity">vector capacity</a> be at least enough to contain <i>n</i> elements.<br>
<br>
If <i>n</i> is greater than the current <a href="/vector::capacity">vector capacity</a>, the function causes the container to reallocate its storage increasing its <a href="/vector::capacity">capacity</a> to <i>n</i> (or greater).<br>
<br>
In all other cases, the function call does not cause a reallocation and the <a href="/vector::capacity">vector capacity</a> is not affected.<br>
<br>
This function has no effect on the <a href="/vector::size">vector size</a> and cannot alter its elements.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>n</dt>
<dd>Minimum <a href="/vector::capacity">capacity</a> for the <a href="/vector">vector</a>.<br>
Note that the resulting <a href="/vector::capacity">vector capacity</a> may be equal or greater than <i>n</i>.<br>
Member type <tt>size_type</tt> is an unsigned integral type.</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
none<br>
<br>
If the size requested is greater than the maximum size (<a href="/vector::max_size">vector::max_size</a>), a <a href="/length_error">length_error</a> exception is thrown.<br>
<br>
If case of reallocation, the storage is allocated using the container's <a href="/vector::get_allocator">allocator</a>, which may throw exceptions on failure (for the default <a href="/allocator">allocator</a>, <tt>bad_alloc</tt> is thrown if the allocation request does not succeed).<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br></code></pre></td>
<td class="source"><pre><code><cite>// vector::reserve</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;vector&gt;</dfn>

<var>int</var> main ()
{
  std::vector&lt;<var>int</var>&gt;::size_type sz;

  std::vector&lt;<var>int</var>&gt; foo;
  sz = foo.capacity();
  std::cout &lt;&lt; <kbd>"making foo grow:\n"</kbd>;
  <var>for</var> (<var>int</var> i=0; i&lt;100; ++i) {
    foo.push_back(i);
    <var>if</var> (sz!=foo.capacity()) {
      sz = foo.capacity();
      std::cout &lt;&lt; <kbd>"capacity changed: "</kbd> &lt;&lt; sz &lt;&lt; <kbd>'\n'</kbd>;
    }
  }

  std::vector&lt;<var>int</var>&gt; bar;
  sz = bar.capacity();
  bar.reserve(100);   <cite>// this is the only difference with foo above</cite>
  std::cout &lt;&lt; <kbd>"making bar grow:\n"</kbd>;
  <var>for</var> (<var>int</var> i=0; i&lt;100; ++i) {
    bar.push_back(i);
    <var>if</var> (sz!=bar.capacity()) {
      sz = bar.capacity();
      std::cout &lt;&lt; <kbd>"capacity changed: "</kbd> &lt;&lt; sz &lt;&lt; <kbd>'\n'</kbd>;
    }
  }
  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Possible output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
If a reallocation happens, linear in <a href="/vector::size">vector size</a> at most.<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
If a reallocation happens, all iterators, pointers and references related to the container are invalidated.<br>
Otherwise, they all keep referring to the same elements they were referring to before the call.<br>
</section>
<br>
<section id="thread">
<h3>Data races</h3>
If a reallocation happens, the container and all its contained elements are modified.<br>
Otherwise, the container is accessed, but not the contained elements: concurrently accessing or modifying them is safe.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
If no reallocations happen or if the type of the elements has either a non-throwing move constructor or a copy constructor, there are no changes in the container in case of exception (strong guarantee).<br>
Otherwise, the container is guaranteed to end in a valid state (basic guarantee).<br>
The function throws <a href="/length_error">length_error</a> if <i>n</i> is greater than <a href="/vector::max_size">max_size</a>.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/vector/vector/shrink_to_fit/"><b>vector::shrink_to_fit</b></a></dt><dd>Shrink to fit <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/vector/vector/capacity/"><b>vector::capacity</b></a></dt><dd>Return size of allocated storage capacity <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/vector/vector/resize/"><b>vector::resize</b></a></dt><dd>Change size <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/vector/vector/max_size/"><b>vector::max_size</b></a></dt><dd>Return maximum size <span class="typ">(public member function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
