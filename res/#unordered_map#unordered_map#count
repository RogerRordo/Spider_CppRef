<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;unordered_map&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/unordered_map/unordered_map/">unordered_map</a>::count<span class="C_ico cpp11warning" title="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it." alt="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it."></span></h1>
<div class="C_prototype"><pre>size_type count ( const key_type&amp; k ) const;</pre></div><div id="I_description">Count elements with a specific key</div>
<section id="description">
Searches the container for elements whose key is <i>k</i> and returns the number of elements found. Because <a href="/unordered_map">unordered_map</a> containers do not allow for duplicate keys, this means that the function actually returns <tt>1</tt> if an element with that key exists in the container, and zero otherwise.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>k</dt>
<dd>Key value to be searched for.<br>
Member type <tt>key_type</tt> is the type of the keys for the elements in the container, defined in <a href="/unordered_map">unordered_map</a> as an alias of its first template parameter (<tt>Key</tt>).</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
<tt>1</tt> if an element with a key equivalent to <i>k</i> is found, or zero otherwise.<br>
<br>
Member type <tt>size_type</tt> is an unsigned integral type.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br></code></pre></td>
<td class="source"><pre><code><cite>// unordered_map::count</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>
<dfn>#include &lt;unordered_map&gt;</dfn>

<var>int</var> main ()
{
  std::unordered_map&lt;std::string,<var>double</var>&gt; mymap = {
     {<kbd>"Burger"</kbd>,2.99},
     {<kbd>"Fries"</kbd>,1.99},
     {<kbd>"Soda"</kbd>,1.50} };

  <var>for</var> (<var>auto</var>&amp; x: {<kbd>"Burger"</kbd>,<kbd>"Pizza"</kbd>,<kbd>"Salad"</kbd>,<kbd>"Soda"</kbd>}) {
    <var>if</var> (mymap.count(x)&gt;0)
      std::cout &lt;&lt; <kbd>"mymap has "</kbd> &lt;&lt; x &lt;&lt; std::endl;
    <var>else</var>
      std::cout &lt;&lt; <kbd>"mymap has no "</kbd> &lt;&lt; x &lt;&lt; std::endl;
  }

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>mymap has Burger
mymap has no Pizza
mymap has no Salad
mymap has Soda
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Average case: linear in the number of elements counted.<br>
Worst case: linear in <a href="/unordered_map::size">container size</a>.<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
No changes.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/unordered_map/unordered_map/find/"><b>unordered_map::find</b></a></dt><dd>Get iterator to element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_map/unordered_map/operator[]/"><b>unordered_map::operator[]</b></a></dt><dd>Access element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_map/unordered_map/at/"><b>unordered_map::at</b></a></dt><dd>Access element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_map/unordered_map/size/"><b>unordered_map::size</b></a></dt><dd>Return container size <span class="typ">(public member function)</span></dd></dl>
</section>
<div id="CH_bb"></div></div></div>
