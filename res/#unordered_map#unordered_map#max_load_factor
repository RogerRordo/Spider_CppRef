<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;unordered_map&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/unordered_map/unordered_map/">unordered_map</a>::max_load_factor<span class="C_ico cpp11warning" title="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it." alt="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it."></span></h1>
<div class="C_prototype"><table><tr class="odd"><th>get (1)</th><td><pre>float max_load_factor() const noexcept;</pre></td></tr><tr class="even"><th>set (2)</th><td><pre>void max_load_factor ( float z );</pre></td></tr></table></div><div id="I_description">Get or set maximum load factor</div>
<section id="description">
The first version (1) returns the current maximum load factor for the <a href="/unordered_map">unordered_map</a> container.<br>
The second version (2) sets <i>z</i> as the new maximum load factor for the <a href="/unordered_map">unordered_map</a> container.<br>
<br>
The load factor is the ratio between the number of elements in the container (its <a href="/unordered_map::size">size</a>) and the number of buckets (<a href="/unordered_map::bucket_count">bucket_count</a>).<br>
<br>
By default, <a href="/unordered_map">unordered_map</a> containers have a <tt>max_load_factor</tt> of <tt>1.0</tt>.<br>
<br>
The load factor influences the probability of collision in the hash table (i.e., the probability of two elements being located in the same bucket). The container uses the value of <tt>max_load_factor</tt> as the threshold that forces an increase in the number of buckets (and thus causing a <a href="/unordered_map::rehash">rehash</a>).<br>
<br>
Note though, that implementations may impose an upper limit on the number of buckets (see <samp><a href="/unordered_map::max_bucket_count">max_bucket_count</a></samp>), which may force the container to ignore the <samp>max_load_factor</samp>.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>z</dt>
<dd>The new maximum load factor</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
The current load factor (only for the first version).<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br></code></pre></td>
<td class="source"><pre><code><cite>// unordered_map::max_load_factor</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>
<dfn>#include &lt;unordered_map&gt;</dfn>

<var>int</var> main ()
{
  std::unordered_map&lt;std::string,std::string&gt; mymap = {
    {<kbd>"Au"</kbd>,<kbd>"gold"</kbd>},
    {<kbd>"Ag"</kbd>,<kbd>"Silver"</kbd>},
    {<kbd>"Cu"</kbd>,<kbd>"Copper"</kbd>},
    {<kbd>"Pt"</kbd>,<kbd>"Platinum"</kbd>}
  };

  std::cout &lt;&lt; <kbd>"current max_load_factor: "</kbd> &lt;&lt; mymap.max_load_factor() &lt;&lt; std::endl;
  std::cout &lt;&lt; <kbd>"current size: "</kbd> &lt;&lt; mymap.size() &lt;&lt; std::endl;
  std::cout &lt;&lt; <kbd>"current bucket_count: "</kbd> &lt;&lt; mymap.bucket_count() &lt;&lt; std::endl;
  std::cout &lt;&lt; <kbd>"current load_factor: "</kbd> &lt;&lt; mymap.load_factor() &lt;&lt; std::endl;

  <var>float</var> z = mymap.max_load_factor();
  mymap.max_load_factor ( z / 2.0 );
  std::cout &lt;&lt; <kbd>"[max_load_factor halved]"</kbd> &lt;&lt; std::endl;

  std::cout &lt;&lt; <kbd>"new max_load_factor: "</kbd> &lt;&lt; mymap.max_load_factor() &lt;&lt; std::endl;
  std::cout &lt;&lt; <kbd>"new size: "</kbd> &lt;&lt; mymap.size() &lt;&lt; std::endl;
  std::cout &lt;&lt; <kbd>"new bucket_count: "</kbd> &lt;&lt; mymap.bucket_count() &lt;&lt; std::endl;
  std::cout &lt;&lt; <kbd>"new load_factor: "</kbd> &lt;&lt; mymap.load_factor() &lt;&lt; std::endl;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Possible output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>current max_load_factor: 1
current size: 4
current bucket_count: 5
current load_factor: 0.8
[max_load_factor halved]
new max_load_factor: 0.5
new size: 4
new bucket_count: 11
new load_factor: 0.363636
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Constant.<br>
May trigger a <a href="/unordered_map::rehash">rehash</a> (not included).<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
No changes, unless a change in this value forces a rehash. In this case, all iterators in the container are invalidated.<br>
<br>
A rehash is forced if the new container <a href="/unordered_map::max_load_factor">max_load_factor</a> is set below the current <a href="/unordered_map::load_factor">load_factor</a>.<br>
<br>
References to elements in the <a href="/unordered_map">unordered_map</a> container remain valid in all cases, even after a rehash.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/unordered_map/unordered_map/load_factor/"><b>unordered_map::load_factor</b></a></dt><dd>Return load factor <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_map/unordered_map/bucket_size/"><b>unordered_map::bucket_size</b></a></dt><dd>Return bucket size <span class="typ">(public member type)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_map/unordered_map/bucket_count/"><b>unordered_map::bucket_count</b></a></dt><dd>Return number of buckets <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_map/unordered_map/size/"><b>unordered_map::size</b></a></dt><dd>Return container size <span class="typ">(public member function)</span></dd></dl>
</section>
<div id="CH_bb"></div></div></div>
