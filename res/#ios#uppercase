<div id="I_content">
<div class="C_doc">
<div id="I_type">function</div>
<div id="I_file">&lt;ios&gt; &lt;iostream&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span>uppercase</h1>
<div class="C_prototype"><pre>ios_base&amp; uppercase (ios_base&amp; str);</pre></div><div id="I_description">Generate upper-case letters</div>
<section id="description">
Sets the <samp>uppercase</samp> format flag for the <var>str</var> stream.<br>
<br>
When the <samp>uppercase</samp> format flag is set, uppercase (capital) letters are used instead of lowercase for representations on output operations involving stream-generated letters, like some hexadecimal representations and numerical base prefixes.<br>
<br>
This flag can be unset with the <samp><a href="/nouppercase">nouppercase</a></samp> manipulator, not forcing the use of uppercase for generated letters.<br>
<br>
For standard streams, the <samp>uppercase</samp> flag is <strong>not set</strong> on initialization.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>str</dt>
<dd>Stream object whose <i>format flag</i> is affected.<br>
Because this function is a manipulator, it is designed to be used alone with no arguments in conjunction with the <i>insertion</i> (<code>&lt;&lt;</code>) and <i>extraction</i> (<code>&gt;&gt;</code>) operations on streams (see example below).<br>
</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
Argument <var>str</var>.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br></code></pre></td>
<td class="source"><pre><code><cite>// modify uppercase flag</cite>
<dfn>#include &lt;iostream&gt;     </dfn><cite>// std::cout, std::showbase, std::hex</cite>
                        <cite>// std::uppercase, std::nouppercase</cite>
<var>int</var> main () {
  std::cout &lt;&lt; std::showbase &lt;&lt; std::hex;
  std::cout &lt;&lt; std::uppercase &lt;&lt; 77 &lt;&lt; <kbd>'\n'</kbd>;
  std::cout &lt;&lt; std::nouppercase &lt;&lt; 77 &lt;&lt; <kbd>'\n'</kbd>;
  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Possible output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>0X4D
0x4d</samp></pre></td></tr></table></div>
</section>
<br>
<section id="access">
<h3>Data races</h3>
Modifies <var>str</var>. Concurrent access to the same stream object may cause data races.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
<b>Basic guarantee:</b> if an exception is thrown, <var>str</var> is in a valid state.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/ios/nouppercase/"><b>nouppercase</b></a></dt><dd>Do not generate upper case letters <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/ios/ios_base/flags/"><b>ios_base::flags</b></a></dt><dd>Get/set format flags <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/ios/ios_base/setf/"><b>ios_base::setf</b></a></dt><dd>Set specific format flags <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/ios/ios_base/unsetf/"><b>ios_base::unsetf</b></a></dt><dd>Clear specific format flags <span class="typ">(public member function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
