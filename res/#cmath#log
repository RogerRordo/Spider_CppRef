<div id="I_content">
<div class="C_doc">
<div id="I_type">function</div>
<div id="I_file">&lt;cmath&gt; &lt;ctgmath&gt;</div>
<h1>log</h1>
<div class="C_prototype"><div class="C_SwitchCases">
<div title="C90">
<pre>double log (double x);</pre></div>
<div title="C99" class="on">
<pre>     double log  (     double x);      float logf (      float x);long double logl (long double x);</pre></div>
<div title="C++98" class="on">
<pre>     double log (     double x);      float log (      float x);long double log (long double x);</pre></div>
<div title="C++11" class="on">
<pre>     double log (double x);      float log (float x);long double log (long double x);     double log (T x);           // additional overloads for integral types</pre></div>
</div>
</div><div id="I_description">Compute natural logarithm</div>
<section id="description">
Returns the <i>natural logarithm</i> of <var>x</var>.<br>
<br>
The <dfn>natural logarithm</dfn> is the base-e logarithm: the inverse of the natural exponential function (<samp><a href="/exp">exp</a></samp>). For common (base-10) logarithms, see <samp><a href="/log10">log10</a></samp>.<br>
<br>
<div class="C_SwitchCases">
<div title="C99">
Header <samp><a href="/&lt;ctgmath&gt;">&lt;tgmath.h&gt;</a></samp> provides a type-generic macro version of this function.<br>
</div>
<div title="C++98">
This function is overloaded in <code><a href="/&lt;complex&gt;">&lt;complex&gt;</a></code> and <code><a href="/&lt;valarray&gt;">&lt;valarray&gt;</a></code> (see <a href="/complex:log">complex log</a> and <a href="/valarray:log">valarray log</a>).<br>
</div>
<div title="C++11">
<i>Additional overloads</i> are provided in this header (<code><a href="/&lt;cmath&gt;">&lt;cmath&gt;</a></code>) for the <a href="/is_integral">integral types</a>: These overloads effectively cast <var>x</var> to a <code>double</code> before calculations.<br>
<br>
This function is also overloaded in <code><a href="/&lt;complex&gt;">&lt;complex&gt;</a></code> and <code><a href="/&lt;valarray&gt;">&lt;valarray&gt;</a></code> (see <a href="/complex:log">complex log</a> and <a href="/valarray:log">valarray log</a>).<br>
</div>
</div>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>x</dt>
<dd>Value whose logarithm is calculated.<br>
If the argument is negative, a <i>domain error</i> occurs.<br>
</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
Natural logarithm of <var>x</var>.<br>
If <var>x</var> is negative, it causes a <i>domain error</i>.<br>
If <var>x</var> is zero, it may cause a <i>pole error</i> (depending on the library implementation).<br>
<br>
<div class="C_SwitchCases">
<div title="C90 (C++98)">
If a <i>domain error</i> occurs, the global variable <samp><a href="/errno">errno</a></samp> is set to <samp><a href="/EDOM">EDOM</a></samp>.<br>
If a <i>pole error</i> occurs, the global variable <samp><a href="/errno">errno</a></samp> is set <samp><a href="/ERANGE">ERANGE</a></samp>.<br>
</div>
<div title="C99 (C+11)">
If a <i>domain error</i> occurs:<br>
- And <samp><a href="/math_errhandling">math_errhandling</a></samp> has <samp><a href="/MATH_ERRNO">MATH_ERRNO</a></samp> set: the global variable <samp><a href="/errno">errno</a></samp> is set to <samp><a href="/EDOM">EDOM</a></samp>.<br>
- And <samp><a href="/math_errhandling">math_errhandling</a></samp> has <samp><a href="/MATH_ERREXCEPT">MATH_ERREXCEPT</a></samp> set: <samp><a href="/FE_INVALID">FE_INVALID</a></samp> is raised.<br>
<br>
If a <i>pole error</i> occurs:<br>
- And <samp><a href="/math_errhandling">math_errhandling</a></samp> has <samp><a href="/MATH_ERRNO">MATH_ERRNO</a></samp> set: the global variable <samp><a href="/errno">errno</a></samp> is set to <samp><a href="/ERANGE">ERANGE</a></samp>.<br>
- And <samp><a href="/math_errhandling">math_errhandling</a></samp> has <samp><a href="/MATH_ERREXCEPT">MATH_ERREXCEPT</a></samp> set: <samp><a href="/FE_DIVBYZERO">FE_DIVBYZERO</a></samp> is raised.<br>
</div>
</div>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br></code></pre></td>
<td class="source"><pre><code><cite>/* log example */</cite>
<dfn>#include &lt;stdio.h&gt;      </dfn><cite>/* printf */</cite><dfn></dfn>
<dfn>#include &lt;math.h&gt;       </dfn><cite>/* log */</cite><dfn></dfn>

<var>int</var> main ()
{
  <var>double</var> param, result;
  param = 5.5;
  result = log (param);
  printf (<kbd>"log(%f) = %f\n"</kbd>, param, result );
  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>
log(5.500000) = 1.704748
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/cmath/log10/"><b>log10</b></a></dt><dd>Compute common logarithm <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/exp/"><b>exp</b></a></dt><dd>Compute exponential function <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cmath/pow/"><b>pow</b></a></dt><dd>Raise to power <span class="typ">(function)</span></dd></dl>
<div id="CH_bb"></div></div></div>
